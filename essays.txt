Inc recently asked me who I thought were the 5 most interesting startup founders of the last 30 years. How do you decide who's the most interesting The best test seemed to be influence: who are the 5 who've influenced me most Who do I use as examples when I'm talking to companies we fund Who do I find myself quoting 1. Steve JobsI'd guess Steve is the most influential founder not just for me but for most people you could ask. A lot of startup culture is Apple culture. He was the original young founder. And while the concept of "insanely great" already existed in the arts it was a novel idea to introduce into a company in the 1980s.More remarkable still he's stayed interesting for 30 years. People await new Apple products the way they'd await new books by a popular novelist. Steve may not literally design them but they wouldn't happen if he weren't CEO.Steve is clever and driven but so are a lot of people in the Valley. What makes him unique is his sense of design. Before him most companies treated design as a frivolous extra. Apple's competitors now know better.2. TJ RodgersTJ Rodgers isn't as famous as Steve Jobs but he may be the best writer among Silicon Valley CEOs. I've probably learned more from him about the startup way of thinking than from anyone else. Not so much from specific things he's written as by reconstructing the mind that produced them: brutally candid aggressively garbage collecting outdated ideas and yet driven by pragmatism rather than ideology.The first essay of his that I read was so electrifying that I remember exactly where I was at the time. It was High Technology Innovation: Free Markets or Government Subsidies and I was downstairs in the Harvard Square T Station. It felt as if someone had flipped on a light switch inside my head.3. Larry SergeyI'm sorry to treat Larry and Sergey as one person. I've always thought that was unfair to them. But it does seem as if Google was a collaboration.Before Google companies in Silicon Valley already knew it was important to have the best hackers. So they claimed at least. But Google pushed this idea further than anyone had before. Their hypothesis seems to have been that in the initial stages at least all you need is good hackers: if you hire all the smartest people and put them to work on a problem where their success can be measured you win. All the other stuff mdash which includes all the stuff that business schools think business consists of mdash you can figure out along the way. The results won't be perfect but they'll be optimal. If this was their hypothesis it's now been verified experimentally.4. Paul BuchheitFew know this but one person Paul Buchheit is responsible for three of the best things Google has done. He was the original author of GMail which is the most impressive thing Google has after search. He also wrote the first prototype of AdSense and was the author of Google's mantra "Don't be evil."PB made a point in a talk once that I now mention to every startup we fund: that it's better initially to make a small number of users really love you than a large number kind of like you. If I could tell startups only ten sentences this would be one of them.Now he's cofounder of a startup called Friendfeed. It's only a year old but already everyone in the Valley is watching them. Someone responsible for three of the biggest ideas at Google is going to come up with more.5. Sam AltmanI was told I shouldn't mention founders of YC funded companies in this list. But Sam Altman can't be stopped by such flimsy rules. If he wants to be on this list he's going to be.Honestly Sam is along with Steve Jobs the founder I refer to most when I'm advising startups. On questions of design I ask "What would Steve do " but on questions of strategy or ambition I ask "What would Sama do "What I learned from meeting Sama is that the doctrine of the elect applies to startups. It applies way less than most people think: startup investing does not consist of trying to pick winners the way you might in a horse race. But there are a few people with such force of will that they're going to get whatever they want.
 rev August 2009A couple days ago I found to my surprise that I'd been granted a patent. It issued in 2003 but no one told me. I wouldn't know about it now except that a few months ago while visiting Yahoo I happened to run into a Big Cheese I knew from working there in the late nineties. He brought up something called Revenue Loop which Viaweb had been working on when they bought us.The idea is basically that you sort search results not in order of textual "relevance" (as search engines did then) nor in order of how much advertisers bid (as Overture did) but in order of the bid times the number of transactions. Ordinarily you'd do this for shopping searches though in fact one of the features of our scheme is that it automatically detects which searches are shopping searches.If you just order the results in order of bids you can make the search results useless because the first results could be dominated by lame sites that had bid the most. But if you order results by bid multiplied by transactions far from selling out you're getting a better measure of relevance. What could be a better sign that someone was satisfied with a search result than going to the site and buying something And of course this algorithm automatically maximizes the revenue of the search engine.Everyone is focused on this type of approach now but few were in 1998. In 1998 it was all about selling banner ads. We didn't know that so we were pretty excited when we figured out what seemed to us the optimal way of doing shopping searches.When Yahoo was thinking of buying us we had a meeting with Jerry Yang in New York. For him I now realize this was supposed to be one of those meetings when you check out a company you've pretty much decided to buy just to make sure they're ok guys. We weren't expected to do more than chat and seem smart and reasonable. He must have been dismayed when I jumped up to the whiteboard and launched into a presentation of our exciting new technology.I was just as dismayed when he didn't seem to care at all about it. At the time I thought "boy is this guy poker faced. We present to him what has to be the optimal way of sorting product search results and he's not even curious." I didn't realize till much later why he didn't care. In 1998 advertisers were overpaying enormously for ads on web sites. In 1998 if advertisers paid the maximum that traffic was worth to them Yahoo's revenues would have decreased.Things are different now of course. Now this sort of thing is all the rage. So when I ran into the Yahoo exec I knew from the old days in the Yahoo cafeteria a few months ago the first thing he remembered was not (fortunately) all the fights I had with him but Revenue Loop."Well " I said "I think we actually applied for a patent on it. I'm not sure what happened to the application after I left.""Really That would be an important patent."So someone investigated and sure enough that patent application had continued in the pipeline for several years after and finally issued in 2003.The main thing that struck me on reading it actually is that lawyers at some point messed up my nice clear writing. Some clever person with a spell checker reduced one section to Zen like incomprehensibility: Also common spelling errors will tend to get fixed. For example if users searching for "compact disc player" end up spending considerable money at sites offering compact disc players then those pages will have a higher relevance for that search phrase even though the phrase "compact disc player" is not present on those pages. (That "compat disc player" wasn't a typo guys.)For the fine prose of the original see the provisional application of February 1998 back when we were still Viaweb and couldn't afford to pay lawyers to turn every "a lot of" into "considerable."
American technology companies want the government to make immigration easier because they say they can't find enough programmers in the US. Anti immigration people say that instead of letting foreigners take these jobs we should train more Americans to be programmers. Who's right The technology companies are right. What the anti immigration people don't understand is that there is a huge variation in ability between competent programmers and exceptional ones and while you can train people to be competent you can't train them to be exceptional. Exceptional programmers have an aptitude for and interest in programming that is not merely the product of training. 1 The US has less than 5 of the world's population. Which means if the qualities that make someone a great programmer are evenly distributed 95 of great programmers are born outside the US.The anti immigration people have to invent some explanation to account for all the effort technology companies have expended trying to make immigration easier. So they claim it's because they want to drive down salaries. But if you talk to startups you find practically every one over a certain size has gone through legal contortions to get programmers into the US where they then paid them the same as they'd have paid an American. Why would they go to extra trouble to get programmers for the same price The only explanation is that they're telling the truth: there are just not enough great programmers to go around. 2 I asked the CEO of a startup with about 70 programmers how many more he'd hire if he could get all the great programmers he wanted. He said "We'd hire 30 tomorrow morning." And this is one of the hot startups that always win recruiting battles. It's the same all over Silicon Valley. Startups are that constrained for talent.It would be great if more Americans were trained as programmers but no amount of training can flip a ratio as overwhelming as 95 to 5. Especially since programmers are being trained in other countries too. Barring some cataclysm it will always be true that most great programmers are born outside the US. It will always be true that most people who are great at anything are born outside the US. 3 Exceptional performance implies immigration. A country with only a few percent of the world's population will be exceptional in some field only if there are a lot of immigrants working in it.But this whole discussion has taken something for granted: that if we let more great programmers into the US they'll want to come. That's true now and we don't realize how lucky we are that it is. If we want to keep this option open the best way to do it is to take advantage of it: the more of the world's great programmers are here the more the rest will want to come here.And if we don't the US could be seriously fucked. I realize that's strong language but the people dithering about this don't seem to realize the power of the forces at work here. Technology gives the best programmers huge leverage. The world market in programmers seems to be becoming dramatically more liquid. And since good people like good colleagues that means the best programmers could collect in just a few hubs. Maybe mostly in one hub.What if most of the great programmers collected in one hub and it wasn't here That scenario may seem unlikely now but it won't be if things change as much in the next 50 years as they did in the last 50.We have the potential to ensure that the US remains a technology superpower just by letting in a few thousand great programmers a year. What a colossal mistake it would be to let that opportunity slip. It could easily be the defining mistake this generation of American politicians later become famous for. And unlike other potential mistakes on that scale it costs nothing to fix.So please get on with it. Notes 1 How much better is a great programmer than an ordinary one So much better that you can't even measure the difference directly. A great programmer doesn't merely do the same work faster. A great programmer will invent things an ordinary programmer would never even think of. This doesn't mean a great programmer is infinitely more valuable because any invention has a finite market value. But it's easy to imagine cases where a great programmer might invent things worth 100x or even 1000x an average programmer's salary. 2 There are a handful of consulting firms that rent out big pools of foreign programmers they bring in on H1 B visas. By all means crack down on these. It should be easy to write legislation that distinguishes them because they are so different from technology companies. But it is dishonest of the anti immigration people to claim that companies like Google and Facebook are driven by the same motives. An influx of inexpensive but mediocre programmers is the last thing they'd want it would destroy them. 3 Though this essay talks about programmers the group of people we need to import is broader ranging from designers to programmers to electrical engineers. The best one could do as a general term might be "digital talent." It seemed better to make the argument a little too narrow than to confuse everyone with a neologism. Thanks to Sam Altman John Collison Patrick Collison Jessica Livingston Geoff Ralston Fred Wilson and Qasar Younis for reading drafts of this.
What hard liquor cigarettes heroin and crack have in common is that they're all more concentrated forms of less addictive predecessors. Most if not all the things we describe as addictive are. And the scary thing is the process that created them is accelerating.We wouldn't want to stop it. It's the same process that cures diseases: technological progress. Technological progress means making things do more of what we want. When the thing we want is something we want to want we consider technological progress good. If some new technique makes solar cells x more efficient that seems strictly better. When progress concentrates something we don't want to want mdash when it transforms opium into heroin mdash it seems bad. But it's the same process at work. 1 No one doubts this process is accelerating which means increasing numbers of things we like will be transformed into things we like too much. 2 As far as I know there's no word for something we like too much. The closest is the colloquial sense of "addictive." That usage has become increasingly common during my lifetime. And it's clear why: there are an increasing number of things we need it for. At the extreme end of the spectrum are crack and meth. Food has been transformed by a combination of factory farming and innovations in food processing into something with way more immediate bang for the buck and you can see the results in any town in America. Checkers and solitaire have been replaced by World of Warcraft and FarmVille. TV has become much more engaging and even so it can't compete with Facebook.The world is more addictive than it was 40 years ago. And unless the forms of technological progress that produced these things are subject to different laws than technological progress in general the world will get more addictive in the next 40 years than it did in the last 40.The next 40 years will bring us some wonderful things. I don't mean to imply they're all to be avoided. Alcohol is a dangerous drug but I'd rather live in a world with wine than one without. Most people can coexist with alcohol but you have to be careful. More things we like will mean more things we have to be careful about.Most people won't unfortunately. Which means that as the world becomes more addictive the two senses in which one can live a normal life will be driven ever further apart. One sense of "normal" is statistically normal: what everyone else does. The other is the sense we mean when we talk about the normal operating range of a piece of machinery: what works best.These two senses are already quite far apart. Already someone trying to live well would seem eccentrically abstemious in most of the US. That phenomenon is only going to become more pronounced. You can probably take it as a rule of thumb from now on that if people don't think you're weird you're living badly.Societies eventually develop antibodies to addictive new things. I've seen that happen with cigarettes. When cigarettes first appeared they spread the way an infectious disease spreads through a previously isolated population. Smoking rapidly became a (statistically) normal thing. There were ashtrays everywhere. We had ashtrays in our house when I was a kid even though neither of my parents smoked. You had to for guests.As knowledge spread about the dangers of smoking customs changed. In the last 20 years smoking has been transformed from something that seemed totally normal into a rather seedy habit: from something movie stars did in publicity shots to something small huddles of addicts do outside the doors of office buildings. A lot of the change was due to legislation of course but the legislation couldn't have happened if customs hadn't already changed.It took a while though mdash on the order of 100 years. And unless the rate at which social antibodies evolve can increase to match the accelerating rate at which technological progress throws off new addictions we'll be increasingly unable to rely on customs to protect us. 3 Unless we want to be canaries in the coal mine of each new addiction mdash the people whose sad example becomes a lesson to future generations mdash we'll have to figure out for ourselves what to avoid and how. It will actually become a reasonable strategy (or a more reasonable strategy) to suspect everything new.In fact even that won't be enough. We'll have to worry not just about new things but also about existing things becoming more addictive. That's what bit me. I've avoided most addictions but the Internet got me because it became addictive while I was using it. 4 Most people I know have problems with Internet addiction. We're all trying to figure out our own customs for getting free of it. That's why I don't have an iPhone for example the last thing I want is for the Internet to follow me out into the world. 5 My latest trick is taking long hikes. I used to think running was a better form of exercise than hiking because it took less time. Now the slowness of hiking seems an advantage because the longer I spend on the trail the longer I have to think without interruption.Sounds pretty eccentric doesn't it It always will when you're trying to solve problems where there are no customs yet to guide you. Maybe I can't plead Occam's razor maybe I'm simply eccentric. But if I'm right about the acceleration of addictiveness then this kind of lonely squirming to avoid it will increasingly be the fate of anyone who wants to get things done. We'll increasingly be defined by what we say no to. Notes 1 Could you restrict technological progress to areas where you wanted it Only in a limited way without becoming a police state. And even then your restrictions would have undesirable side effects. "Good" and "bad" technological progress aren't sharply differentiated so you'd find you couldn't slow the latter without also slowing the former. And in any case as Prohibition and the "war on drugs" show bans often do more harm than good. 2 Technology has always been accelerating. By Paleolithic standards technology evolved at a blistering pace in the Neolithic period. 3 Unless we mass produce social customs. I suspect the recent resurgence of evangelical Christianity in the US is partly a reaction to drugs. In desperation people reach for the sledgehammer if their kids won't listen to them maybe they'll listen to God. But that solution has broader consequences than just getting kids to say no to drugs. You end up saying no to science as well. I worry we may be heading for a future in which only a few people plot their own itinerary through no land while everyone else books a package tour. Or worse still has one booked for them by the government. 4 People commonly use the word "procrastination" to describe what they do on the Internet. It seems to me too mild to describe what's happening as merely not doing work. We don't call it procrastination when someone gets drunk instead of working. 5 Several people have told me they like the iPad because it lets them bring the Internet into situations where a laptop would be too conspicuous. In other words it's a hip flask. (This is true of the iPhone too of course but this advantage isn't as obvious because it reads as a phone and everyone's used to those.)Thanks to Sam Altman Patrick Collison Jessica Livingston and Robert Morris for reading drafts of this.
Yesterday Fred Wilson published a remarkable post about missing Airbnb. VCs miss good startups all the time but it's extraordinarily rare for one to talk about it publicly till long afterward. So that post is further evidence what a rare bird Fred is. He's probably the nicest VC I know.Reading Fred's post made me go back and look at the emails I exchanged with him at the time trying to convince him to invest in Airbnb. It was quite interesting to read. You can see Fred's mind at work as he circles the deal.Fred and the Airbnb founders have generously agreed to let me publish this email exchange (with one sentence redacted about something that's strategically important to Airbnb and not an important part of the conversation). It's an interesting illustration of an element of the startup ecosystem that few except the participants ever see: investors trying to convince one another to invest in their portfolio companies. Hundreds if not thousands of conversations of this type are happening now but if one has ever been published I haven't seen it. The Airbnbs themselves never even saw these emails at the time.We do a lot of this behind the scenes stuff at YC because we invest in such a large number of companies and we invest so early that investors sometimes need a lot of convincing to see their merits. I don't always try as hard as this though. Fred must have found me quite annoying. from: Paul Graham to: Fred Wilson AirBedAndBreakfast Founders date: Fri Jan 23 2009 at 11:42 AM subject: meet the airbedsOne of the startups from the batch that just started AirbedAndBreakfast is in NYC right now meeting their users. (NYC is their biggest market.) I'd recommend meeting them if your schedule allows.I'd been thinking to myself that though these guys were going to do really well I should introduce them to angels because VCs would never go for it. But then I thought maybe I should give you more credit. You'll certainly like meeting them. Be sure to ask about how they funded themselves with breakfast cereal.There's no reason this couldn't be as big as Ebay. And this team is the right one to do it. pgfrom: Brian Chesky to: Paul Graham cc: Nathan Blecharczyk Joe Gebbia date: Fri Jan 23 2009 at 11:40 AM subject: Re: meet the airbedsPG Thanks for the intro Brianfrom: Paul Graham to: Brian Chesky cc: Nathan Blecharczyk Joe Gebbia date: Fri Jan 23 2009 at 12:38 PM subject: Re: meet the airbedsIt's a longshot at this stage but if there was any VC who'd get you guys it would be Fred. He is the least suburban golf playing VC I know.He likes to observe startups for a while before acting so don't be bummed if he seems ambivalent. pgfrom: Fred Wilson to: Paul Graham date: Sun Jan 25 2009 at 5:28 PM subject: Re: meet the airbedsThanks PaulWe are having a bit of a debate inside our partnership about the airbed concept. We'll finish that debate tomorrow in our weekly meeting and get back to you with our thoughtsThanksFredfrom: Paul Graham to: Fred Wilson date: Sun Jan 25 2009 at 10:48 PM subject: Re: meet the airbedsI'd recommend having the debate after meeting them instead of before. We had big doubts about this idea but they vanished on meeting the guys.from: Fred Wilson to: Paul Graham date: Mon Jan 26 2009 at 11:08 AM subject: RE: meet the airbedsWe are still very suspect of this idea but will take a meeting as you suggestThanksfredfrom: Fred Wilson to: Paul Graham AirBedAndBreakfast Founders date: Mon Jan 26 2009 at 11:09 AM subject: RE: meet the airbedsAirbed team Are you still in NYC We'd like to meet if you areThanksfredfrom: Paul Graham to: Fred Wilson date: Mon Jan 26 2009 at 1:42 PM subject: Re: meet the airbedsIdeas can morph. Practically every really big startup could say five years later "believe it or not we started out doing ." It just seemed a very good sign to me that these guys were actually on the ground in NYC hunting down (and understanding) their users. On top of several previous good signs. pgfrom: Fred Wilson to: Paul Graham date: Sun Feb 1 2009 at 7:15 AM subject: Re: meet the airbedsIt's interestingOur two junior team members were enthusiasticThe three "old guys" didn't get itfrom: Paul Graham to: Fred Wilson date: Mon Feb 9 2009 at 5:58 PM subject: airbnbThe Airbeds just won the first poll among all the YC startups in their batch by a landslide. In the past this has not been a 100 indicator of success (if only anything were) but much better than random. pgfrom: Fred Wilson to: Paul Graham date: Fri Feb 13 2009 at 5:29 PM subject: Re: airbnbI met them todayThey have an interesting businessI'm just not sure how big it's going to befredfrom: Paul Graham to: Fred Wilson date: Sat Feb 14 2009 at 9:50 AM subject: Re: airbnbDid they explain the long term goal of being the market in accommodation the way eBay is in stuff That seems like it would be huge. Hotels now are like airlines in the 1970s before they figured out how to increase their load factors.from: Fred Wilson to: Paul Graham date: Tue Feb 17 2009 at 2:05 PM subject: Re: airbnbThey did but I am not sure I buy thatABNB reminds me of Etsy in that it facilitates real commerce in a marketplace model directly between two peopleSo I think it can scale all the way to the bed and breakfast marketBut I am not sure they can take on the hotel marketI could be wrongBut even so if you include short term room rental second home rental bed and breakfast and other similar classes of accommodations you get to a pretty big opportunityfredfrom: Paul Graham to: Fred Wilson date: Wed Feb 18 2009 at 12:21 AM subject: Re: airbnbSo invest in them They're very capital efficient. They would make an investor's money go a long way.It's also counter cyclical. They just arrived back from NYC and when I asked them what was the most significant thing they'd observed it was how many of their users actually needed to do these rentals to pay their rents. pgfrom: Fred Wilson to: Paul Graham date: Wed Feb 18 2009 at 2:21 AM subject: Re: airbnbThere's a lot to likeI've done a few things like intro it to my friends at Foundry who were investors in Service Metrics and understand this modelI am also talking to my friend Mark Pincus who had an idea like this a few years ago.So we are working on itThanks for the leadFredfrom: Paul Graham to: Fred Wilson date: Fri Feb 20 2009 at 10:00 PM subject: airbnb already spreading to prosI know you're skeptical they'll ever get hotels but there's a continuum between private sofas and hotel rooms and they just moved one step further along it. link to an airbnb user This is after only a few months. I bet you they will get hotels eventually. It will start with small ones. Just wait till all the 10 room pensiones in Rome discover this site. And once it spreads to hotels where is the point (in size of chain) at which it stops Once something becomes a big marketplace you ignore it at your peril. pgfrom: Fred Wilson to: Paul Graham date: Sat Feb 21 2009 at 4:26 AM subject: Re: airbnb already spreading to prosThat's true. It's also true that there are quite a few marketplaces out there that serve this same marketIf you look at many of the people who list at ABNB they list elsewhere tooI am not negative on this one I am interested but we are still in the gathering data phase.fred 
One of the most valuable exercises you can try if you want to understand startups is to look at the most successful companies and explain why they were not as lame as they seemed when they first launched. Because they practically all seemed lame at first. Not just small lame. Not just the first step up a big mountain. More like the first step into a swamp.A Basic interpreter for the Altair How could that ever grow into a giant company People sleeping on airbeds in strangers' apartments A web site for college students to stalk one another A wimpy little single board computer for hobbyists that used a TV as a monitor A new search engine when there were already about 10 and they were all trying to de emphasize search These ideas didn't just seem small. They seemed wrong. They were the kind of ideas you could not merely ignore but ridicule.Often the founders themselves didn't know why their ideas were promising. They were attracted to these ideas by instinct because they were living in the future and they sensed that something was missing. But they could not have put into words exactly how their ugly ducklings were going to grow into big beautiful swans.Most people's first impulse when they hear about a lame sounding new startup idea is to make fun of it. Even a lot of people who should know better.When I encounter a startup with a lame sounding idea I ask "What Microsoft is this the Altair Basic of " Now it's a puzzle and the burden is on me to solve it. Sometimes I can't think of an answer especially when the idea is a made up one. But it's remarkable how often there does turn out to be an answer. Often it's one the founders themselves hadn't seen yet.Intriguingly there are sometimes multiple answers. I talked to a startup a few days ago that could grow into 3 distinct Microsofts. They'd probably vary in size by orders of magnitude. But you can never predict how big a Microsoft is going to be so in cases like that I encourage founders to follow whichever path is most immediately exciting to them. Their instincts got them this far. Why stop now 
(This essay is derived from a keynote at Xtech.)Startups happen in clusters. There are a lot of them in Silicon Valley and Boston and few in Chicago or Miami. A country that wants startups will probably also have to reproduce whatever makes these clusters form.I've claimed that the recipe is a great university near a town smart people like. If you set up those conditions within the US startups will form as inevitably as water droplets condense on a cold piece of metal. But when I consider what it would take to reproduce Silicon Valley in another country it's clear the US is a particularly humid environment. Startups condense more easily here.It is by no means a lost cause to try to create a silicon valley in another country. There's room not merely to equal Silicon Valley but to surpass it. But if you want to do that you have to understand the advantages startups get from being in America.1. The US Allows Immigration.For example I doubt it would be possible to reproduce Silicon Valley in Japan because one of Silicon Valley's most distinctive features is immigration. Half the people there speak with accents. And the Japanese don't like immigration. When they think about how to make a Japanese silicon valley I suspect they unconsciously frame it as how to make one consisting only of Japanese people. This way of framing the question probably guarantees failure.A silicon valley has to be a mecca for the smart and the ambitious and you can't have a mecca if you don't let people into it.Of course it's not saying much that America is more open to immigration than Japan. Immigration policy is one area where a competitor could do better.2. The US Is a Rich Country.I could see India one day producing a rival to Silicon Valley. Obviously they have the right people: you can tell that by the number of Indians in the current Silicon Valley. The problem with India itself is that it's still so poor.In poor countries things we take for granted are missing. A friend of mine visiting India sprained her ankle falling down the steps in a railway station. When she turned to see what had happened she found the steps were all different heights. In industrialized countries we walk down steps our whole lives and never think about this because there's an infrastructure that prevents such a staircase from being built.The US has never been so poor as some countries are now. There have never been swarms of beggars in the streets of American cities. So we have no data about what it takes to get from the swarms of beggars stage to the silicon valley stage. Could you have both at once or does there have to be some baseline prosperity before you get a silicon valley I suspect there is some speed limit to the evolution of an economy. Economies are made out of people and attitudes can only change a certain amount per generation. 1 3. The US Is Not (Yet) a Police State.Another country I could see wanting to have a silicon valley is China. But I doubt they could do it yet either. China still seems to be a police state and although present rulers seem enlightened compared to the last even enlightened despotism can probably only get you part way toward being a great economic power.It can get you factories for building things designed elsewhere. Can it get you the designers though Can imagination flourish where people can't criticize the government Imagination means having odd ideas and it's hard to have odd ideas about technology without also having odd ideas about politics. And in any case many technical ideas do have political implications. So if you squash dissent the back pressure will propagate into technical fields. 2 Singapore would face a similar problem. Singapore seems very aware of the importance of encouraging startups. But while energetic government intervention may be able to make a port run efficiently it can't coax startups into existence. A state that bans chewing gum has a long way to go before it could create a San Francisco.Do you need a San Francisco Might there not be an alternate route to innovation that goes through obedience and cooperation instead of individualism Possibly but I'd bet not. Most imaginative people seem to share a certain prickly independence whenever and wherever they lived. You see it in Diogenes telling Alexander to get out of his light and two thousand years later in Feynman breaking into safes at Los Alamos. 3 Imaginative people don't want to follow or lead. They're most productive when everyone gets to do what they want.Ironically of all rich countries the US has lost the most civil liberties recently. But I'm not too worried yet. I'm hoping once the present administration is out the natural openness of American culture will reassert itself.4. American Universities Are Better.You need a great university to seed a silicon valley and so far there are few outside the US. I asked a handful of American computer science professors which universities in Europe were most admired and they all basically said "Cambridge" followed by a long pause while they tried to think of others. There don't seem to be many universities elsewhere that compare with the best in America at least in technology.In some countries this is the result of a deliberate policy. The German and Dutch governments perhaps from fear of elitism try to ensure that all universities are roughly equal in quality. The downside is that none are especially good. The best professors are spread out instead of being concentrated as they are in the US. This probably makes them less productive because they don't have good colleagues to inspire them. It also means no one university will be good enough to act as a mecca attracting talent from abroad and causing startups to form around it.The case of Germany is a strange one. The Germans invented the modern university and up till the 1930s theirs were the best in the world. Now they have none that stand out. As I was mulling this over I found myself thinking: "I can understand why German universities declined in the 1930s after they excluded Jews. But surely they should have bounced back by now." Then I realized: maybe not. There are few Jews left in Germany and most Jews I know would not want to move there. And if you took any great American university and removed the Jews you'd have some pretty big gaps. So maybe it would be a lost cause trying to create a silicon valley in Germany because you couldn't establish the level of university you'd need as a seed. 4 It's natural for US universities to compete with one another because so many are private. To reproduce the quality of American universities you probably also have to reproduce this. If universities are controlled by the central government log rolling will pull them all toward the mean: the new Institute of X will end up at the university in the district of a powerful politician instead of where it should be.5. You Can Fire People in America.I think one of the biggest obstacles to creating startups in Europe is the attitude toward employment. The famously rigid labor laws hurt every company but startups especially because startups have the least time to spare for bureaucratic hassles.The difficulty of firing people is a particular problem for startups because they have no redundancy. Every person has to do their job well.But the problem is more than just that some startup might have a problem firing someone they needed to. Across industries and countries there's a strong inverse correlation between performance and job security. Actors and directors are fired at the end of each film so they have to deliver every time. Junior professors are fired by default after a few years unless the university chooses to grant them tenure. Professional athletes know they'll be pulled if they play badly for just a couple games. At the other end of the scale (at least in the US) are auto workers New York City schoolteachers and civil servants who are all nearly impossible to fire. The trend is so clear that you'd have to be willfully blind not to see it.Performance isn't everything you say Well are auto workers schoolteachers and civil servants happier than actors professors and professional athletes European public opinion will apparently tolerate people being fired in industries where they really care about performance. Unfortunately the only industry they care enough about so far is soccer. But that is at least a precedent.6. In America Work Is Less Identified with Employment.The problem in more traditional places like Europe and Japan goes deeper than the employment laws. More dangerous is the attitude they reflect: that an employee is a kind of servant whom the employer has a duty to protect. It used to be that way in America too. In 1970 you were still supposed to get a job with a big company for whom ideally you'd work your whole career. In return the company would take care of you: they'd try not to fire you cover your medical expenses and support you in old age.Gradually employment has been shedding such paternalistic overtones and becoming simply an economic exchange. But the importance of the new model is not just that it makes it easier for startups to grow. More important I think is that it it makes it easier for people to start startups.Even in the US most kids graduating from college still think they're supposed to get jobs as if you couldn't be productive without being someone's employee. But the less you identify work with employment the easier it becomes to start a startup. When you see your career as a series of different types of work instead of a lifetime's service to a single employer there's less risk in starting your own company because you're only replacing one segment instead of discarding the whole thing.The old ideas are so powerful that even the most successful startup founders have had to struggle against them. A year after the founding of Apple Steve Wozniak still hadn't quit HP. He still planned to work there for life. And when Jobs found someone to give Apple serious venture funding on the condition that Woz quit he initially refused arguing that he'd designed both the Apple I and the Apple II while working at HP and there was no reason he couldn't continue.7. America Is Not Too Fussy.If there are any laws regulating businesses you can assume larval startups will break most of them because they don't know what the laws are and don't have time to find out.For example many startups in America begin in places where it's not really legal to run a business. Hewlett Packard Apple and Google were all run out of garages. Many more startups including ours were initially run out of apartments. If the laws against such things were actually enforced most startups wouldn't happen.That could be a problem in fussier countries. If Hewlett and Packard tried running an electronics company out of their garage in Switzerland the old lady next door would report them to the municipal authorities.But the worst problem in other countries is probably the effort required just to start a company. A friend of mine started a company in Germany in the early 90s and was shocked to discover among many other regulations that you needed 20 000 in capital to incorporate. That's one reason I'm not typing this on an Apfel laptop. Jobs and Wozniak couldn't have come up with that kind of money in a company financed by selling a VW bus and an HP calculator. We couldn't have started Viaweb either. 5 Here's a tip for governments that want to encourage startups: read the stories of existing startups and then try to simulate what would have happened in your country. When you hit something that would have killed Apple prune it off.Startups are marginal. They're started by the poor and the timid they begin in marginal space and spare time they're started by people who are supposed to be doing something else and though businesses their founders often know nothing about business. Young startups are fragile. A society that trims its margins sharply will kill them all.8. America Has a Large Domestic Market.What sustains a startup in the beginning is the prospect of getting their initial product out. The successful ones therefore make the first version as simple as possible. In the US they usually begin by making something just for the local market.This works in America because the local market is 300 million people. It wouldn't work so well in Sweden. In a small country a startup has a harder task: they have to sell internationally from the start.The EU was designed partly to simulate a single large domestic market. The problem is that the inhabitants still speak many different languages. So a software startup in Sweden is still at a disadvantage relative to one in the US because they have to deal with internationalization from the beginning. It's significant that the most famous recent startup in Europe Skype worked on a problem that was intrinsically international.However for better or worse it looks as if Europe will in a few decades speak a single language. When I was a student in Italy in 1990 few Italians spoke English. Now all educated people seem to be expected to and Europeans do not like to seem uneducated. This is presumably a taboo subject but if present trends continue French and German will eventually go the way of Irish and Luxembourgish: they'll be spoken in homes and by eccentric nationalists.9. America Has Venture Funding.Startups are easier to start in America because funding is easier to get. There are now a few VC firms outside the US but startup funding doesn't only come from VC firms. A more important source because it's more personal and comes earlier in the process is money from individual angel investors. Google might never have got to the point where they could raise millions from VC funds if they hadn't first raised a hundred thousand from Andy Bechtolsheim. And he could help them because he was one of the founders of Sun. This pattern is repeated constantly in startup hubs. It's this pattern that makes them startup hubs.The good news is all you have to do to get the process rolling is get those first few startups successfully launched. If they stick around after they get rich startup founders will almost automatically fund and encourage new startups.The bad news is that the cycle is slow. It probably takes five years on average before a startup founder can make angel investments. And while governments might be able to set up local VC funds by supplying the money themselves and recruiting people from existing firms to run them only organic growth can produce angel investors.Incidentally America's private universities are one reason there's so much venture capital. A lot of the money in VC funds comes from their endowments. So another advantage of private universities is that a good chunk of the country's wealth is managed by enlightened investors.10. America Has Dynamic Typing for Careers.Compared to other industrialized countries the US is disorganized about routing people into careers. For example in America people often don't decide to go to medical school till they've finished college. In Europe they generally decide in high school.The European approach reflects the old idea that each person has a single definite occupation which is not far from the idea that each person has a natural "station" in life. If this were true the most efficient plan would be to discover each person's station as early as possible so they could receive the training appropriate to it.In the US things are more haphazard. But that turns out to be an advantage as an economy gets more liquid just as dynamic typing turns out to work better than static for ill defined problems. This is particularly true with startups. "Startup founder" is not the sort of career a high school student would choose. If you ask at that age people will choose conservatively. They'll choose well understood occupations like engineer or doctor or lawyer.Startups are the kind of thing people don't plan so you're more likely to get them in a society where it's ok to make career decisions on the fly.For example in theory the purpose of a PhD program is to train you to do research. But fortunately in the US this is another rule that isn't very strictly enforced. In the US most people in CS PhD programs are there simply because they wanted to learn more. They haven't decided what they'll do afterward. So American grad schools spawn a lot of startups because students don't feel they're failing if they don't go into research.Those worried about America's "competitiveness" often suggest spending more on public schools. But perhaps America's lousy public schools have a hidden advantage. Because they're so bad the kids adopt an attitude of waiting for college. I did I knew I was learning so little that I wasn't even learning what the choices were let alone which to choose. This is demoralizing but it does at least make you keep an open mind.Certainly if I had to choose between bad high schools and good universities like the US and good high schools and bad universities like most other industrialized countries I'd take the US system. Better to make everyone feel like a late bloomer than a failed child prodigy.AttitudesThere's one item conspicuously missing from this list: American attitudes. Americans are said to be more entrepreneurial and less afraid of risk. But America has no monopoly on this. Indians and Chinese seem plenty entrepreneurial perhaps more than Americans.Some say Europeans are less energetic but I don't believe it. I think the problem with Europe is not that they lack balls but that they lack examples.Even in the US the most successful startup founders are often technical people who are quite timid initially about the idea of starting their own company. Few are the sort of backslapping extroverts one thinks of as typically American. They can usually only summon up the activation energy to start a startup when they meet people who've done it and realize they could too.I think what holds back European hackers is simply that they don't meet so many people who've done it. You see that variation even within the US. Stanford students are more entrepreneurial than Yale students but not because of some difference in their characters the Yale students just have fewer examples.I admit there seem to be different attitudes toward ambition in Europe and the US. In the US it's ok to be overtly ambitious and in most of Europe it's not. But this can't be an intrinsically European quality previous generations of Europeans were as ambitious as Americans. What happened My hypothesis is that ambition was discredited by the terrible things ambitious people did in the first half of the twentieth century. Now swagger is out. (Even now the image of a very ambitious German presses a button or two doesn't it )It would be surprising if European attitudes weren't affected by the disasters of the twentieth century. It takes a while to be optimistic after events like that. But ambition is human nature. Gradually it will re emerge. 6 How To Do BetterI don't mean to suggest by this list that America is the perfect place for startups. It's the best place so far but the sample size is small and "so far" is not very long. On historical time scales what we have now is just a prototype.So let's look at Silicon Valley the way you'd look at a product made by a competitor. What weaknesses could you exploit How could you make something users would like better The users in this case are those critical few thousand people you'd like to move to your silicon valley.To start with Silicon Valley is too far from San Francisco. Palo Alto the original ground zero is about thirty miles away and the present center more like forty. So people who come to work in Silicon Valley face an unpleasant choice: either live in the boring sprawl of the valley proper or live in San Francisco and endure an hour commute each way.The best thing would be if the silicon valley were not merely closer to the interesting city but interesting itself. And there is a lot of room for improvement here. Palo Alto is not so bad but everything built since is the worst sort of strip development. You can measure how demoralizing it is by the number of people who will sacrifice two hours a day commuting rather than live there.Another area in which you could easily surpass Silicon Valley is public transportation. There is a train running the length of it and by American standards it's not bad. Which is to say that to Japanese or Europeans it would seem like something out of the third world.The kind of people you want to attract to your silicon valley like to get around by train bicycle and on foot. So if you want to beat America design a town that puts cars last. It will be a while before any American city can bring itself to do that.Capital GainsThere are also a couple things you could do to beat America at the national level. One would be to have lower capital gains taxes. It doesn't seem critical to have the lowest income taxes because to take advantage of those people have to move. 7 But if capital gains rates vary you move assets not yourself so changes are reflected at market speeds. The lower the rate the cheaper it is to buy stock in growing companies as opposed to real estate or bonds or stocks bought for the dividends they pay.So if you want to encourage startups you should have a low rate on capital gains. Politicians are caught between a rock and a hard place here however: make the capital gains rate low and be accused of creating "tax breaks for the rich " or make it high and starve growing companies of investment capital. As Galbraith said politics is a matter of choosing between the unpalatable and the disastrous. A lot of governments experimented with the disastrous in the twentieth century now the trend seems to be toward the merely unpalatable.Oddly enough the leaders now are European countries like Belgium which has a capital gains tax rate of zero.ImmigrationThe other place you could beat the US would be with smarter immigration policy. There are huge gains to be made here. Silicon valleys are made of people remember.Like a company whose software runs on Windows those in the current Silicon Valley are all too aware of the shortcomings of the INS but there's little they can do about it. They're hostages of the platform.America's immigration system has never been well run and since 2001 there has been an additional admixture of paranoia. What fraction of the smart people who want to come to America can even get in I doubt even half. Which means if you made a competing technology hub that let in all smart people you'd immediately get more than half the world's top talent for free.US immigration policy is particularly ill suited to startups because it reflects a model of work from the 1970s. It assumes good technical people have college degrees and that work means working for a big company.If you don't have a college degree you can't get an H1B visa the type usually issued to programmers. But a test that excludes Steve Jobs Bill Gates and Michael Dell can't be a good one. Plus you can't get a visa for working on your own company only for working as an employee of someone else's. And if you want to apply for citizenship you daren't work for a startup at all because if your sponsor goes out of business you have to start over.American immigration policy keeps out most smart people and channels the rest into unproductive jobs. It would be easy to do better. Imagine if instead you treated immigration like recruiting if you made a conscious effort to seek out the smartest people and get them to come to your country.A country that got immigration right would have a huge advantage. At this point you could become a mecca for smart people simply by having an immigration system that let them in.A Good VectorIf you look at the kinds of things you have to do to create an environment where startups condense none are great sacrifices. Great universities Livable towns Civil liberties Flexible employment laws Immigration policies that let in smart people Tax laws that encourage growth It's not as if you have to risk destroying your country to get a silicon valley these are all good things in their own right.And then of course there's the question can you afford not to I can imagine a future in which the default choice of ambitious young people is to start their own company rather than work for someone else's. I'm not sure that will happen but it's where the trend points now. And if that is the future places that don't have startups will be a whole step behind like those that missed the Industrial Revolution.Notes 1 On the verge of the Industrial Revolution England was already the richest country in the world. As far as such things can be compared per capita income in England in 1750 was higher than India's in 1960.Deane Phyllis The First Industrial Revolution Cambridge University Press 1965. 2 This has already happened once in China during the Ming Dynasty when the country turned its back on industrialization at the command of the court. One of Europe's advantages was that it had no government powerful enough to do that. 3 Of course Feynman and Diogenes were from adjacent traditions but Confucius though more polite was no more willing to be told what to think. 4 For similar reasons it might be a lost cause to try to establish a silicon valley in Israel. Instead of no Jews moving there only Jews would move there and I don't think you could build a silicon valley out of just Jews any more than you could out of just Japanese.(This is not a remark about the qualities of these groups just their sizes. Japanese are only about 2 of the world population and Jews about .2 .) 5 According to the World Bank the initial capital requirement for German companies is 47.6 of the per capita income. Doh.World Bank Doing Business in 2006 http: doingbusiness.org 6 For most of the twentieth century Europeans looked back on the summer of 1914 as if they'd been living in a dream world. It seems more accurate (or at least as accurate) to call the years after 1914 a nightmare than to call those before a dream. A lot of the optimism Europeans consider distinctly American is simply what they too were feeling in 1914. 7 The point where things start to go wrong seems to be about 50 . Above that people get serious about tax avoidance. The reason is that the payoff for avoiding tax grows hyperexponentially (x 1 x for 0 Thanks to Trevor Blackwell Matthias Felleisen Jessica Livingston Robert Morris Neil Rimer Hugues Steinier Brad Templeton Fred Wilson and Stephen Wolfram for reading drafts of this and to Ed Dumbill for inviting me to speak.
(This essay is derived from a talk at AngelConf.)When we sold our startup in 1998 I thought one day I'd do some angel investing. Seven years later I still hadn't started. I put it off because it seemed mysterious and complicated. It turns out to be easier than I expected and also more interesting.The part I thought was hard the mechanics of investing really isn't. You give a startup money and they give you stock. You'll probably get either preferred stock which means stock with extra rights like getting your money back first in a sale or convertible debt which means (on paper) you're lending the company money and the debt converts to stock at the next sufficiently big funding round. 1 There are sometimes minor tactical advantages to using one or the other. The paperwork for convertible debt is simpler. But really it doesn't matter much which you use. Don't spend much time worrying about the details of deal terms especially when you first start angel investing. That's not how you win at this game. When you hear people talking about a successful angel investor they're not saying "He got a 4x liquidation preference." They're saying "He invested in Google."That's how you win: by investing in the right startups. That is so much more important than anything else that I worry I'm misleading you by even talking about other things.MechanicsAngel investors often syndicate deals which means they join together to invest on the same terms. In a syndicate there is usually a "lead" investor who negotiates the terms with the startup. But not always: sometimes the startup cobbles together a syndicate of investors who approach them independently and the startup's lawyer supplies the paperwork.The easiest way to get started in angel investing is to find a friend who already does it and try to get included in his syndicates. Then all you have to do is write checks.Don't feel like you have to join a syndicate though. It's not that hard to do it yourself. You can just use the standard series AA documents Wilson Sonsini and Y Combinator published online. You should of course have your lawyer review everything. Both you and the startup should have lawyers. But the lawyers don't have to create the agreement from scratch. 2 When you negotiate terms with a startup there are two numbers you care about: how much money you're putting in and the valuation of the company. The valuation determines how much stock you get. If you put 50 000 into a company at a pre money valuation of 1 million then the post money valuation is 1.05 million and you get .05 1.05 or 4.76 of the company's stock.If the company raises more money later the new investor will take a chunk of the company away from all the existing shareholders just as you did. If in the next round they sell 10 of the company to a new investor your 4.76 will be reduced to 4.28 .That's ok. Dilution is normal. What saves you from being mistreated in future rounds usually is that you're in the same boat as the founders. They can't dilute you without diluting themselves just as much. And they won't dilute themselves unless they end up net ahead. So in theory each further round of investment leaves you with a smaller share of an even more valuable company till after several more rounds you end up with .5 of the company at the point where it IPOs and you are very happy because your 50 000 has become 5 million. 3 The agreement by which you invest should have provisions that let you contribute to future rounds to maintain your percentage. So it's your choice whether you get diluted. 4 If the company does really well you eventually will because eventually the valuations will get so high it's not worth it for you.How much does an angel invest That varies enormously from 10 000 to hundreds of thousands or in rare cases even millions. The upper bound is obviously the total amount the founders want to raise. The lower bound is 5 10 of the total or 10 000 whichever is greater. A typical angel round these days might be 150 000 raised from 5 people.Valuations don't vary as much. For angel rounds it's rare to see a valuation lower than half a million or higher than 4 or 5 million. 4 million is starting to be VC territory.How do you decide what valuation to offer If you're part of a round led by someone else that problem is solved for you. But what if you're investing by yourself There's no real answer. There is no rational way to value an early stage startup. The valuation reflects nothing more than the strength of the company's bargaining position. If they really want you either because they desperately need money or you're someone who can help them a lot they'll let you invest at a low valuation. If they don't need you it will be higher. So guess. The startup may not have any more idea what the number should be than you do. 5 Ultimately it doesn't matter much. When angels make a lot of money from a deal it's not because they invested at a valuation of 1.5 million instead of 3 million. It's because the company was really successful.I can't emphasize that too much. Don't get hung up on mechanics or deal terms. What you should spend your time thinking about is whether the company is good.(Similarly founders also should not get hung up on deal terms but should spend their time thinking about how to make the company good.)There's a second less obvious component of an angel investment: how much you're expected to help the startup. Like the amount you invest this can vary a lot. You don't have to do anything if you don't want to you could simply be a source of money. Or you can become a de facto employee of the company. Just make sure that you and the startup agree in advance about roughly how much you'll do for them.Really hot companies sometimes have high standards for angels. The ones everyone wants to invest in practically audition investors and only take money from people who are famous and or will work hard for them. But don't feel like you have to put in a lot of time or you won't get to invest in any good startups. There is a surprising lack of correlation between how hot a deal a startup is and how well it ends up doing. Lots of hot startups will end up failing and lots of startups no one likes will end up succeeding. And the latter are so desperate for money that they'll take it from anyone at a low valuation. 6 Picking WinnersIt would be nice to be able to pick those out wouldn't it The part of angel investing that has most effect on your returns picking the right companies is also the hardest. So you should practically ignore (or more precisely archive in the Gmail sense) everything I've told you so far. You may need to refer to it at some point but it is not the central issue.The central issue is picking the right startups. What "Make something people want" is for startups "Pick the right startups" is for investors. Combined they yield "Pick the startups that will make something people want."How do you do that It's not as simple as picking startups that are already making something wildly popular. By then it's too late for angels. VCs will already be onto them. As an angel you have to pick startups before they've got a hit mdash either because they've made something great but users don't realize it yet like Google early on or because they're still an iteration or two away from the big hit like Paypal when they were making software for transferring money between PDAs.To be a good angel investor you have to be a good judge of potential. That's what it comes down to. VCs can be fast followers. Most of them don't try to predict what will win. They just try to notice quickly when something already is winning. But angels have to be able to predict. 7 One interesting consequence of this fact is that there are a lot of people out there who have never even made an angel investment and yet are already better angel investors than they realize. Someone who doesn't know the first thing about the mechanics of venture funding but knows what a successful startup founder looks like is actually far ahead of someone who knows termsheets inside out but thinks "hacker" means someone who breaks into computers. If you can recognize good startup founders by empathizing with them mdash if you both resonate at the same frequency mdash then you may already be a better startup picker than the median professional VC. 8 Paul Buchheit for example started angel investing about a year after me and he was pretty much immediately as good as me at picking startups. My extra year of experience was rounding error compared to our ability to empathize with founders.What makes a good founder If there were a word that meant the opposite of hapless that would be the one. Bad founders seem hapless. They may be smart or not but somehow events overwhelm them and they get discouraged and give up. Good founders make things happen the way they want. Which is not to say they force things to happen in a predefined way. Good founders have a healthy respect for reality. But they are relentlessly resourceful. That's the closest I can get to the opposite of hapless. You want to fund people who are relentlessly resourceful.Notice we started out talking about things and now we're talking about people. There is an ongoing debate between investors which is more important the people or the idea mdash or more precisely the market. Some like Ron Conway say it's the people mdash that the idea will change but the people are the foundation of the company. Whereas Marc Andreessen says he'd back ok founders in a hot market over great founders in a bad one. 9 These two positions are not so far apart as they seem because good people find good markets. Bill Gates would probably have ended up pretty rich even if IBM hadn't happened to drop the PC standard in his lap.I've thought a lot about the disagreement between the investors who prefer to bet on people and those who prefer to bet on markets. It's kind of surprising that it even exists. You'd expect opinions to have converged more.But I think I've figured out what's going on. The three most prominent people I know who favor markets are Marc Jawed Karim and Joe Kraus. And all three of them in their own startups basically flew into a thermal: they hit a market growing so fast that it was all they could do to keep up with it. That kind of experience is hard to ignore. Plus I think they underestimate themselves: they think back to how easy it felt to ride that huge thermal upward and they think "anyone could have done it." But that isn't true they are not ordinary people.So as an angel investor I think you want to go with Ron Conway and bet on people. Thermals happen yes but no one can predict them mdash not even the founders and certainly not you as an investor. And only good people can ride the thermals if they hit them anyway.Deal FlowOf course the question of how to choose startups presumes you have startups to choose between. How do you find them This is yet another problem that gets solved for you by syndicates. If you tag along on a friend's investments you don't have to find startups.The problem is not finding startups exactly but finding a stream of reasonably high quality ones. The traditional way to do this is through contacts. If you're friends with a lot of investors and founders they'll send deals your way. The Valley basically runs on referrals. And once you start to become known as reliable useful investor people will refer lots of deals to you. I certainly will.There's also a newer way to find startups which is to come to events like Y Combinator's Demo Day where a batch of newly created startups presents to investors all at once. We have two Demo Days a year one in March and one in August. These are basically mass referrals.But events like Demo Day only account for a fraction of matches between startups and investors. The personal referral is still the most common route. So if you want to hear about new startups the best way to do it is to get lots of referrals.The best way to get lots of referrals is to invest in startups. No matter how smart and nice you seem insiders will be reluctant to send you referrals until you've proven yourself by doing a couple investments. Some smart nice guys turn out to be flaky high maintenance investors. But once you prove yourself as a good investor the deal flow as they call it will increase rapidly in both quality and quantity. At the extreme for someone like Ron Conway it is basically identical with the deal flow of the whole Valley.So if you want to invest seriously the way to get started is to bootstrap yourself off your existing connections be a good investor in the startups you meet that way and eventually you'll start a chain reaction. Good investors are rare even in Silicon Valley. There probably aren't more than a couple hundred serious angels in the whole Valley and yet they're probably the single most important ingredient in making the Valley what it is. Angels are the limiting reagent in startup formation.If there are only a couple hundred serious angels in the Valley then by deciding to become one you could single handedly make the pipeline for startups in Silicon Valley significantly wider. That is kind of mind blowing.Being GoodHow do you be a good angel investor The first thing you need is to be decisive. When we talk to founders about good and bad investors one of the ways we describe the good ones is to say "he writes checks." That doesn't mean the investor says yes to everyone. Far from it. It means he makes up his mind quickly and follows through. You may be thinking how hard could that be You'll see when you try it. It follows from the nature of angel investing that the decisions are hard. You have to guess early at the stage when the most promising ideas still seem counterintuitive because if they were obviously good VCs would already have funded them.Suppose it's 1998. You come across a startup founded by a couple grad students. They say they're going to work on Internet search. There are already a bunch of big public companies doing search. How can these grad students possibly compete with them And does search even matter anyway All the search engines are trying to get people to start calling them "portals" instead. Why would you want to invest in a startup run by a couple of nobodies who are trying to compete with large aggressive companies in an area they themselves have declared passe And yet the grad students seem pretty smart. What do you do There's a hack for being decisive when you're inexperienced: ratchet down the size of your investment till it's an amount you wouldn't care too much about losing. For every rich person (you probably shouldn't try angel investing unless you think of yourself as rich) there's some amount that would be painless though annoying to lose. Till you feel comfortable investing don't invest more than that per startup.For example if you have 5 million in investable assets it would probably be painless (though annoying) to lose 15 000. That's less than .3 of your net worth. So start by making 3 or 4 15 000 investments. Nothing will teach you about angel investing like experience. Treat the first few as an educational expense. 60 000 is less than a lot of graduate programs. Plus you get equity.What's really uncool is to be strategically indecisive: to string founders along while trying to gather more information about the startup's trajectory. 10 There's always a temptation to do that because you just have so little to go on but you have to consciously resist it. In the long term it's to your advantage to be good.The other component of being a good angel investor is simply to be a good person. Angel investing is not a business where you make money by screwing people over. Startups create wealth and creating wealth is not a zero sum game. No one has to lose for you to win. In fact if you mistreat the founders you invest in they'll just get demoralized and the company will do worse. Plus your referrals will dry up. So I recommend being good.The most successful angel investors I know are all basically good people. Once they invest in a company all they want to do is help it. And they'll help people they haven't invested in too. When they do favors they don't seem to keep track of them. It's too much overhead. They just try to help everyone and assume good things will flow back to them somehow. Empirically that seems to work. Notes 1 Convertible debt can be either capped at a particular valuation or can be done at a discount to whatever the valuation turns out to be when it converts. E.g. convertible debt at a discount of 30 means when it converts you get stock as if you'd invested at a 30 lower valuation. That can be useful in cases where you can't or don't want to figure out what the valuation should be. You leave it to the next investor. On the other hand a lot of investors want to know exactly what they're getting so they will only do convertible debt with a cap. 2 The expensive part of creating an agreement from scratch is not writing the agreement but bickering at several hundred dollars an hour over the details. That's why the series AA paperwork aims at a middle ground. You can just start from the compromise you'd have reached after lots of back and forth.When you fund a startup both your lawyers should be specialists in startups. Do not use ordinary corporate lawyers for this. Their inexperience makes them overbuild: they'll create huge overcomplicated agreements and spend hours arguing over irrelevant things.In the Valley the top startup law firms are Wilson Sonsini Orrick Fenwick West Gunderson Dettmer and Cooley Godward. In Boston the best are Goodwin Procter Wilmer Hale and Foley Hoag. 3 Your mileage may vary. 4 These anti dilution provisions also protect you against tricks like a later investor trying to steal the company by doing another round that values the company at 1. If you have a competent startup lawyer handle the deal for you you should be protected against such tricks initially. But it could become a problem later. If a big VC firm wants to invest in the startup after you they may try to make you take out your anti dilution protections. And if they do the startup will be pressuring you to agree. They'll tell you that if you don't you're going to kill their deal with the VC. I recommend you solve this problem by having a gentlemen's agreement with the founders: agree with them in advance that you're not going to give up your anti dilution protections. Then it's up to them to tell VCs early on.The reason you don't want to give them up is the following scenario. The VCs recapitalize the company meaning they give it additional funding at a pre money valuation of zero. This wipes out the existing shareholders including both you and the founders. They then grant the founders lots of options because they need them to stay around but you get nothing.Obviously this is not a nice thing to do. It doesn't happen often. Brand name VCs wouldn't recapitalize a company just to steal a few percent from an angel. But there's a continuum here. A less upstanding lower tier VC might be tempted to do it to steal a big chunk of stock.I'm not saying you should always absolutely refuse to give up your anti dilution protections. Everything is a negotiation. If you're part of a powerful syndicate you might be able to give up legal protections and rely on social ones. If you invest in a deal led by a big angel like Ron Conway for example you're pretty well protected against being mistreated because any VC would think twice before crossing him. This kind of protection is one of the reasons angels like to invest in syndicates. 5 Don't invest so much or at such a low valuation that you end up with an excessively large share of a startup unless you're sure your money will be the last they ever need. Later stage investors won't invest in a company if the founders don't have enough equity left to motivate them. I talked to a VC recently who said he'd met with a company he really liked but he turned them down because investors already owned more than half of it. Those investors probably thought they'd been pretty clever by getting such a large chunk of this desirable company but in fact they were shooting themselves in the foot. 6 At any given time I know of at least 3 or 4 YC alumni who I believe will be big successes but who are running on vapor financially because investors don't yet get what they're doing. (And no unfortunately I can't tell you who they are. I can't refer a startup to an investor I don't know.) 7 There are some VCs who can predict instead of reacting. Not surprisingly these are the most successful ones. 8 It's somewhat sneaky of me to put it this way because the median VC loses money. That's one of the most surprising things I've learned about VC while working on Y Combinator. Only a fraction of VCs even have positive returns. The rest exist to satisfy demand among fund managers for venture capital as an asset class. Learning this explained a lot about some of the VCs I encountered when we were working on Viaweb. 9 VCs also generally say they prefer great markets to great people. But what they're really saying is they want both. They're so selective that they only even consider great people. So when they say they care above all about big markets they mean that's how they choose between great people. 10 Founders rightly dislike the sort of investor who says he's interested in investing but doesn't want to lead. There are circumstances where this is an acceptable excuse but more often than not what it means is "No but if you turn out to be a hot deal I want to be able to claim retroactively I said yes."If you like a startup enough to invest in it then invest in it. Just use the standard series AA terms and write them a check. Thanks to Sam Altman Paul Buchheit Jessica Livingston Robert Morris and Fred Wilson for reading drafts of this.
When I talk to a startup that's been operating for more than 8 or 9 months the first thing I want to know is almost always the same. Assuming their expenses remain constant and their revenue growth is what it's been over the last several months do they make it to profitability on the money they have left Or to put it more dramatically by default do they live or die The startling thing is how often the founders themselves don't know. Half the founders I talk to don't know whether they're default alive or default dead.If you're among that number Trevor Blackwell has made a handy calculator you can use to find out.The reason I want to know first whether a startup is default alive or default dead is that the rest of the conversation depends on the answer. If the company is default alive we can talk about ambitious new things they could do. If it's default dead we probably need to talk about how to save it. We know the current trajectory ends badly. How can they get off that trajectory Why do so few founders know whether they're default alive or default dead Mainly I think because they're not used to asking that. It's not a question that makes sense to ask early on any more than it makes sense to ask a 3 year old how he plans to support himself. But as the company grows older the question switches from meaningless to critical. That kind of switch often takes people by surprise.I propose the following solution: instead of starting to ask too late whether you're default alive or default dead start asking too early. It's hard to say precisely when the question switches polarity. But it's probably not that dangerous to start worrying too early that you're default dead whereas it's very dangerous to start worrying too late.The reason is a phenomenon I wrote about earlier: the fatal pinch. The fatal pinch is default dead slow growth not enough time to fix it. And the way founders end up in it is by not realizing that's where they're headed.There is another reason founders don't ask themselves whether they're default alive or default dead: they assume it will be easy to raise more money. But that assumption is often false and worse still the more you depend on it the falser it becomes.Maybe it will help to separate facts from hopes. Instead of thinking of the future with vague optimism explicitly separate the components. Say "We're default dead but we're counting on investors to save us." Maybe as you say that it will set off the same alarms in your head that it does in mine. And if you set off the alarms sufficiently early you may be able to avoid the fatal pinch.It would be safe to be default dead if you could count on investors saving you. As a rule their interest is a function of growth. If you have steep revenue growth say over 6x a year you can start to count on investors being interested even if you're not profitable. 1 But investors are so fickle that you can never do more than start to count on it. Sometimes something about your business will spook investors even if your growth is great. So no matter how good your growth is you can never safely treat fundraising as more than a plan A. You should always have a plan B as well: you should know (as in write down) precisely what you'll need to do to survive if you can't raise more money and precisely when you'll have to switch to plan B if plan A isn't working.In any case growing fast versus operating cheaply is far from the sharp dichotomy many founders assume it to be. In practice there is surprisingly little connection between how much a startup spends and how fast it grows. When a startup grows fast it's usually because the product hits a nerve in the sense of hitting some big need straight on. When a startup spends a lot it's usually because the product is expensive to develop or sell or simply because they're wasteful.If you're paying attention you'll be asking at this point not just how to avoid the fatal pinch but how to avoid being default dead. That one is easy: don't hire too fast. Hiring too fast is by far the biggest killer of startups that raise money. 2 Founders tell themselves they need to hire in order to grow. But most err on the side of overestimating this need rather than underestimating it. Why Partly because there's so much work to be done. Naive founders think that if they can just hire enough people it somehow will be. Partly because successful startups have lots of employees so it seems like that's what one does in order to be successful. In fact the large staffs of successful startups are probably more the effect of growth than the cause. And partly because when founders have slow growth they don't want to face what is usually the real reason: the product is not appealing enough.Plus founders who've just raised money are often encouraged to overhire by the VCs who funded them. Kill or cure strategies are optimal for VCs because they're protected by the portfolio effect. VCs want to blow you up in one sense of the phrase or the other. But as a founder your incentives are different. You want above all to survive. 3 Here's a common way startups die. They make something moderately appealing and have decent initial growth. They raise their first round fairly easily because the founders seem smart and the idea sounds plausible. But because the product is only moderately appealing growth is ok but not great. The founders convince themselves that hiring a bunch of people is the way to boost growth. Their investors agree. But (because the product is only moderately appealing) the growth never comes. Now they're rapidly running out of runway. They hope further investment will save them. But because they have high expenses and slow growth they're now unappealing to investors. They're unable to raise more and the company dies.What the company should have done is address the fundamental problem: that the product is only moderately appealing. Hiring people is rarely the way to fix that. More often than not it makes it harder. At this early stage the product needs to evolve more than to be "built out " and that's usually easier with fewer people. 4 Asking whether you're default alive or default dead may save you from this. Maybe the alarm bells it sets off will counteract the forces that push you to overhire. Instead you'll be compelled to seek growth in other ways. For example by doing things that don't scale or by redesigning the product in the way only founders can. And for many if not most startups these paths to growth will be the ones that actually work.Airbnb waited 4 months after raising money at the end of Y nbsp Combinator before they hired their first employee. In the meantime the founders were terribly overworked. But they were overworked evolving Airbnb into the astonishingly successful organism it is now.Notes 1 Steep usage growth will also interest investors. Revenue will ultimately be a constant multiple of usage so x usage growth predicts x revenue growth. But in practice investors discount merely predicted revenue so if you're measuring usage you need a higher growth rate to impress investors. 2 Startups that don't raise money are saved from hiring too fast because they can't afford to. But that doesn't mean you should avoid raising money in order to avoid this problem any more than that total abstinence is the only way to avoid becoming an alcoholic. 3 I would not be surprised if VCs' tendency to push founders to overhire is not even in their own interest. They don't know how many of the companies that get killed by overspending might have done well if they'd survived. My guess is a significant number. 4 After reading a draft Sam Altman wrote:"I think you should make the hiring point more strongly. I think it's roughly correct to say that YC's most successful companies have never been the fastest to hire and one of the marks of a great founder is being able to resist this urge."Paul Buchheit adds:"A related problem that I see a lot is premature scaling mdash founders take a small business that isn't really working (bad unit economics typically) and then scale it up because they want impressive growth numbers. This is similar to over hiring in that it makes the business much harder to fix once it's big plus they are bleeding cash really fast." Thanks to Sam Altman Paul Buchheit Joe Gebbia Jessica Livingston and Geoff Ralston for reading drafts of this.
One of the differences between big companies and startups is that big companies tend to have developed procedures to protect themselves against mistakes. A startup walks like a toddler bashing into things and falling over all the time. A big company is more deliberate.The gradual accumulation of checks in an organization is a kind of learning based on disasters that have happened to it or others like it. After giving a contract to a supplier who goes bankrupt and fails to deliver for example a company might require all suppliers to prove they're solvent before submitting bids.As companies grow they invariably get more such checks either in response to disasters they've suffered or (probably more often) by hiring people from bigger companies who bring with them customs for protecting against new types of disasters.It's natural for organizations to learn from mistakes. The problem is people who propose new checks almost never consider that the check itself has a cost.Every check has a cost. For example consider the case of making suppliers verify their solvency. Surely that's mere prudence But in fact it could have substantial costs. There's obviously the direct cost in time of the people on both sides who supply and check proofs of the supplier's solvency. But the real costs are the ones you never hear about: the company that would be the best supplier but doesn't bid because they can't spare the effort to get verified. Or the company that would be the best supplier but falls just short of the threshold for solvency mdash which will of course have been set on the high side since there is no apparent cost of increasing it.Whenever someone in an organization proposes to add a new check they should have to explain not just the benefit but the cost. No matter how bad a job they did of analyzing it this meta check would at least remind everyone there had to be a cost and send them looking for it.If companies started doing that they'd find some surprises. Joel Spolsky recently spoke at Y Combinator about selling software to corporate customers. He said that in most companies software costing up to about 1000 could be bought by individual managers without any additional approvals. Above that threshold software purchases generally had to be approved by a committee. But babysitting this process was so expensive for software vendors that it didn't make sense to charge less than 50 000. Which means if you're making something you might otherwise have charged 5000 for you have to sell it for 50 000 instead.The purpose of the committee is presumably to ensure that the company doesn't waste money. And yet the result is that the company pays 10 times as much.Checks on purchases will always be expensive because the harder it is to sell something to you the more it has to cost. And not merely linearly either. If you're hard enough to sell to the people who are best at making things don't want to bother. The only people who will sell to you are companies that specialize in selling to you. Then you've sunk to a whole new level of inefficiency. Market mechanisms no longer protect you because the good suppliers are no longer in the market.Such things happen constantly to the biggest organizations of all governments. But checks instituted by governments can cause much worse problems than merely overpaying. Checks instituted by governments can cripple a country's whole economy. Up till about 1400 China was richer and more technologically advanced than Europe. One reason Europe pulled ahead was that the Chinese government restricted long trading voyages. So it was left to the Europeans to explore and eventually to dominate the rest of the world including China.In more recent times Sarbanes Oxley has practically destroyed the US IPO market. That wasn't the intention of the legislators who wrote it. They just wanted to add a few more checks on public companies. But they forgot to consider the cost. They forgot that companies about to go public are usually rather stretched and that the weight of a few extra checks that might be easy for General Electric to bear are enough to prevent younger companies from being public at all.Once you start to think about the cost of checks you can start to ask other interesting questions. Is the cost increasing or decreasing Is it higher in some areas than others Where does it increase discontinuously If large organizations started to ask questions like that they'd learn some frightening things.I think the cost of checks may actually be increasing. The reason is that software plays an increasingly important role in companies and the people who write software are particularly harmed by checks.Programmers are unlike many types of workers in that the best ones actually prefer to work hard. This doesn't seem to be the case in most types of work. When I worked in fast food we didn't prefer the busy times. And when I used to mow lawns I definitely didn't prefer it when the grass was long after a week of rain.Programmers though like it better when they write more code. Or more precisely when they release more code. Programmers like to make a difference. Good ones anyway.For good programmers one of the best things about working for a startup is that there are few checks on releases. In true startups there are no external checks at all. If you have an idea for a new feature in the morning you can write it and push it to the production servers before lunch. And when you can do that you have more ideas.At big companies software has to go through various approvals before it can be launched. And the cost of doing this can be enormous mdash in fact discontinuous. I was talking recently to a group of three programmers whose startup had been acquired a few years before by a big company. When they'd been independent they could release changes instantly. Now they said the absolute fastest they could get code released on the production servers was two weeks.This didn't merely make them less productive. It made them hate working for the acquirer.Here's a sign of how much programmers like to be able to work hard: these guys would have paid to be able to release code immediately the way they used to. I asked them if they'd trade 10 of the acquisition price for the ability to release code immediately and all three instantly said yes. Then I asked what was the maximum percentage of the acquisition price they'd trade for it. They said they didn't want to think about it because they didn't want to know how high they'd go but I got the impression it might be as much as half.They'd have sacrificed hundreds of thousands of dollars perhaps millions just to be able to deliver more software to users. And you know what It would have been perfectly safe to let them. In fact the acquirer would have been better off not only wouldn't these guys have broken anything they'd have gotten a lot more done. So the acquirer is in fact getting worse performance at greater cost. Just like the committee approving software purchases.And just as the greatest danger of being hard to sell to is not that you overpay but that the best suppliers won't even sell to you the greatest danger of applying too many checks to your programmers is not that you'll make them unproductive but that good programmers won't even want to work for you.Steve Jobs's famous maxim "artists ship" works both ways. Artists aren't merely capable of shipping. They insist on it. So if you don't let people ship you won't have any artists.
(This article was given as a talk at the 2003 Spam Conference. It describes the work I've done to improve the performance of the algorithm described in A Plan for Spam and what I plan to do in the future.)The first discovery I'd like to present here is an algorithm for lazy evaluation of research papers. Just write whatever you want and don't cite any previous work and indignant readers will send you references to all the papers you should have cited. I discovered this algorithm after A Plan for Spam'' 1 was on Slashdot.Spam filtering is a subset of text classification which is a well established field but the first papers about Bayesian spam filtering per se seem to have been two given at the same conference in 1998 one by Pantel and Lin 2 and another by a group from Microsoft Research 3 .When I heard about this work I was a bit surprised. If people had been onto Bayesian filtering four years ago why wasn't everyone using it When I read the papers I found out why. Pantel and Lin's filter was the more effective of the two but it only caught 92 of spam with 1.16 false positives.When I tried writing a Bayesian spam filter it caught 99.5 of spam with less than .03 false positives 4 . It's always alarming when two people trying the same experiment get widely divergent results. It's especially alarming here because those two sets of numbers might yield opposite conclusions. Different users have different requirements but I think for many people a filtering rate of 92 with 1.16 false positives means that filtering is not an acceptable solution whereas 99.5 with less than .03 false positives means that it is.So why did we get such different numbers I haven't tried to reproduce Pantel and Lin's results but from reading the paper I see five things that probably account for the difference.One is simply that they trained their filter on very little data: 160 spam and 466 nonspam mails. Filter performance should still be climbing with data sets that small. So their numbers may not even be an accurate measure of the performance of their algorithm let alone of Bayesian spam filtering in general.But I think the most important difference is probably that they ignored message headers. To anyone who has worked on spam filters this will seem a perverse decision. And yet in the very first filters I tried writing I ignored the headers too. Why Because I wanted to keep the problem neat. I didn't know much about mail headers then and they seemed to me full of random stuff. There is a lesson here for filter writers: don't ignore data. You'd think this lesson would be too obvious to mention but I've had to learn it several times.Third Pantel and Lin stemmed the tokens meaning they reduced e.g. both mailing'' and mailed'' to the root mail''. They may have felt they were forced to do this by the small size of their corpus but if so this is a kind of premature optimization.Fourth they calculated probabilities differently. They used all the tokens whereas I only use the 15 most significant. If you use all the tokens you'll tend to miss longer spams the type where someone tells you their life story up to the point where they got rich from some multilevel marketing scheme. And such an algorithm would be easy for spammers to spoof: just add a big chunk of random text to counterbalance the spam terms.Finally they didn't bias against false positives. I think any spam filtering algorithm ought to have a convenient knob you can twist to decrease the false positive rate at the expense of the filtering rate. I do this by counting the occurrences of tokens in the nonspam corpus double. I don't think it's a good idea to treat spam filtering as a straight text classification problem. You can use text classification techniques but solutions can and should reflect the fact that the text is email and spam in particular. Email is not just text it has structure. Spam filtering is not just classification because false positives are so much worse than false negatives that you should treat them as a different kind of error. And the source of error is not just random variation but a live human spammer working actively to defeat your filter.TokensAnother project I heard about after the Slashdot article was Bill Yerazunis' CRM114 5 . This is the counterexample to the design principle I just mentioned. It's a straight text classifier but such a stunningly effective one that it manages to filter spam almost perfectly without even knowing that's what it's doing.Once I understood how CRM114 worked it seemed inevitable that I would eventually have to move from filtering based on single words to an approach like this. But first I thought I'll see how far I can get with single words. And the answer is surprisingly far.Mostly I've been working on smarter tokenization. On current spam I've been able to achieve filtering rates that approach CRM114's. These techniques are mostly orthogonal to Bill's an optimal solution might incorporate both. A Plan for Spam'' uses a very simple definition of a token. Letters digits dashes apostrophes and dollar signs are constituent characters and everything else is a token separator. I also ignored case.Now I have a more complicated definition of a token: Case is preserved. Exclamation points are constituent characters. Periods and commas are constituents if they occur between two digits. This lets me get ip addresses and prices intact. A price range like 20 25 yields two tokens 20 and 25. Tokens that occur within the To From Subject and Return Path lines or within urls get marked accordingly. E.g. foo'' in the Subject line becomes Subject foo''. (The asterisk could be any character you don't allow as a constituent.) Such measures increase the filter's vocabulary which makes it more discriminating. For example in the current filter free'' in the Subject line has a spam probability of 98 whereas the same token in the body has a spam probability of only 65 .Here are some of the current probabilities 6 : Subject FREE 0.9999 free 0.9999 To free 0.9998 Subject free 0.9782 free 0.9199 Free 0.9198 Url free 0.9091 FREE 0.8747 From free 0.7636 free 0.6546 In the Plan for Spam filter all these tokens would have had the same probability .7602. That filter recognized about 23 000 tokens. The current one recognizes about 187 000.The disadvantage of having a larger universe of tokens is that there is more chance of misses. Spreading your corpus out over more tokens has the same effect as making it smaller. If you consider exclamation points as constituents for example then you could end up not having a spam probability for free with seven exclamation points even though you know that free with just two exclamation points has a probability of 99.99 .One solution to this is what I call degeneration. If you can't find an exact match for a token treat it as if it were a less specific version. I consider terminal exclamation points uppercase letters and occurring in one of the five marked contexts as making a token more specific. For example if I don't find a probability for Subject free '' I look for probabilities for Subject free'' free '' and free'' and take whichever one is farthest from .5.Here are the alternatives 7 considered if the filter sees FREE '' in the Subject line and doesn't have a probability for it. Subject Free Subject free Subject FREE Subject Free Subject free Subject FREE Subject Free Subject free FREE Free free FREE Free free FREE Free free If you do this be sure to consider versions with initial caps as well as all uppercase and all lowercase. Spams tend to have more sentences in imperative mood and in those the first word is a verb. So verbs with initial caps have higher spam probabilities than they would in all lowercase. In my filter the spam probability of Act'' is 98 and for act'' only 62 .If you increase your filter's vocabulary you can end up counting the same word multiple times according to your old definition of same''. Logically they're not the same token anymore. But if this still bothers you let me add from experience that the words you seem to be counting multiple times tend to be exactly the ones you'd want to.Another effect of a larger vocabulary is that when you look at an incoming mail you find more interesting tokens meaning those with probabilities far from .5. I use the 15 most interesting to decide if mail is spam. But you can run into a problem when you use a fixed number like this. If you find a lot of maximally interesting tokens the result can end up being decided by whatever random factor determines the ordering of equally interesting tokens. One way to deal with this is to treat some as more interesting than others.For example the token dalco'' occurs 3 times in my spam corpus and never in my legitimate corpus. The token Url optmails'' (meaning optmails'' within a url) occurs 1223 times. And yet as I used to calculate probabilities for tokens both would have the same spam probability the threshold of .99.That doesn't feel right. There are theoretical arguments for giving these two tokens substantially different probabilities (Pantel and Lin do) but I haven't tried that yet. It does seem at least that if we find more than 15 tokens that only occur in one corpus or the other we ought to give priority to the ones that occur a lot. So now there are two threshold values. For tokens that occur only in the spam corpus the probability is .9999 if they occur more than 10 times and .9998 otherwise. Ditto at the other end of the scale for tokens found only in the legitimate corpus.I may later scale token probabilities substantially but this tiny amount of scaling at least ensures that tokens get sorted the right way.Another possibility would be to consider not just 15 tokens but all the tokens over a certain threshold of interestingness. Steven Hauser does this in his statistical spam filter 8 . If you use a threshold make it very high or spammers could spoof you by packing messages with more innocent words.Finally what should one do about html I've tried the whole spectrum of options from ignoring it to parsing it all. Ignoring html is a bad idea because it's full of useful spam signs. But if you parse it all your filter might degenerate into a mere html recognizer. The most effective approach seems to be the middle course to notice some tokens but not others. I look at a img and font tags and ignore the rest. Links and images you should certainly look at because they contain urls.I could probably be smarter about dealing with html but I don't think it's worth putting a lot of time into this. Spams full of html are easy to filter. The smarter spammers already avoid it. So performance in the future should not depend much on how you deal with html.PerformanceBetween December 10 2002 and January 10 2003 I got about 1750 spams. Of these 4 got through. That's a filtering rate of about 99.75 .Two of the four spams I missed got through because they happened to use words that occur often in my legitimate email.The third was one of those that exploit an insecure cgi script to send mail to third parties. They're hard to filter based just on the content because the headers are innocent and they're careful about the words they use. Even so I can usually catch them. This one squeaked by with a probability of .88 just under the threshold of .9.Of course looking at multiple token sequences would catch it easily. Below is the result of your feedback form'' is an instant giveaway.The fourth spam was what I call a spam of the future because this is what I expect spam to evolve into: some completely neutral text followed by a url. In this case it was was from someone saying they had finally finished their homepage and would I go look at it. (The page was of course an ad for a porn site.)If the spammers are careful about the headers and use a fresh url there is nothing in spam of the future for filters to notice. We can of course counter by sending a crawler to look at the page. But that might not be necessary. The response rate for spam of the future must be low or everyone would be doing it. If it's low enough it won't pay for spammers to send it and we won't have to work too hard on filtering it.Now for the really shocking news: during that same one month period I got three false positives.In a way it's a relief to get some false positives. When I wrote A Plan for Spam'' I hadn't had any and I didn't know what they'd be like. Now that I've had a few I'm relieved to find they're not as bad as I feared. False positives yielded by statistical filters turn out to be mails that sound a lot like spam and these tend to be the ones you would least mind missing 9 .Two of the false positives were newsletters from companies I've bought things from. I never asked to receive them so arguably they were spams but I count them as false positives because I hadn't been deleting them as spams before. The reason the filters caught them was that both companies in January switched to commercial email senders instead of sending the mails from their own servers and both the headers and the bodies became much spammier.The third false positive was a bad one though. It was from someone in Egypt and written in all uppercase. This was a direct result of making tokens case sensitive the Plan for Spam filter wouldn't have caught it.It's hard to say what the overall false positive rate is because we're up in the noise statistically. Anyone who has worked on filters (at least effective filters) will be aware of this problem. With some emails it's hard to say whether they're spam or not and these are the ones you end up looking at when you get filters really tight. For example so far the filter has caught two emails that were sent to my address because of a typo and one sent to me in the belief that I was someone else. Arguably these are neither my spam nor my nonspam mail.Another false positive was from a vice president at Virtumundo. I wrote to them pretending to be a customer and since the reply came back through Virtumundo's mail servers it had the most incriminating headers imaginable. Arguably this isn't a real false positive either but a sort of Heisenberg uncertainty effect: I only got it because I was writing about spam filtering.Not counting these I've had a total of five false positives so far out of about 7740 legitimate emails a rate of .06 . The other two were a notice that something I bought was back ordered and a party reminder from Evite.I don't think this number can be trusted partly because the sample is so small and partly because I think I can fix the filter not to catch some of these.False positives seem to me a different kind of error from false negatives. Filtering rate is a measure of performance. False positives I consider more like bugs. I approach improving the filtering rate as optimization and decreasing false positives as debugging.So these five false positives are my bug list. For example the mail from Egypt got nailed because the uppercase text made it look to the filter like a Nigerian spam. This really is kind of a bug. As with html the email being all uppercase is really conceptually one feature not one for each word. I need to handle case in a more sophisticated way.So what to make of this .06 Not much I think. You could treat it as an upper bound bearing in mind the small sample size. But at this stage it is more a measure of the bugs in my implementation than some intrinsic false positive rate of Bayesian filtering.FutureWhat next Filtering is an optimization problem and the key to optimization is profiling. Don't try to guess where your code is slow because you'll guess wrong. Look at where your code is slow and fix that. In filtering this translates to: look at the spams you miss and figure out what you could have done to catch them.For example spammers are now working aggressively to evade filters and one of the things they're doing is breaking up and misspelling words to prevent filters from recognizing them. But working on this is not my first priority because I still have no trouble catching these spams 10 .There are two kinds of spams I currently do have trouble with. One is the type that pretends to be an email from a woman inviting you to go chat with her or see her profile on a dating site. These get through because they're the one type of sales pitch you can make without using sales talk. They use the same vocabulary as ordinary email.The other kind of spams I have trouble filtering are those from companies in e.g. Bulgaria offering contract programming services. These get through because I'm a programmer too and the spams are full of the same words as my real mail.I'll probably focus on the personal ad type first. I think if I look closer I'll be able to find statistical differences between these and my real mail. The style of writing is certainly different though it may take multiword filtering to catch that. Also I notice they tend to repeat the url and someone including a url in a legitimate mail wouldn't do that 11 .The outsourcing type are going to be hard to catch. Even if you sent a crawler to the site you wouldn't find a smoking statistical gun. Maybe the only answer is a central list of domains advertised in spams 12 . But there can't be that many of this type of mail. If the only spams left were unsolicited offers of contract programming services from Bulgaria we could all probably move on to working on something else.Will statistical filtering actually get us to that point I don't know. Right now for me personally spam is not a problem. But spammers haven't yet made a serious effort to spoof statistical filters. What will happen when they do I'm not optimistic about filters that work at the network level 13 . When there is a static obstacle worth getting past spammers are pretty efficient at getting past it. There is already a company called Assurance Systems that will run your mail through Spamassassin and tell you whether it will get filtered out.Network level filters won't be completely useless. They may be enough to kill all the "opt in" spam meaning spam from companies like Virtumundo and Equalamail who claim that they're really running opt in lists. You can filter those based just on the headers no matter what they say in the body. But anyone willing to falsify headers or use open relays presumably including most porn spammers should be able to get some message past network level filters if they want to. (By no means the message they'd like to send though which is something.)The kind of filters I'm optimistic about are ones that calculate probabilities based on each individual user's mail. These can be much more effective not only in avoiding false positives but in filtering too: for example finding the recipient's email address base 64 encoded anywhere in a message is a very good spam indicator.But the real advantage of individual filters is that they'll all be different. If everyone's filters have different probabilities it will make the spammers' optimization loop what programmers would call their edit compile test cycle appallingly slow. Instead of just tweaking a spam till it gets through a copy of some filter they have on their desktop they'll have to do a test mailing for each tweak. It would be like programming in a language without an interactive toplevel and I wouldn't wish that on anyone.Notes 1 Paul Graham. A Plan for Spam.'' August 2002. http: paulgraham.com spam.html.Probabilities in this algorithm are calculated using a degenerate case of Bayes' Rule. There are two simplifying assumptions: that the probabilities of features (i.e. words) are independent and that we know nothing about the prior probability of an email being spam.The first assumption is widespread in text classification. Algorithms that use it are called naive Bayesian.''The second assumption I made because the proportion of spam in my incoming mail fluctuated so much from day to day (indeed from hour to hour) that the overall prior ratio seemed worthless as a predictor. If you assume that P(spam) and P(nonspam) are both .5 they cancel out and you can remove them from the formula.If you were doing Bayesian filtering in a situation where the ratio of spam to nonspam was consistently very high or (especially) very low you could probably improve filter performance by incorporating prior probabilities. To do this right you'd have to track ratios by time of day because spam and legitimate mail volume both have distinct daily patterns. 2 Patrick Pantel and Dekang Lin. SpamCop A Spam Classification Organization Program.'' Proceedings of AAAI 98 Workshop on Learning for Text Categorization. 3 Mehran Sahami Susan Dumais David Heckerman and Eric Horvitz. A Bayesian Approach to Filtering Junk E Mail.'' Proceedings of AAAI 98 Workshop on Learning for Text Categorization. 4 At the time I had zero false positives out of about 4 000 legitimate emails. If the next legitimate email was a false positive this would give us .03 . These false positive rates are untrustworthy as I explain later. I quote a number here only to emphasize that whatever the false positive rate is it is less than 1.16 . 5 Bill Yerazunis. Sparse Binary Polynomial Hash Message Filtering and The CRM114 Discriminator.'' Proceedings of 2003 Spam Conference. 6 In A Plan for Spam'' I used thresholds of .99 and .01. It seems justifiable to use thresholds proportionate to the size of the corpora. Since I now have on the order of 10 000 of each type of mail I use .9999 and .0001. 7 There is a flaw here I should probably fix. Currently when Subject foo'' degenerates to just foo'' what that means is you're getting the stats for occurrences of foo'' in the body or header lines other than those I mark. What I should do is keep track of statistics for foo'' overall as well as specific versions and degenerate from Subject foo'' not to foo'' but to Anywhere foo''. Ditto for case: I should degenerate from uppercase to any case not lowercase.It would probably be a win to do this with prices too e.g. to degenerate from 129.99'' to 9.99'' .99'' and ''.You could also degenerate from words to their stems but this would probably only improve filtering rates early on when you had small corpora. 8 Steven Hauser. Statistical Spam Filter Works for Me.'' http: www.sofbot.com. 9 False positives are not all equal and we should remember this when comparing techniques for stopping spam. Whereas many of the false positives caused by filters will be near spams that you wouldn't mind missing false positives caused by blacklists for example will be just mail from people who chose the wrong ISP. In both cases you catch mail that's near spam but for blacklists nearness is physical and for filters it's textual. 10 If spammers get good enough at obscuring tokens for this to be a problem we can respond by simply removing whitespace periods commas etc. and using a dictionary to pick the words out of the resulting sequence. And of course finding words this way that weren't visible in the original text would in itself be evidence of spam.Picking out the words won't be trivial. It will require more than just reconstructing word boundaries spammers both add ( xHot nPorn cSite'') and omit ( P rn'') letters. Vision research may be useful here since human vision is the limit that such tricks will approach. 11 In general spams are more repetitive than regular email. They want to pound that message home. I currently don't allow duplicates in the top 15 tokens because you could get a false positive if the sender happens to use some bad word multiple times. (In my current filter dick'' has a spam probabilty of .9999 but it's also a name.) It seems we should at least notice duplication though so I may try allowing up to two of each token as Brian Burton does in SpamProbe. 12 This is what approaches like Brightmail's will degenerate into once spammers are pushed into using mad lib techniques to generate everything else in the message. 13 It's sometimes argued that we should be working on filtering at the network level because it is more efficient. What people usually mean when they say this is: we currently filter at the network level and we don't want to start over from scratch. But you can't dictate the problem to fit your solution.Historically scarce resource arguments have been the losing side in debates about software design. People only tend to use them to justify choices (inaction in particular) made for other reasons.Thanks to Sarah Harlin Trevor Blackwell and Dan Giffin for reading drafts of this paper and to Dan again for most of the infrastructure that this filter runs on.Related:
(This essay is derived from an invited talk at ICFP 2004.)I had a front row seat for the Internet Bubble because I worked at Yahoo during 1998 and 1999. One day when the stock was trading around 200 I sat down and calculated what I thought the price should be. The answer I got was 12. I went to the next cubicle and told my friend Trevor. "Twelve " he said. He tried to sound indignant but he didn't quite manage it. He knew as well as I did that our valuation was crazy.Yahoo was a special case. It was not just our price to earnings ratio that was bogus. Half our earnings were too. Not in the Enron way of course. The finance guys seemed scrupulous about reporting earnings. What made our earnings bogus was that Yahoo was in effect the center of a Ponzi scheme. Investors looked at Yahoo's earnings and said to themselves here is proof that Internet companies can make money. So they invested in new startups that promised to be the next Yahoo. And as soon as these startups got the money what did they do with it Buy millions of dollars worth of advertising on Yahoo to promote their brand. Result: a capital investment in a startup this quarter shows up as Yahoo earnings next quarter mdash stimulating another round of investments in startups.As in a Ponzi scheme what seemed to be the returns of this system were simply the latest round of investments in it. What made it not a Ponzi scheme was that it was unintentional. At least I think it was. The venture capital business is pretty incestuous and there were presumably people in a position if not to create this situation to realize what was happening and to milk it.A year later the game was up. Starting in January 2000 Yahoo's stock price began to crash ultimately losing 95 of its value.Notice though that even with all the fat trimmed off its market cap Yahoo was still worth a lot. Even at the morning after valuations of March and April 2001 the people at Yahoo had managed to create a company worth about 8 billion in just six years.The fact is despite all the nonsense we heard during the Bubble about the "new economy " there was a core of truth. You need that to get a really big bubble: you need to have something solid at the center so that even smart people are sucked in. (Isaac Newton and Jonathan Swift both lost money in the South Sea Bubble of 1720.)Now the pendulum has swung the other way. Now anything that became fashionable during the Bubble is ipso facto unfashionable. But that's a mistake mdash an even bigger mistake than believing what everyone was saying in 1999. Over the long term what the Bubble got right will be more important than what it got wrong.1. Retail VCAfter the excesses of the Bubble it's now considered dubious to take companies public before they have earnings. But there is nothing intrinsically wrong with that idea. Taking a company public at an early stage is simply retail VC: instead of going to venture capital firms for the last round of funding you go to the public markets.By the end of the Bubble companies going public with no earnings were being derided as "concept stocks " as if it were inherently stupid to invest in them. But investing in concepts isn't stupid it's what VCs do and the best of them are far from stupid.The stock of a company that doesn't yet have earnings is worth something. It may take a while for the market to learn how to value such companies just as it had to learn to value common stocks in the early 20th century. But markets are good at solving that kind of problem. I wouldn't be surprised if the market ultimately did a better job than VCs do now.Going public early will not be the right plan for every company. And it can of course be disruptive mdash by distracting the management or by making the early employees suddenly rich. But just as the market will learn how to value startups startups will learn how to minimize the damage of going public.2. The InternetThe Internet genuinely is a big deal. That was one reason even smart people were fooled by the Bubble. Obviously it was going to have a huge effect. Enough of an effect to triple the value of Nasdaq companies in two years No as it turned out. But it was hard to say for certain at the time. 1 The same thing happened during the Mississippi and South Sea Bubbles. What drove them was the invention of organized public finance (the South Sea Company despite its name was really a competitor of the Bank of England). And that did turn out to be a big deal in the long run.Recognizing an important trend turns out to be easier than figuring out how to profit from it. The mistake investors always seem to make is to take the trend too literally. Since the Internet was the big new thing investors supposed that the more Internettish the company the better. Hence such parodies as Pets.Com.In fact most of the money to be made from big trends is made indirectly. It was not the railroads themselves that made the most money during the railroad boom but the companies on either side like Carnegie's steelworks which made the rails and Standard Oil which used railroads to get oil to the East Coast where it could be shipped to Europe.I think the Internet will have great effects and that what we've seen so far is nothing compared to what's coming. But most of the winners will only indirectly be Internet companies for every Google there will be ten JetBlues.3. ChoicesWhy will the Internet have great effects The general argument is that new forms of communication always do. They happen rarely (till industrial times there were just speech writing and printing) but when they do they always cause a big splash.The specific argument or one of them is the Internet gives us more choices. In the "old" economy the high cost of presenting information to people meant they had only a narrow range of options to choose from. The tiny expensive pipeline to consumers was tellingly named "the channel." Control the channel and you could feed them what you wanted on your terms. And it was not just big corporations that depended on this principle. So in their way did labor unions the traditional news media and the art and literary establishments. Winning depended not on doing good work but on gaining control of some bottleneck.There are signs that this is changing. Google has over 82 million unique users a month and annual revenues of about three billion dollars. 2 And yet have you ever seen a Google ad Something is going on here.Admittedly Google is an extreme case. It's very easy for people to switch to a new search engine. It costs little effort and no money to try a new one and it's easy to see if the results are better. And so Google doesn't have to advertise. In a business like theirs being the best is enough.The exciting thing about the Internet is that it's shifting everything in that direction. The hard part if you want to win by making the best stuff is the beginning. Eventually everyone will learn by word of mouth that you're the best but how do you survive to that point And it is in this crucial stage that the Internet has the most effect. First the Internet lets anyone find you at almost zero cost. Second it dramatically speeds up the rate at which reputation spreads by word of mouth. Together these mean that in many fields the rule will be: Build it and they will come. Make something great and put it online. That is a big change from the recipe for winning in the past century.4. YouthThe aspect of the Internet Bubble that the press seemed most taken with was the youth of some of the startup founders. This too is a trend that will last. There is a huge standard deviation among 26 year olds. Some are fit only for entry level jobs but others are ready to rule the world if they can find someone to handle the paperwork for them.A 26 year old may not be very good at managing people or dealing with the SEC. Those require experience. But those are also commodities which can be handed off to some lieutenant. The most important quality in a CEO is his vision for the company's future. What will they build next And in that department there are 26 year olds who can compete with anyone.In 1970 a company president meant someone in his fifties at least. If he had technologists working for him they were treated like a racing stable: prized but not powerful. But as technology has grown more important the power of nerds has grown to reflect it. Now it's not enough for a CEO to have someone smart he can ask about technical matters. Increasingly he has to be that person himself.As always business has clung to old forms. VCs still seem to want to install a legitimate looking talking head as the CEO. But increasingly the founders of the company are the real powers and the grey headed man installed by the VCs more like a music group's manager than a general.5. InformalityIn New York the Bubble had dramatic consequences: suits went out of fashion. They made one seem old. So in 1998 powerful New York types were suddenly wearing open necked shirts and khakis and oval wire rimmed glasses just like guys in Santa Clara.The pendulum has swung back a bit driven in part by a panicked reaction by the clothing industry. But I'm betting on the open necked shirts. And this is not as frivolous a question as it might seem. Clothes are important as all nerds can sense though they may not realize it consciously.If you're a nerd you can understand how important clothes are by asking yourself how you'd feel about a company that made you wear a suit and tie to work. The idea sounds horrible doesn't it In fact horrible far out of proportion to the mere discomfort of wearing such clothes. A company that made programmers wear suits would have something deeply wrong with it.And what would be wrong would be that how one presented oneself counted more than the quality of one's ideas. That's the problem with formality. Dressing up is not so much bad in itself. The problem is the receptor it binds to: dressing up is inevitably a substitute for good ideas. It is no coincidence that technically inept business types are known as "suits."Nerds don't just happen to dress informally. They do it too consistently. Consciously or not they dress informally as a prophylactic measure against stupidity.6. NerdsClothing is only the most visible battleground in the war against formality. Nerds tend to eschew formality of any sort. They're not impressed by one's job title for example or any of the other appurtenances of authority.Indeed that's practically the definition of a nerd. I found myself talking recently to someone from Hollywood who was planning a show about nerds. I thought it would be useful if I explained what a nerd was. What I came up with was: someone who doesn't expend any effort on marketing himself.A nerd in other words is someone who concentrates on substance. So what's the connection between nerds and technology Roughly that you can't fool mother nature. In technical matters you have to get the right answers. If your software miscalculates the path of a space probe you can't finesse your way out of trouble by saying that your code is patriotic or avant garde or any of the other dodges people use in nontechnical fields.And as technology becomes increasingly important in the economy nerd culture is rising with it. Nerds are already a lot cooler than they were when I was a kid. When I was in college in the mid 1980s "nerd" was still an insult. People who majored in computer science generally tried to conceal it. Now women ask me where they can meet nerds. (The answer that springs to mind is "Usenix " but that would be like drinking from a firehose.)I have no illusions about why nerd culture is becoming more accepted. It's not because people are realizing that substance is more important than marketing. It's because the nerds are getting rich. But that is not going to change.7. OptionsWhat makes the nerds rich usually is stock options. Now there are moves afoot to make it harder for companies to grant options. To the extent there's some genuine accounting abuse going on by all means correct it. But don't kill the golden goose. Equity is the fuel that drives technical innovation.Options are a good idea because (a) they're fair and (b) they work. Someone who goes to work for a company is (one hopes) adding to its value and it's only fair to give them a share of it. And as a purely practical measure people work a lot harder when they have options. I've seen that first hand.The fact that a few crooks during the Bubble robbed their companies by granting themselves options doesn't mean options are a bad idea. During the railroad boom some executives enriched themselves by selling watered stock mdash by issuing more shares than they said were outstanding. But that doesn't make common stock a bad idea. Crooks just use whatever means are available.If there is a problem with options it's that they reward slightly the wrong thing. Not surprisingly people do what you pay them to. If you pay them by the hour they'll work a lot of hours. If you pay them by the volume of work done they'll get a lot of work done (but only as you defined work). And if you pay them to raise the stock price which is what options amount to they'll raise the stock price.But that's not quite what you want. What you want is to increase the actual value of the company not its market cap. Over time the two inevitably meet but not always as quickly as options vest. Which means options tempt employees if only unconsciously to "pump and dump" mdash to do things that will make the company seem valuable. I found that when I was at Yahoo I couldn't help thinking "how will this sound to investors " when I should have been thinking "is this a good idea "So maybe the standard option deal needs to be tweaked slightly. Maybe options should be replaced with something tied more directly to earnings. It's still early days.8. StartupsWhat made the options valuable for the most part is that they were options on the stock of startups. Startups were not of course a creation of the Bubble but they were more visible during the Bubble than ever before.One thing most people did learn about for the first time during the Bubble was the startup created with the intention of selling it. Originally a startup meant a small company that hoped to grow into a big one. But increasingly startups are evolving into a vehicle for developing technology on spec.As I wrote in Hackers Painters employees seem to be most productive when they're paid in proportion to the wealth they generate. And the advantage of a startup mdash indeed almost its raison d'etre mdash is that it offers something otherwise impossible to obtain: a way of measuring that.In many businesses it just makes more sense for companies to get technology by buying startups rather than developing it in house. You pay more but there is less risk and risk is what big companies don't want. It makes the guys developing the technology more accountable because they only get paid if they build the winner. And you end up with better technology created faster because things are made in the innovative atmosphere of startups instead of the bureaucratic atmosphere of big companies.Our startup Viaweb was built to be sold. We were open with investors about that from the start. And we were careful to create something that could slot easily into a larger company. That is the pattern for the future.9. CaliforniaThe Bubble was a California phenomenon. When I showed up in Silicon Valley in 1998 I felt like an immigrant from Eastern Europe arriving in America in 1900. Everyone was so cheerful and healthy and rich. It seemed a new and improved world.The press ever eager to exaggerate small trends now gives one the impression that Silicon Valley is a ghost town. Not at all. When I drive down 101 from the airport I still feel a buzz of energy as if there were a giant transformer nearby. Real estate is still more expensive than just about anywhere else in the country. The people still look healthy and the weather is still fabulous. The future is there. (I say "there" because I moved back to the East Coast after Yahoo. I still wonder if this was a smart idea.)What makes the Bay Area superior is the attitude of the people. I notice that when I come home to Boston. The first thing I see when I walk out of the airline terminal is the fat grumpy guy in charge of the taxi line. I brace myself for rudeness: remember you're back on the East Coast now.The atmosphere varies from city to city and fragile organisms like startups are exceedingly sensitive to such variation. If it hadn't already been hijacked as a new euphemism for liberal the word to describe the atmosphere in the Bay Area would be "progressive." People there are trying to build the future. Boston has MIT and Harvard but it also has a lot of truculent unionized employees like the police who recently held the Democratic National Convention for ransom and a lot of people trying to be Thurston Howell. Two sides of an obsolete coin.Silicon Valley may not be the next Paris or London but it is at least the next Chicago. For the next fifty years that's where new wealth will come from.10. ProductivityDuring the Bubble optimistic analysts used to justify high price to earnings ratios by saying that technology was going to increase productivity dramatically. They were wrong about the specific companies but not so wrong about the underlying principle. I think one of the big trends we'll see in the coming century is a huge increase in productivity.Or more precisely a huge increase in variation in productivity. Technology is a lever. It doesn't add it multiplies. If the present range of productivity is 0 to 100 introducing a multiple of 10 increases the range from 0 to 1000.One upshot of which is that the companies of the future may be surprisingly small. I sometimes daydream about how big you could grow a company (in revenues) without ever having more than ten people. What would happen if you outsourced everything except product development If you tried this experiment I think you'd be surprised at how far you could get. As Fred Brooks pointed out small groups are intrinsically more productive because the internal friction in a group grows as the square of its size.Till quite recently running a major company meant managing an army of workers. Our standards about how many employees a company should have are still influenced by old patterns. Startups are perforce small because they can't afford to hire a lot of people. But I think it's a big mistake for companies to loosen their belts as revenues increase. The question is not whether you can afford the extra salaries. Can you afford the loss in productivity that comes from making the company bigger The prospect of technological leverage will of course raise the specter of unemployment. I'm surprised people still worry about this. After centuries of supposedly job killing innovations the number of jobs is within ten percent of the number of people who want them. This can't be a coincidence. There must be some kind of balancing mechanism.What's NewWhen one looks over these trends is there any overall theme There does seem to be: that in the coming century good ideas will count for more. That 26 year olds with good ideas will increasingly have an edge over 50 year olds with powerful connections. That doing good work will matter more than dressing up mdash or advertising which is the same thing for companies. That people will be rewarded a bit more in proportion to the value of what they create.If so this is good news indeed. Good ideas always tend to win eventually. The problem is it can take a very long time. It took decades for relativity to be accepted and the greater part of a century to establish that central planning didn't work. So even a small increase in the rate at which good ideas win would be a momentous change mdash big enough probably to justify a name like the "new economy."Notes 1 Actually it's hard to say now. As Jeremy Siegel points out if the value of a stock is its future earnings you can't tell if it was overvalued till you see what the earnings turn out to be. While certain famous Internet stocks were almost certainly overvalued in 1999 it is still hard to say for sure whether e.g. the Nasdaq index was.Siegel Jeremy J. "What Is an Asset Price Bubble An Operational Definition." European Financial Management 9:1 2003. 2 The number of users comes from a 6 03 Nielsen study quoted on Google's site. (You'd think they'd have something more recent.) The revenue estimate is based on revenues of 1.35 billion for the first half of 2004 as reported in their IPO filing.Thanks to Chris Anderson Trevor Blackwell Sarah Harlin Jessica Livingston and Robert Morris for reading drafts of this.
(This has been rewritten the original version was wrong about the 1968 election.) November 2004 corrected June 2006Occam's razor says we should prefer the simpler of two explanations. I begin by reminding readers of this principle because I'm about to propose a theory that will offend both liberals and conservatives. But Occam's razor means in effect that if you want to disagree with it you have a hell of a coincidence to explain.Theory: In US presidential elections the more charismatic candidate wins.People who write about politics whether on the left or the right have a consistent bias: they take politics seriously. When one candidate beats another they look for political explanations. The country is shifting to the left or the right. And that sort of shift can certainly be the result of a presidential election which makes it easy to believe it was the cause.But when I think about why I voted for Clinton over the first George Bush it wasn't because I was shifting to the left. Clinton just seemed more dynamic. He seemed to want the job more. Bush seemed old and tired. I suspect it was the same for a lot of voters.Clinton didn't represent any national shift leftward. 1 He was just more charismatic than George Bush or (God help us) Bob Dole. In 2000 we practically got a controlled experiment to prove it: Gore had Clinton's policies but not his charisma and he suffered proportionally. 2 Same story in 2004. Kerry was smarter and more articulate than Bush but rather a stiff. And Kerry lost.As I looked further back I kept finding the same pattern. Pundits said Carter beat Ford because the country distrusted the Republicans after Watergate. And yet it also happened that Carter was famous for his big grin and folksy ways and Ford for being a boring klutz. Four years later pundits said the country had lurched to the right. But Reagan a former actor also happened to be even more charismatic than Carter (whose grin was somewhat less cheery after four stressful years in office). In 1984 the charisma gap between Reagan and Mondale was like that between Clinton and Dole with similar results. The first George Bush managed to win in 1988 though he would later be vanquished by one of the most charismatic presidents ever because in 1988 he was up against the notoriously uncharismatic Michael Dukakis.These are the elections I remember personally but apparently the same pattern played out in 1964 and 1972. The most recent counterexample appears to be 1968 when Nixon beat the more charismatic Hubert Humphrey. But when you examine that election it tends to support the charisma theory more than contradict it. As Joe McGinnis recounts in his famous book The Selling of the President 1968 Nixon knew he had less charisma than Humphrey and thus simply refused to debate him on TV. He knew he couldn't afford to let the two of them be seen side by side.Now a candidate probably couldn't get away with refusing to debate. But in 1968 the custom of televised debates was still evolving. In effect Nixon won in 1968 because voters were never allowed to see the real Nixon. All they saw were carefully scripted campaign spots.Oddly enough the most recent true counterexample is probably 1960. Though this election is usually given as an example of the power of TV Kennedy apparently would not have won without fraud by party machines in Illinois and Texas. But TV was still young in 1960 only 87 of households had it. 3 Undoubtedly TV helped Kennedy so historians are correct in regarding this election as a watershed. TV required a new kind of candidate. There would be no more Calvin Coolidges.The charisma theory may also explain why Democrats tend to lose presidential elections. The core of the Democrats' ideology seems to be a belief in government. Perhaps this tends to attract people who are earnest but dull. Dukakis Gore and Kerry were so similar in that respect that they might have been brothers. Good thing for the Democrats that their screen lets through an occasional Clinton even if some scandal results. 4 One would like to believe elections are won and lost on issues if only fake ones like Willie Horton. And yet if they are we have a remarkable coincidence to explain. In every presidential election since TV became widespread the apparently more charismatic candidate has won. Surprising isn't it that voters' opinions on the issues have lined up with charisma for 11 elections in a row The political commentators who come up with shifts to the left or right in their morning after analyses are like the financial reporters stuck writing stories day after day about the random fluctuations of the stock market. Day ends market closes up or down reporter looks for good or bad news respectively and writes that the market was up on news of Intel's earnings or down on fears of instability in the Middle East. Suppose we could somehow feed these reporters false information about market closes but give them all the other news intact. Does anyone believe they would notice the anomaly and not simply write that stocks were up (or down) on whatever good (or bad) news there was that day That they would say hey wait a minute how can stocks be up with all this unrest in the Middle East I'm not saying that issues don't matter to voters. Of course they do. But the major parties know so well which issues matter how much to how many voters and adjust their message so precisely in response that they tend to split the difference on the issues leaving the election to be decided by the one factor they can't control: charisma.If the Democrats had been running a candidate as charismatic as Clinton in the 2004 election he'd have won. And we'd be reading that the election was a referendum on the war in Iraq instead of that the Democrats are out of touch with evangelical Christians in middle America.During the 1992 election the Clinton campaign staff had a big sign in their office saying "It's the economy stupid." Perhaps it was even simpler than they thought.PostscriptOpinions seem to be divided about the charisma theory. Some say it's impossible others say it's obvious. This seems a good sign. Perhaps it's in the sweet spot midway between.As for it being impossible I reply: here's the data here's the theory theory explains data 100 . To a scientist at least that means it deserves attention however implausible it seems.You can't believe voters are so superficial that they just choose the most charismatic guy My theory doesn't require that. I'm not proposing that charisma is the only factor just that it's the only one left after the efforts of the two parties cancel one another out.As for the theory being obvious as far as I know no one has proposed it before. Election forecasters are proud when they can achieve the same results with much more complicated models.Finally to the people who say that the theory is probably true but rather depressing: it's not so bad as it seems. The phenomenon is like a pricing anomaly once people realize it's there it will disappear. Once both parties realize it's a waste of time to nominate uncharismatic candidates they'll tend to nominate only the most charismatic ones. And if the candidates are equally charismatic charisma will cancel out and elections will be decided on issues as political commentators like to think they are now.Notes 1 As Clinton himself discovered to his surprise when in one of his first acts as president he tried to shift the military leftward. After a bruising fight he escaped with a face saving compromise. 2 True Gore won the popular vote. But politicians know the electoral vote decides the election so that's what they campaign for. If Bush had been campaigning for the popular vote he would presumably have got more of it. (Thanks to judgmentalist for this point.) 3 Source: Nielsen Media Research. Of the remaining 13 11 didn't have TV because they couldn't afford it. I'd argue that the missing 11 were probably also the 11 most susceptible to charisma. 4 One implication of this theory is that parties shouldn't be too quick to reject candidates with skeletons in their closets. Charismatic candidates will tend to have more skeletons than squeaky clean dullards but in practice that doesn't seem to lose elections. The current Bush for example probably did more drugs in his twenties than any preceding president and yet managed to get elected with a base of evangelical Christians. All you have to do is say you've reformed and stonewall about the details.Thanks to Trevor Blackwell Maria Daniels Jessica Livingston Jackie McDonough and Robert Morris for reading drafts of this and to Eric Raymond for pointing out that I was wrong about 1968.
 "In Boston they ask How much does he know In New York How much is he worth In Philadelphia Who were his parents " Mark Twain 
A few weeks ago I had a thought so heretical that it really surprised me. It may not matter all that much where you go to college.For me as for a lot of middle class kids getting into a good college was more or less the meaning of life when I was growing up. What was I A student. To do that well meant to get good grades. Why did one have to get good grades To get into a good college. And why did one want to do that There seemed to be several reasons: you'd learn more get better jobs make more money. But it didn't matter exactly what the benefits would be. College was a bottleneck through which all your future prospects passed everything would be better if you went to a better college.A few weeks ago I realized that somewhere along the line I had stopped believing that.What first set me thinking about this was the new trend of worrying obsessively about what kindergarten your kids go to. It seemed to me this couldn't possibly matter. Either it won't help your kid get into Harvard or if it does getting into Harvard won't mean much anymore. And then I thought: how much does it mean even now It turns out I have a lot of data about that. My three partners and I run a seed stage investment firm called Y Combinator. We invest when the company is just a couple guys and an idea. The idea doesn't matter much it will change anyway. Most of our decision is based on the founders. The average founder is three years out of college. Many have just graduated a few are still in school. So we're in much the same position as a graduate program or a company hiring people right out of college. Except our choices are immediately and visibly tested. There are two possible outcomes for a startup: success or failure mdash and usually you know within a year which it will be.The test applied to a startup is among the purest of real world tests. A startup succeeds or fails depending almost entirely on the efforts of the founders. Success is decided by the market: you only succeed if users like what you've built. And users don't care where you went to college.As well as having precisely measurable results we have a lot of them. Instead of doing a small number of large deals like a traditional venture capital fund we do a large number of small ones. We currently fund about 40 companies a year selected from about 900 applications representing a total of about 2000 people. 1 Between the volume of people we judge and the rapid unequivocal test that's applied to our choices Y Combinator has been an unprecedented opportunity for learning how to pick winners. One of the most surprising things we've learned is how little it matters where people went to college.I thought I'd already been cured of caring about that. There's nothing like going to grad school at Harvard to cure you of any illusions you might have about the average Harvard undergrad. And yet Y Combinator showed us we were still overestimating people who'd been to elite colleges. We'd interview people from MIT or Harvard or Stanford and sometimes find ourselves thinking: they must be smarter than they seem. It took us a few iterations to learn to trust our senses.Practically everyone thinks that someone who went to MIT or Harvard or Stanford must be smart. Even people who hate you for it believe it.But when you think about what it means to have gone to an elite college how could this be true We're talking about a decision made by admissions officers mdash basically HR people mdash based on a cursory examination of a huge pile of depressingly similar applications submitted by seventeen year olds. And what do they have to go on An easily gamed standardized test a short essay telling you what the kid thinks you want to hear an interview with a random alum a high school record that's largely an index of obedience. Who would rely on such a test And yet a lot of companies do. A lot of companies are very much influenced by where applicants went to college. How could they be I think I know the answer to that.There used to be a saying in the corporate world: "No one ever got fired for buying IBM." You no longer hear this about IBM specifically but the idea is very much alive there is a whole category of "enterprise" software companies that exist to take advantage of it. People buying technology for large organizations don't care if they pay a fortune for mediocre software. It's not their money. They just want to buy from a supplier who seems safe mdash a company with an established name confident salesmen impressive offices and software that conforms to all the current fashions. Not necessarily a company that will deliver so much as one that if they do let you down will still seem to have been a prudent choice. So companies have evolved to fill that niche.A recruiter at a big company is in much the same position as someone buying technology for one. If someone went to Stanford and is not obviously insane they're probably a safe bet. And a safe bet is enough. No one ever measures recruiters by the later performance of people they turn down. 2 I'm not saying of course that elite colleges have evolved to prey upon the weaknesses of large organizations the way enterprise software companies have. But they work as if they had. In addition to the power of the brand name graduates of elite colleges have two critical qualities that plug right into the way large organizations work. They're good at doing what they're asked since that's what it takes to please the adults who judge you at seventeen. And having been to an elite college makes them more confident.Back in the days when people might spend their whole career at one big company these qualities must have been very valuable. Graduates of elite colleges would have been capable yet amenable to authority. And since individual performance is so hard to measure in large organizations their own confidence would have been the starting point for their reputation.Things are very different in the new world of startups. We couldn't save someone from the market's judgement even if we wanted to. And being charming and confident counts for nothing with users. All users care about is whether you make something they like. If you don't you're dead.Knowing that test is coming makes us work a lot harder to get the right answers than anyone would if they were merely hiring people. We can't afford to have any illusions about the predictors of success. And what we've found is that the variation between schools is so much smaller than the variation between individuals that it's negligible by comparison. We can learn more about someone in the first minute of talking to them than by knowing where they went to school.It seems obvious when you put it that way. Look at the individual not where they went to college. But that's a weaker statement than the idea I began with that it doesn't matter much where a given individual goes to college. Don't you learn things at the best schools that you wouldn't learn at lesser places Apparently not. Obviously you can't prove this in the case of a single individual but you can tell from aggregate evidence: you can't without asking them distinguish people who went to one school from those who went to another three times as far down the US News list. 3 Try it and see.How can this be Because how much you learn in college depends a lot more on you than the college. A determined party animal can get through the best school without learning anything. And someone with a real thirst for knowledge will be able to find a few smart people to learn from at a school that isn't prestigious at all. The other students are the biggest advantage of going to an elite college you learn more from them than the professors. But you should be able to reproduce this at most colleges if you make a conscious effort to find smart friends. At most colleges you can find at least a handful of other smart students and most people have only a handful of close friends in college anyway. 4 The odds of finding smart professors are even better. The curve for faculty is a lot flatter than for students especially in math and the hard sciences you have to go pretty far down the list of colleges before you stop finding smart professors in the math department.So it's not surprising that we've found the relative prestige of different colleges useless in judging individuals. There's a lot of randomness in how colleges select people and what they learn there depends much more on them than the college. Between these two sources of variation the college someone went to doesn't mean a lot. It is to some degree a predictor of ability but so weak that we regard it mainly as a source of error and try consciously to ignore it.I doubt what we've discovered is an anomaly specific to startups. Probably people have always overestimated the importance of where one goes to college. We're just finally able to measure it.The unfortunate thing is not just that people are judged by such a superficial test but that so many judge themselves by it. A lot of people probably the majority of people in America have some amount of insecurity about where or whether they went to college. The tragedy of the situation is that by far the greatest liability of not having gone to the college you'd have liked is your own feeling that you're thereby lacking something. Colleges are a bit like exclusive clubs in this respect. There is only one real advantage to being a member of most exclusive clubs: you know you wouldn't be missing much if you weren't. When you're excluded you can only imagine the advantages of being an insider. But invariably they're larger in your imagination than in real life.So it is with colleges. Colleges differ but they're nothing like the stamp of destiny so many imagine them to be. People aren't what some admissions officer decides about them at seventeen. They're what they make themselves.Indeed the great advantage of not caring where people went to college is not just that you can stop judging them (and yourself) by superficial measures but that you can focus instead on what really matters. What matters is what you make of yourself. I think that's what we should tell kids. Their job isn't to get good grades so they can get into a good college but to learn and do. And not just because that's more rewarding than worldly success. That will increasingly be the route to worldly success. Notes 1 Is what we measure worth measuring I think so. You can get rich simply by being energetic and unscrupulous but getting rich from a technology startup takes some amount of brains. It is just the kind of work the upper middle class values it has about the same intellectual component as being a doctor. 2 Actually someone did once. Mitch Kapor's wife Freada was in charge of HR at Lotus in the early years. (As he is at pains to point out they did not become romantically involved till afterward.) At one point they worried Lotus was losing its startup edge and turning into a big company. So as an experiment she sent their recruiters the resumes of the first 40 employees with identifying details changed. These were the people who had made Lotus into the star it was. Not one got an interview. 3 The US News list Surely no one trusts that. Even if the statistics they consider are useful how do they decide on the relative weights The reason the US News list is meaningful is precisely because they are so intellectually dishonest in that respect. There is no external source they can use to calibrate the weighting of the statistics they use if there were we could just use that instead. What they must do is adjust the weights till the top schools are the usual suspects in about the right order. So in effect what the US News list tells us is what the editors think the top schools are which is probably not far from the conventional wisdom on the matter. The amusing thing is because some schools work hard to game the system the editors will have to keep tweaking their algorithm to get the rankings they want. 4 Possible doesn't mean easy of course. A smart student at a party school will inevitably be something of an outcast just as he or she would be in most high schools. Thanks to Trevor Blackwell Sarah Harlin Jessica Livingston Jackie McDonough Peter Norvig and Robert Morris for reading drafts of this.
About twenty years ago people noticed computers and TV were on a collision course and started to speculate about what they'd produce when they converged. We now know the answer: computers. It's clear now that even by using the word "convergence" we were giving TV too much credit. This won't be convergence so much as replacement. People may still watch things they call "TV shows " but they'll watch them mostly on computers.What decided the contest for computers Four forces three of which one could have predicted and one that would have been harder to.One predictable cause of victory is that the Internet is an open platform. Anyone can build whatever they want on it and the market picks the winners. So innovation happens at hacker speeds instead of big company speeds.The second is Moore's Law which has worked its usual magic on Internet bandwidth. 1 The third reason computers won is piracy. Users prefer it not just because it's free but because it's more convenient. Bittorrent and YouTube have already trained a new generation of viewers that the place to watch shows is on a computer screen. 2 The somewhat more surprising force was one specific type of innovation: social applications. The average teenage kid has a pretty much infinite capacity for talking to their friends. But they can't physically be with them all the time. When I was in high school the solution was the telephone. Now it's social networks multiplayer games and various messaging applications. The way you reach them all is through a computer. 3 Which means every teenage kid (a) wants a computer with an Internet connection (b) has an incentive to figure out how to use it and (c) spends countless hours in front of it.This was the most powerful force of all. This was what made everyone want computers. Nerds got computers because they liked them. Then gamers got them to play games on. But it was connecting to other people that got everyone else: that's what made even grandmas and 14 year old girls want computers. After decades of running an IV drip right into their audience people in the entertainment business had understandably come to think of them as rather passive. They thought they'd be able to dictate the way shows reached audiences. But they underestimated the force of their desire to connect with one another.Facebook killed TV. That is wildly oversimplified of course but probably as close to the truth as you can get in three words. The TV networks already seem grudgingly to see where things are going and have responded by putting their stuff grudgingly online. But they're still dragging their heels. They still seem to wish people would watch shows on TV instead just as newspapers that put their stories online still seem to wish people would wait till the next morning and read them printed on paper. They should both just face the fact that the Internet is the primary medium.They'd be in a better position if they'd done that earlier. When a new medium arises that's powerful enough to make incumbents nervous then it's probably powerful enough to win and the best thing they can do is jump in immediately.Whether they like it or not big changes are coming because the Internet dissolves the two cornerstones of broadcast media: synchronicity and locality. On the Internet you don't have to send everyone the same signal and you don't have to send it to them from a local source. People will watch what they want when they want it and group themselves according to whatever shared interest they feel most strongly. Maybe their strongest shared interest will be their physical location but I'm guessing not. Which means local TV is probably dead. It was an artifact of limitations imposed by old technology. If someone were creating an Internet based TV company from scratch now they might have some plan for shows aimed at specific regions but it wouldn't be a top priority.Synchronicity and locality are tied together. TV network affiliates care what's on at 10 because that delivers viewers for local news at 11. This connection adds more brittleness than strength however: people don't watch what's on at 10 because they want to watch the news afterward.TV networks will fight these trends because they don't have sufficient flexibility to adapt to them. They're hemmed in by local affiliates in much the same way car companies are hemmed in by dealers and unions. Inevitably the people running the networks will take the easy route and try to keep the old model running for a couple more years just as the record labels have done.A recent article in the Wall Street Journal described how TV networks were trying to add more live shows partly as a way to make viewers watch TV synchronously instead of watching recorded shows when it suited them. Instead of delivering what viewers want they're trying to force them to change their habits to suit the networks' obsolete business model. That never works unless you have a monopoly or cartel to enforce it and even then it only works temporarily.The other reason networks like live shows is that they're cheaper to produce. There they have the right idea but they haven't followed it to its conclusion. Live content can be way cheaper than networks realize and the way to take advantage of dramatic decreases in cost is to increase volume. The networks are prevented from seeing this whole line of reasoning because they still think of themselves as being in the broadcast business mdash as sending one signal to everyone. 4 Now would be a good time to start any company that competes with TV networks. That's what a lot of Internet startups are though they may not have had this as an explicit goal. People only have so many leisure hours a day and TV is premised on such long sessions (unlike Google which prides itself on sending users on their way quickly) that anything that takes up their time is competing with it. But in addition to such indirect competitors I think TV companies will increasingly face direct ones.Even in cable TV the long tail was lopped off prematurely by the threshold you had to get over to start a new channel. It will be longer on the Internet and there will be more mobility within it. In this new world the existing players will only have the advantages any big company has in its market.That will change the balance of power between the networks and the people who produce shows. The networks used to be gatekeepers. They distributed your work and sold advertising on it. Now the people who produce a show can distribute it themselves. The main value networks supply now is ad sales. Which will tend to put them in the position of service providers rather than publishers.Shows will change even more. On the Internet there's no reason to keep their current format or even the fact that they have a single format. Indeed the more interesting sort of convergence that's coming is between shows and games. But on the question of what sort of entertainment gets distributed on the Internet in 20 years I wouldn't dare to make any predictions except that things will change a lot. We'll get whatever the most imaginative people can cook up. That's why the Internet won. Notes 1 Thanks to Trevor Blackwell for this point. He adds: "I remember the eyes of phone companies gleaming in the early 90s when they talked about convergence. They thought most programming would be on demand and they would implement it and make a lot of money. It didn't work out. They assumed that their local network infrastructure would be critical to do video on demand because you couldn't possibly stream it from a few data centers over the internet. At the time (1992) the entire cross country Internet bandwidth wasn't enough for one video stream. But wide area bandwidth increased more than they expected and they were beaten by iTunes and Hulu." 2 Copyright owners tend to focus on the aspect they see of piracy which is the lost revenue. They therefore think what drives users to do it is the desire to get something for free. But iTunes shows that people will pay for stuff online if you make it easy. A significant component of piracy is simply that it offers a better user experience. 3 Or a phone that is actually a computer. I'm not making any predictions about the size of the device that will replace TV just that it will have a browser and get data via the Internet. 4 Emmett Shear writes: "I'd argue the long tail for sports may be even larger than the long tail for other kinds of content. Anyone can broadcast a high school football game that will be interesting to 10 000 people or so even if the quality of production is not so good." Thanks to Sam Altman Trevor Blackwell Nancy Cook Michael Seibel. Emmett Shear and Fred Wilson for reading drafts of this.
 "None ever wished it longer than it is." Samuel Johnson on Paradise Lost 
Corporate Development aka corp dev is the group within companies that buys other companies. If you're talking to someone from corp dev that's why whether you realize it yet or not.It's usually a mistake to talk to corp dev unless (a) you want to sell your company right now and (b) you're sufficiently likely to get an offer at an acceptable price. In practice that means startups should only talk to corp dev when they're either doing really well or really badly. If you're doing really badly meaning the company is about to die you may as well talk to them because you have nothing to lose. And if you're doing really well you can safely talk to them because you both know the price will have to be high and if they show the slightest sign of wasting your time you'll be confident enough to tell them to get lost.The danger is to companies in the middle. Particularly to young companies that are growing fast but haven't been doing it for long enough to have grown big yet. It's usually a mistake for a promising company less than a year old even to talk to corp dev.But it's a mistake founders constantly make. When someone from corp dev wants to meet the founders tell themselves they should at least find out what they want. Besides they don't want to offend Big Company by refusing to meet.Well I'll tell you what they want. They want to talk about buying you. That's what the title "corp dev" means. So before agreeing to meet with someone from corp dev ask yourselves "Do we want to sell the company right now " And if the answer is no tell them "Sorry but we're focusing on growing the company." They won't be offended. And certainly the founders of Big Company won't be offended. If anything they'll think more highly of you. You'll remind them of themselves. They didn't sell either that's why they're in a position now to buy other companies. 1 Most founders who get contacted by corp dev already know what it means. And yet even when they know what corp dev does and know they don't want to sell they take the meeting. Why do they do it The same mix of denial and wishful thinking that underlies most mistakes founders make. It's flattering to talk to someone who wants to buy you. And who knows maybe their offer will be surprisingly high. You should at least see what it is right No. If they were going to send you an offer immediately by email sure you might as well open it. But that is not how conversations with corp dev work. If you get an offer at all it will be at the end of a long and unbelievably distracting process. And if the offer is surprising it will be surprisingly low.Distractions are the thing you can least afford in a startup. And conversations with corp dev are the worst sort of distraction because as well as consuming your attention they undermine your morale. One of the tricks to surviving a grueling process is not to stop and think how tired you are. Instead you get into a sort of flow. 2 Imagine what it would do to you if at mile 20 of a marathon someone ran up beside you and said "You must feel really tired. Would you like to stop and take a rest " Conversations with corp dev are like that but worse because the suggestion of stopping gets combined in your mind with the imaginary high price you think they'll offer.And then you're really in trouble. If they can corp dev people like to turn the tables on you. They like to get you to the point where you're trying to convince them to buy instead of them trying to convince you to sell. And surprisingly often they succeed.This is a very slippery slope greased with some of the most powerful forces that can work on founders' minds and attended by an experienced professional whose full time job is to push you down it.Their tactics in pushing you down that slope are usually fairly brutal. Corp dev people's whole job is to buy companies and they don't even get to choose which. The only way their performance is measured is by how cheaply they can buy you and the more ambitious ones will stop at nothing to achieve that. For example they'll almost always start with a lowball offer just to see if you'll take it. Even if you don't a low initial offer will demoralize you and make you easier to manipulate.And that is the most innocent of their tactics. Just wait till you've agreed on a price and think you have a done deal and then they come back and say their boss has vetoed the deal and won't do it for more than half the agreed upon price. Happens all the time. If you think investors can behave badly it's nothing compared to what corp dev people can do. Even corp dev people at companies that are otherwise benevolent. I remember once complaining to a friend at Google about some nasty trick their corp dev people had pulled on a YC startup. "What happened to Don't be Evil " I asked. "I don't think corp dev got the memo " he replied. 3 The tactics you encounter in M A conversations can be like nothing you've experienced in the otherwise comparatively upstanding world of Silicon Valley. It's as if a chunk of genetic material from the old fashioned robber baron business world got incorporated into the startup world.The simplest way to protect yourself is to use the trick that John D. Rockefeller whose grandfather was an alcoholic used to protect himself from becoming one. He once told a Sunday school class Boys do you know why I never became a drunkard Because I never took the first drink. Do you want to sell your company right now Not eventually right now. If not just don't take the first meeting. They won't be offended. And you in turn will be guaranteed to be spared one of the worst experiences that can happen to a startup.If you do want to sell there's another set of techniques for doing that. But the biggest mistake founders make in dealing with corp dev is not doing a bad job of talking to them when they're ready to but talking to them before they are. So if you remember only the title of this essay you already know most of what you need to know about M A in the first year.Notes 1 I'm not saying you should never sell. I'm saying you should be clear in your own mind about whether you want to sell or not and not be led by manipulation or wishful thinking into trying to sell earlier than you otherwise would have. 2 In a startup as in most competitive sports the task at hand almost does this for you you're too busy to feel tired. But when you lose that protection e.g. at the final whistle the fatigue hits you like a wave. To talk to corp dev is to let yourself feel it mid game. 3 To be fair the apparent misdeeds of corp dev people are magnified by the fact that they function as the face of a large organization that often doesn't know its own mind. Acquirers can be surprisingly indecisive about acquisitions and their flakiness is indistinguishable from dishonesty by the time it filters down to you.Thanks to Marc Andreessen Jessica Livingston Geoff Ralston and Qasar Younis for reading drafts of this.
A few months ago I read a New York Times article on South Korean cram schools that said Admission to the right university can make or break an ambitious young South Korean. A parent added: "In our country college entrance exams determine 70 to 80 percent of a person's future." It was striking how old fashioned this sounded. And yet when I was in high school it wouldn't have seemed too far off as a description of the US. Which means things must have been changing here.The course of people's lives in the US now seems to be determined less by credentials and more by performance than it was 25 years ago. Where you go to college still matters but not like it used to.What happened Judging people by their academic credentials was in its time an advance. The practice seems to have begun in China where starting in 587 candidates for the imperial civil service had to take an exam on classical literature. 1 It was also a test of wealth because the knowledge it tested was so specialized that passing required years of expensive training. But though wealth was a necessary condition for passing it was not a sufficient one. By the standards of the rest of the world in 587 the Chinese system was very enlightened. Europeans didn't introduce formal civil service exams till the nineteenth century and even then they seem to have been influenced by the Chinese example.Before credentials government positions were obtained mainly by family influence if not outright bribery. It was a great step forward to judge people by their performance on a test. But by no means a perfect solution. When you judge people that way you tend to get cram schools mdash which they did in Ming China and nineteenth century England just as much as in present day South Korea.What cram schools are in effect is leaks in a seal. The use of credentials was an attempt to seal off the direct transmission of power between generations and cram schools represent that power finding holes in the seal. Cram schools turn wealth in one generation into credentials in the next.It's hard to beat this phenomenon because the schools adjust to suit whatever the tests measure. When the tests are narrow and predictable you get cram schools on the classic model like those that prepared candidates for Sandhurst (the British West Point) or the classes American students take now to improve their SAT scores. But as the tests get broader the schools do too. Preparing a candidate for the Chinese imperial civil service exams took years as prep school does today. But the raison d'etre of all these institutions has been the same: to beat the system. 2 History suggests that all other things being equal a society prospers in proportion to its ability to prevent parents from influencing their children's success directly. It's a fine thing for parents to help their children indirectly mdash for example by helping them to become smarter or more disciplined which then makes them more successful. The problem comes when parents use direct methods: when they are able to use their own wealth or power as a substitute for their children's qualities.Parents will tend to do this when they can. Parents will die for their kids so it's not surprising to find they'll also push their scruples to the limits for them. Especially if other parents are doing it.Sealing off this force has a double advantage. Not only does a society get "the best man for the job " but parents' ambitions are diverted from direct methods to indirect ones mdash to actually trying to raise their kids well.But we should expect it to be very hard to contain parents' efforts to obtain an unfair advantage for their kids. We're dealing with one of the most powerful forces in human nature. We shouldn't expect naive solutions to work any more than we'd expect naive solutions for keeping heroin out of a prison to work. The obvious way to solve the problem is to make credentials better. If the tests a society uses are currently hackable we can study the way people beat them and try to plug the holes. You can use the cram schools to show you where most of the holes are. They also tell you when you're succeeding in fixing them: when cram schools become less popular.A more general solution would be to push for increased transparency especially at critical social bottlenecks like college admissions. In the US this process still shows many outward signs of corruption. For example legacy admissions. The official story is that legacy status doesn't carry much weight because all it does is break ties: applicants are bucketed by ability and legacy status is only used to decide between the applicants in the bucket that straddles the cutoff. But what this means is that a university can make legacy status have as much or as little weight as they want by adjusting the size of the bucket that straddles the cutoff.By gradually chipping away at the abuse of credentials you could probably make them more airtight. But what a long fight it would be. Especially when the institutions administering the tests don't really want them to be airtight. Fortunately there's a better way to prevent the direct transmission of power between generations. Instead of trying to make credentials harder to hack we can also make them matter less.Let's think about what credentials are for. What they are functionally is a way of predicting performance. If you could measure actual performance you wouldn't need them.So why did they even evolve Why haven't we just been measuring actual performance Think about where credentialism first appeared: in selecting candidates for large organizations. Individual performance is hard to measure in large organizations and the harder performance is to measure the more important it is to predict it. If an organization could immediately and cheaply measure the performance of recruits they wouldn't need to examine their credentials. They could take everyone and keep just the good ones.Large organizations can't do this. But a bunch of small organizations in a market can come close. A market takes every organization and keeps just the good ones. As organizations get smaller this approaches taking every person and keeping just the good ones. So all other things being equal a society consisting of more smaller organizations will care less about credentials. That's what's been happening in the US. That's why those quotes from Korea sound so old fashioned. They're talking about an economy like America's a few decades ago dominated by a few big companies. The route for the ambitious in that sort of environment is to join one and climb to the top. Credentials matter a lot then. In the culture of a large organization an elite pedigree becomes a self fulfilling prophecy.This doesn't work in small companies. Even if your colleagues were impressed by your credentials they'd soon be parted from you if your performance didn't match because the company would go out of business and the people would be dispersed.In a world of small companies performance is all anyone cares about. People hiring for a startup don't care whether you've even graduated from college let alone which one. All they care about is what you can do. Which is in fact all that should matter even in a large organization. The reason credentials have such prestige is that for so long the large organizations in a society tended to be the most powerful. But in the US at least they don't have the monopoly on power they once did precisely because they can't measure (and thus reward) individual performance. Why spend twenty years climbing the corporate ladder when you can get rewarded directly by the market I realize I see a more exaggerated version of the change than most other people. As a partner at an early stage venture funding firm I'm like a jumpmaster shoving people out of the old world of credentials and into the new one of performance. I'm an agent of the change I'm seeing. But I don't think I'm imagining it. It was not so easy 25 years ago for an ambitious person to choose to be judged directly by the market. You had to go through bosses and they were influenced by where you'd been to college. What made it possible for small organizations to succeed in America I'm still not entirely sure. Startups are certainly a large part of it. Small organizations can develop new ideas faster than large ones and new ideas are increasingly valuable.But I don't think startups account for all the shift from credentials to measurement. My friend Julian Weber told me that when he went to work for a New York law firm in the 1950s they paid associates far less than firms do today. Law firms then made no pretense of paying people according to the value of the work they'd done. Pay was based on seniority. The younger employees were paying their dues. They'd be rewarded later.The same principle prevailed at industrial companies. When my father was working at Westinghouse in the 1970s he had people working for him who made more than he did because they'd been there longer.Now companies increasingly have to pay employees market price for the work they do. One reason is that employees no longer trust companies to deliver deferred rewards: why work to accumulate deferred rewards at a company that might go bankrupt or be taken over and have all its implicit obligations wiped out The other is that some companies broke ranks and started to pay young employees large amounts. This was particularly true in consulting law and finance where it led to the phenomenon of yuppies. The word is rarely used today because it's no longer surprising to see a 25 year old with money but in 1985 the sight of a 25 year old professional able to afford a new BMW was so novel that it called forth a new word.The classic yuppie worked for a small organization. He didn't work for General Widget but for the law firm that handled General Widget's acquisitions or the investment bank that floated their bond issues.Startups and yuppies entered the American conceptual vocabulary roughly simultaneously in the late 1970s and early 1980s. I don't think there was a causal connection. Startups happened because technology started to change so fast that big companies could no longer keep a lid on the smaller ones. I don't think the rise of yuppies was inspired by it it seems more as if there was a change in the social conventions (and perhaps the laws) governing the way big companies worked. But the two phenomena rapidly fused to produce a principle that now seems obvious: paying energetic young people market rates and getting correspondingly high performance from them.At about the same time the US economy rocketed out of the doldrums that had afflicted it for most of the 1970s. Was there a connection I don't know enough to say but it felt like it at the time. There was a lot of energy released. Countries worried about their competitiveness are right to be concerned about the number of startups started within them. But they would do even better to examine the underlying principle. Do they let energetic young people get paid market rate for the work they do The young are the test because when people aren't rewarded according to performance they're invariably rewarded according to seniority instead.All it takes is a few beachheads in your economy that pay for performance. Measurement spreads like heat. If one part of a society is better at measurement than others it tends to push the others to do better. If people who are young but smart and driven can make more by starting their own companies than by working for existing ones the existing companies are forced to pay more to keep them. So market rates gradually permeate every organization even the government. 3 The measurement of performance will tend to push even the organizations issuing credentials into line. When we were kids I used to annoy my sister by ordering her to do things I knew she was about to do anyway. As credentials are superseded by performance a similar role is the best former gatekeepers can hope for. Once credential granting institutions are no longer in the self fullfilling prophecy business they'll have to work harder to predict the future. Credentials are a step beyond bribery and influence. But they're not the final step. There's an even better way to block the transmission of power between generations: to encourage the trend toward an economy made of more smaller units. Then you can measure what credentials merely predict.No one likes the transmission of power between generations mdash not the left or the right. But the market forces favored by the right turn out to be a better way of preventing it than the credentials the left are forced to fall back on.The era of credentials began to end when the power of large organizations peaked in the late twentieth century. Now we seem to be entering a new era based on measurement. The reason the new model has advanced so rapidly is that it works so much better. It shows no sign of slowing.Notes 1 Miyazaki Ichisada (Conrad Schirokauer trans.) China's Examination Hell: The Civil Service Examinations of Imperial China Yale University Press 1981.Scribes in ancient Egypt took exams but they were more the type of proficiency test any apprentice might have to pass. 2 When I say the raison d'etre of prep schools is to get kids into better colleges I mean this in the narrowest sense. I'm not saying that's all prep schools do just that if they had zero effect on college admissions there would be far less demand for them. 3 Progressive tax rates will tend to damp this effect however by decreasing the difference between good and bad measurers.Thanks to Trevor Blackwell Sarah Harlin Jessica Livingston and David Sloo for reading drafts of this.
(This article is derived from a keynote talk at the fall 2002 meeting of NEPLS.)Visitors to this country are often surprised to find that Americans like to begin a conversation by asking "what do you do " I've never liked this question. I've rarely had a neat answer to it. But I think I have finally solved the problem. Now when someone asks me what I do I look them straight in the eye and say "I'm designing a new dialect of Lisp." I recommend this answer to anyone who doesn't like being asked what they do. The conversation will turn immediately to other topics.I don't consider myself to be doing research on programming languages. I'm just designing one in the same way that someone might design a building or a chair or a new typeface. I'm not trying to discover anything new. I just want to make a language that will be good to program in. In some ways this assumption makes life a lot easier.The difference between design and research seems to be a question of new versus good. Design doesn't have to be new but it has to be good. Research doesn't have to be good but it has to be new. I think these two paths converge at the top: the best design surpasses its predecessors by using new ideas and the best research solves problems that are not only new but actually worth solving. So ultimately we're aiming for the same destination just approaching it from different directions.What I'm going to talk about today is what your target looks like from the back. What do you do differently when you treat programming languages as a design problem instead of a research topic The biggest difference is that you focus more on the user. Design begins by asking who is this for and what do they need from it A good architect for example does not begin by creating a design that he then imposes on the users but by studying the intended users and figuring out what they need.Notice I said "what they need " not "what they want." I don't mean to give the impression that working as a designer means working as a sort of short order cook making whatever the client tells you to. This varies from field to field in the arts but I don't think there is any field in which the best work is done by the people who just make exactly what the customers tell them to.The customer is always right in the sense that the measure of good design is how well it works for the user. If you make a novel that bores everyone or a chair that's horribly uncomfortable to sit in then you've done a bad job period. It's no defense to say that the novel or the chair is designed according to the most advanced theoretical principles.And yet making what works for the user doesn't mean simply making what the user tells you to. Users don't know what all the choices are and are often mistaken about what they really want.The answer to the paradox I think is that you have to design for the user but you have to design what the user needs not simply what he says he wants. It's much like being a doctor. You can't just treat a patient's symptoms. When a patient tells you his symptoms you have to figure out what's actually wrong with him and treat that.This focus on the user is a kind of axiom from which most of the practice of good design can be derived and around which most design issues center.If good design must do what the user needs who is the user When I say that design must be for users I don't mean to imply that good design aims at some kind of lowest common denominator. You can pick any group of users you want. If you're designing a tool for example you can design it for anyone from beginners to experts and what's good design for one group might be bad for another. The point is you have to pick some group of users. I don't think you can even talk about good or bad design except with reference to some intended user.You're most likely to get good design if the intended users include the designer himself. When you design something for a group that doesn't include you it tends to be for people you consider to be less sophisticated than you not more sophisticated.That's a problem because looking down on the user however benevolently seems inevitably to corrupt the designer. I suspect that very few housing projects in the US were designed by architects who expected to live in them. You can see the same thing in programming languages. C Lisp and Smalltalk were created for their own designers to use. Cobol Ada and Java were created for other people to use.If you think you're designing something for idiots the odds are that you're not designing something good even for idiots. Even if you're designing something for the most sophisticated users though you're still designing for humans. It's different in research. In math you don't choose abstractions because they're easy for humans to understand you choose whichever make the proof shorter. I think this is true for the sciences generally. Scientific ideas are not meant to be ergonomic.Over in the arts things are very different. Design is all about people. The human body is a strange thing but when you're designing a chair that's what you're designing for and there's no way around it. All the arts have to pander to the interests and limitations of humans. In painting for example all other things being equal a painting with people in it will be more interesting than one without. It is not merely an accident of history that the great paintings of the Renaissance are all full of people. If they hadn't been painting as a medium wouldn't have the prestige that it does.Like it or not programming languages are also for people and I suspect the human brain is just as lumpy and idiosyncratic as the human body. Some ideas are easy for people to grasp and some aren't. For example we seem to have a very limited capacity for dealing with detail. It's this fact that makes programing languages a good idea in the first place if we could handle the detail we could just program in machine language.Remember too that languages are not primarily a form for finished programs but something that programs have to be developed in. Anyone in the arts could tell you that you might want different mediums for the two situations. Marble for example is a nice durable medium for finished ideas but a hopelessly inflexible one for developing new ideas.A program like a proof is a pruned version of a tree that in the past has had false starts branching off all over it. So the test of a language is not simply how clean the finished program looks in it but how clean the path to the finished program was. A design choice that gives you elegant finished programs may not give you an elegant design process. For example I've written a few macro defining macros full of nested backquotes that look now like little gems but writing them took hours of the ugliest trial and error and frankly I'm still not entirely sure they're correct.We often act as if the test of a language were how good finished programs look in it. It seems so convincing when you see the same program written in two languages and one version is much shorter. When you approach the problem from the direction of the arts you're less likely to depend on this sort of test. You don't want to end up with a programming language like marble.For example it is a huge win in developing software to have an interactive toplevel what in Lisp is called a read eval print loop. And when you have one this has real effects on the design of the language. It would not work well for a language where you have to declare variables before using them for example. When you're just typing expressions into the toplevel you want to be able to set x to some value and then start doing things to x. You don't want to have to declare the type of x first. You may dispute either of the premises but if a language has to have a toplevel to be convenient and mandatory type declarations are incompatible with a toplevel then no language that makes type declarations mandatory could be convenient to program in.In practice to get good design you have to get close and stay close to your users. You have to calibrate your ideas on actual users constantly especially in the beginning. One of the reasons Jane Austen's novels are so good is that she read them out loud to her family. That's why she never sinks into self indulgently arty descriptions of landscapes or pretentious philosophizing. (The philosophy's there but it's woven into the story instead of being pasted onto it like a label.) If you open an average "literary" novel and imagine reading it out loud to your friends as something you'd written you'll feel all too keenly what an imposition that kind of thing is upon the reader.In the software world this idea is known as Worse is Better. Actually there are several ideas mixed together in the concept of Worse is Better which is why people are still arguing about whether worse is actually better or not. But one of the main ideas in that mix is that if you're building something new you should get a prototype in front of users as soon as possible.The alternative approach might be called the Hail Mary strategy. Instead of getting a prototype out quickly and gradually refining it you try to create the complete finished product in one long touchdown pass. As far as I know this is a recipe for disaster. Countless startups destroyed themselves this way during the Internet bubble. I've never heard of a case where it worked.What people outside the software world may not realize is that Worse is Better is found throughout the arts. In drawing for example the idea was discovered during the Renaissance. Now almost every drawing teacher will tell you that the right way to get an accurate drawing is not to work your way slowly around the contour of an object because errors will accumulate and you'll find at the end that the lines don't meet. Instead you should draw a few quick lines in roughly the right place and then gradually refine this initial sketch.In most fields prototypes have traditionally been made out of different materials. Typefaces to be cut in metal were initially designed with a brush on paper. Statues to be cast in bronze were modelled in wax. Patterns to be embroidered on tapestries were drawn on paper with ink wash. Buildings to be constructed from stone were tested on a smaller scale in wood.What made oil paint so exciting when it first became popular in the fifteenth century was that you could actually make the finished work from the prototype. You could make a preliminary drawing if you wanted to but you weren't held to it you could work out all the details and even make major changes as you finished the painting.You can do this in software too. A prototype doesn't have to be just a model you can refine it into the finished product. I think you should always do this when you can. It lets you take advantage of new insights you have along the way. But perhaps even more important it's good for morale.Morale is key in design. I'm surprised people don't talk more about it. One of my first drawing teachers told me: if you're bored when you're drawing something the drawing will look boring. For example suppose you have to draw a building and you decide to draw each brick individually. You can do this if you want but if you get bored halfway through and start making the bricks mechanically instead of observing each one the drawing will look worse than if you had merely suggested the bricks.Building something by gradually refining a prototype is good for morale because it keeps you engaged. In software my rule is: always have working code. If you're writing something that you'll be able to test in an hour then you have the prospect of an immediate reward to motivate you. The same is true in the arts and particularly in oil painting. Most painters start with a blurry sketch and gradually refine it. If you work this way then in principle you never have to end the day with something that actually looks unfinished. Indeed there is even a saying among painters: "A painting is never finished you just stop working on it." This idea will be familiar to anyone who has worked on software.Morale is another reason that it's hard to design something for an unsophisticated user. It's hard to stay interested in something you don't like yourself. To make something good you have to be thinking "wow this is really great " not "what a piece of shit those fools will love it."Design means making things for humans. But it's not just the user who's human. The designer is human too.Notice all this time I've been talking about "the designer." Design usually has to be under the control of a single person to be any good. And yet it seems to be possible for several people to collaborate on a research project. This seems to me one of the most interesting differences between research and design.There have been famous instances of collaboration in the arts but most of them seem to have been cases of molecular bonding rather than nuclear fusion. In an opera it's common for one person to write the libretto and another to write the music. And during the Renaissance journeymen from northern Europe were often employed to do the landscapes in the backgrounds of Italian paintings. But these aren't true collaborations. They're more like examples of Robert Frost's "good fences make good neighbors." You can stick instances of good design together but within each individual project one person has to be in control.I'm not saying that good design requires that one person think of everything. There's nothing more valuable than the advice of someone whose judgement you trust. But after the talking is done the decision about what to do has to rest with one person.Why is it that research can be done by collaborators and design can't This is an interesting question. I don't know the answer. Perhaps if design and research converge the best research is also good design and in fact can't be done by collaborators. A lot of the most famous scientists seem to have worked alone. But I don't know enough to say whether there is a pattern here. It could be simply that many famous scientists worked when collaboration was less common.Whatever the story is in the sciences true collaboration seems to be vanishingly rare in the arts. Design by committee is a synonym for bad design. Why is that so Is there some way to beat this limitation I'm inclined to think there isn't that good design requires a dictator. One reason is that good design has to be all of a piece. Design is not just for humans but for individual humans. If a design represents an idea that fits in one person's head then the idea will fit in the user's head too.Related:
 (rev. May 2002) (This article came about in response to some questions on the LL1 mailing list. It is now incorporated in Revenge of the Nerds.)When McCarthy designed Lisp in the late 1950s it was a radical departure from existing languages the most important of which was Fortran.Lisp embodied nine new ideas: 1. Conditionals. A conditional is an if then else construct. We take these for granted now. They were invented by McCarthy in the course of developing Lisp. (Fortran at that time only had a conditional goto closely based on the branch instruction in the underlying hardware.) McCarthy who was on the Algol committee got conditionals into Algol whence they spread to most other languages.2. A function type. In Lisp functions are first class objects they're a data type just like integers strings etc and have a literal representation can be stored in variables can be passed as arguments and so on.3. Recursion. Recursion existed as a mathematical concept before Lisp of course but Lisp was the first programming language to support it. (It's arguably implicit in making functions first class objects.)4. A new concept of variables. In Lisp all variables are effectively pointers. Values are what have types not variables and assigning or binding variables means copying pointers not what they point to.5. Garbage collection.6. Programs composed of expressions. Lisp programs are trees of expressions each of which returns a value. (In some Lisps expressions can return multiple values.) This is in contrast to Fortran and most succeeding languages which distinguish between expressions and statements.It was natural to have this distinction in Fortran because (not surprisingly in a language where the input format was punched cards) the language was line oriented. You could not nest statements. And so while you needed expressions for math to work there was no point in making anything else return a value because there could not be anything waiting for it.This limitation went away with the arrival of block structured languages but by then it was too late. The distinction between expressions and statements was entrenched. It spread from Fortran into Algol and thence to both their descendants.When a language is made entirely of expressions you can compose expressions however you want. You can say either (using Arc syntax)(if foo ( x 1) ( x 2))or( x (if foo 1 2))7. A symbol type. Symbols differ from strings in that you can test equality by comparing a pointer.8. A notation for code using trees of symbols.9. The whole language always available. There is no real distinction between read time compile time and runtime. You can compile or run code while reading read or run code while compiling and read or compile code at runtime.Running code at read time lets users reprogram Lisp's syntax running code at compile time is the basis of macros compiling at runtime is the basis of Lisp's use as an extension language in programs like Emacs and reading at runtime enables programs to communicate using s expressions an idea recently reinvented as XML. When Lisp was first invented all these ideas were far removed from ordinary programming practice which was dictated largely by the hardware available in the late 1950s.Over time the default language embodied in a succession of popular languages has gradually evolved toward Lisp. 1 5 are now widespread. 6 is starting to appear in the mainstream. Python has a form of 7 though there doesn't seem to be any syntax for it. 8 which (with 9) is what makes Lisp macros possible is so far still unique to Lisp perhaps because (a) it requires those parens or something just as bad and (b) if you add that final increment of power you can no longer claim to have invented a new language but only to have designed a new dialect of Lisp )Though useful to present day programmers it's strange to describe Lisp in terms of its variation from the random expedients other languages adopted. That was not probably how McCarthy thought of it. Lisp wasn't designed to fix the mistakes in Fortran it came about more as the byproduct of an attempt to axiomatize computation.
The web is turning writing into a conversation. Twenty years ago writers wrote and readers read. The web lets readers respond and increasingly they do mdash in comment threads on forums and in their own blog posts.Many who respond to something disagree with it. That's to be expected. Agreeing tends to motivate people less than disagreeing. And when you agree there's less to say. You could expand on something the author said but he has probably already explored the most interesting implications. When you disagree you're entering territory he may not have explored.The result is there's a lot more disagreeing going on especially measured by the word. That doesn't mean people are getting angrier. The structural change in the way we communicate is enough to account for it. But though it's not anger that's driving the increase in disagreement there's a danger that the increase in disagreement will make people angrier. Particularly online where it's easy to say things you'd never say face to face.If we're all going to be disagreeing more we should be careful to do it well. What does it mean to disagree well Most readers can tell the difference between mere name calling and a carefully reasoned refutation but I think it would help to put names on the intermediate stages. So here's an attempt at a disagreement hierarchy: DH0. Name calling.This is the lowest form of disagreement and probably also the most common. We've all seen comments like this: u r a fag But it's important to realize that more articulate name calling has just as little weight. A comment like The author is a self important dilettante. is really nothing more than a pretentious version of "u r a fag." DH1. Ad Hominem.An ad hominem attack is not quite as weak as mere name calling. It might actually carry some weight. For example if a senator wrote an article saying senators' salaries should be increased one could respond: Of course he would say that. He's a senator. This wouldn't refute the author's argument but it may at least be relevant to the case. It's still a very weak form of disagreement though. If there's something wrong with the senator's argument you should say what it is and if there isn't what difference does it make that he's a senator Saying that an author lacks the authority to write about a topic is a variant of ad hominem mdash and a particularly useless sort because good ideas often come from outsiders. The question is whether the author is correct or not. If his lack of authority caused him to make mistakes point those out. And if it didn't it's not a problem. DH2. Responding to Tone.The next level up we start to see responses to the writing rather than the writer. The lowest form of these is to disagree with the author's tone. E.g. I can't believe the author dismisses intelligent design in such a cavalier fashion. Though better than attacking the author this is still a weak form of disagreement. It matters much more whether the author is wrong or right than what his tone is. Especially since tone is so hard to judge. Someone who has a chip on their shoulder about some topic might be offended by a tone that to other readers seemed neutral.So if the worst thing you can say about something is to criticize its tone you're not saying much. Is the author flippant but correct Better that than grave and wrong. And if the author is incorrect somewhere say where.DH3. Contradiction.In this stage we finally get responses to what was said rather than how or by whom. The lowest form of response to an argument is simply to state the opposing case with little or no supporting evidence.This is often combined with DH2 statements as in: I can't believe the author dismisses intelligent design in such a cavalier fashion. Intelligent design is a legitimate scientific theory. Contradiction can sometimes have some weight. Sometimes merely seeing the opposing case stated explicitly is enough to see that it's right. But usually evidence will help.DH4. Counterargument.At level 4 we reach the first form of convincing disagreement: counterargument. Forms up to this point can usually be ignored as proving nothing. Counterargument might prove something. The problem is it's hard to say exactly what.Counterargument is contradiction plus reasoning and or evidence. When aimed squarely at the original argument it can be convincing. But unfortunately it's common for counterarguments to be aimed at something slightly different. More often than not two people arguing passionately about something are actually arguing about two different things. Sometimes they even agree with one another but are so caught up in their squabble they don't realize it.There could be a legitimate reason for arguing against something slightly different from what the original author said: when you feel they missed the heart of the matter. But when you do that you should say explicitly you're doing it.DH5. Refutation.The most convincing form of disagreement is refutation. It's also the rarest because it's the most work. Indeed the disagreement hierarchy forms a kind of pyramid in the sense that the higher you go the fewer instances you find.To refute someone you probably have to quote them. You have to find a "smoking gun " a passage in whatever you disagree with that you feel is mistaken and then explain why it's mistaken. If you can't find an actual quote to disagree with you may be arguing with a straw man.While refutation generally entails quoting quoting doesn't necessarily imply refutation. Some writers quote parts of things they disagree with to give the appearance of legitimate refutation then follow with a response as low as DH3 or even DH0.DH6. Refuting the Central Point.The force of a refutation depends on what you refute. The most powerful form of disagreement is to refute someone's central point.Even as high as DH5 we still sometimes see deliberate dishonesty as when someone picks out minor points of an argument and refutes those. Sometimes the spirit in which this is done makes it more of a sophisticated form of ad hominem than actual refutation. For example correcting someone's grammar or harping on minor mistakes in names or numbers. Unless the opposing argument actually depends on such things the only purpose of correcting them is to discredit one's opponent.Truly refuting something requires one to refute its central point or at least one of them. And that means one has to commit explicitly to what the central point is. So a truly effective refutation would look like: The author's main point seems to be x. As he says: lt quotation gt But this is wrong for the following reasons... The quotation you point out as mistaken need not be the actual statement of the author's main point. It's enough to refute something it depends upon. What It MeansNow we have a way of classifying forms of disagreement. What good is it One thing the disagreement hierarchy doesn't give us is a way of picking a winner. DH levels merely describe the form of a statement not whether it's correct. A DH6 response could still be completely mistaken.But while DH levels don't set a lower bound on the convincingness of a reply they do set an upper bound. A DH6 response might be unconvincing but a DH2 or lower response is always unconvincing.The most obvious advantage of classifying the forms of disagreement is that it will help people to evaluate what they read. In particular it will help them to see through intellectually dishonest arguments. An eloquent speaker or writer can give the impression of vanquishing an opponent merely by using forceful words. In fact that is probably the defining quality of a demagogue. By giving names to the different forms of disagreement we give critical readers a pin for popping such balloons.Such labels may help writers too. Most intellectual dishonesty is unintentional. Someone arguing against the tone of something he disagrees with may believe he's really saying something. Zooming out and seeing his current position on the disagreement hierarchy may inspire him to try moving up to counterargument or refutation.But the greatest benefit of disagreeing well is not just that it will make conversations better but that it will make the people who have them happier. If you study conversations you find there is a lot more meanness down in DH1 than up in DH6. You don't have to be mean when you have a real point to make. In fact you don't want to. If you have something real to say being mean just gets in the way.If moving up the disagreement hierarchy makes people less mean that will make most of them happier. Most people don't really enjoy being mean they do it because they can't help it. Thanks to Trevor Blackwell and Jessica Livingston for reading drafts of this.Related:
When meeting people you don't know very well the convention is to seem extra friendly. You smile and say "pleased to meet you " whether you are or not. There's nothing dishonest about this. Everyone knows that these little social lies aren't meant to be taken literally just as everyone knows that "Can you pass the salt " is only grammatically a question.I'm perfectly willing to smile and say "pleased to meet you" when meeting new people. But there is another set of customs for being ingratiating in print that are not so harmless.The reason there's a convention of being ingratiating in print is that most essays are written to persuade. And as any politician could tell you the way to persuade people is not just to baldly state the facts. You have to add a spoonful of sugar to make the medicine go down.For example a politician announcing the cancellation of a government program will not merely say "The program is canceled." That would seem offensively curt. Instead he'll spend most of his time talking about the noble effort made by the people who worked on it.The reason these conventions are more dangerous is that they interact with the ideas. Saying "pleased to meet you" is just something you prepend to a conversation but the sort of spin added by politicians is woven through it. We're starting to move from social lies to real lies.Here's an example of a paragraph from an essay I wrote about labor unions. As written it tends to offend people who like unions. People who think the labor movement was the creation of heroic union organizers have a problem to explain: why are unions shrinking now The best they can do is fall back on the default explanation of people living in fallen civilizations. Our ancestors were giants. The workers of the early twentieth century must have had a moral courage that's lacking today. Now here's the same paragraph rewritten to please instead of offending them: Early union organizers made heroic sacrifices to improve conditions for workers. But though labor unions are shrinking now it's not because present union leaders are any less courageous. An employer couldn't get away with hiring thugs to beat up union leaders today but if they did I see no reason to believe today's union leaders would shrink from the challenge. So I think it would be a mistake to attribute the decline of unions to some kind of decline in the people who run them. Early union leaders were heroic certainly but we should not suppose that if unions have declined it's because present union leaders are somehow inferior. The cause must be external. 1 It makes the same point: that it can't have been the personal qualities of early union organizers that made unions successful but must have been some external factor or otherwise present day union leaders would have to be inferior people. But written this way it seems like a defense of present day union organizers rather than an attack on early ones. That makes it more persuasive to people who like unions because it seems sympathetic to their cause.I believe everything I wrote in the second version. Early union leaders did make heroic sacrifices. And present union leaders probably would rise to the occasion if necessary. People tend to I'm skeptical about the idea of "the greatest generation." 2 If I believe everything I said in the second version why didn't I write it that way Why offend people needlessly Because I'd rather offend people than pander to them and if you write about controversial topics you have to choose one or the other. The degree of courage of past or present union leaders is beside the point all that matters for the argument is that they're the same. But if you want to please people who are mistaken you can't simply tell the truth. You're always going to have to add some sort of padding to protect their misconceptions from bumping against reality.Most writers do. Most writers write to persuade if only out of habit or politeness. But I don't write to persuade I write to figure out. I write to persuade a hypothetical perfectly unbiased reader.Since the custom is to write to persuade the actual reader someone who doesn't will seem arrogant. In fact worse than arrogant: since readers are used to essays that try to please someone an essay that displeases one side in a dispute reads as an attempt to pander to the other. To a lot of pro union readers the first paragraph sounds like the sort of thing a right wing radio talk show host would say to stir up his followers. But it's not. Something that curtly contradicts one's beliefs can be hard to distinguish from a partisan attack on them but though they can end up in the same place they come from different sources.Would it be so bad to add a few extra words to make people feel better Maybe not. Maybe I'm excessively attached to conciseness. I write code the same way I write essays making pass after pass looking for anything I can cut. But I have a legitimate reason for doing this. You don't know what the ideas are until you get them down to the fewest words. 3 The danger of the second paragraph is not merely that it's longer. It's that you start to lie to yourself. The ideas start to get mixed together with the spin you've added to get them past the readers' misconceptions.I think the goal of an essay should be to discover surprising things. That's my goal at least. And most surprising means most different from what people currently believe. So writing to persuade and writing to discover are diametrically opposed. The more your conclusions disagree with readers' present beliefs the more effort you'll have to expend on selling your ideas rather than having them. As you accelerate this drag increases till eventually you reach a point where 100 of your energy is devoted to overcoming it and you can't go any faster.It's hard enough to overcome one's own misconceptions without having to think about how to get the resulting ideas past other people's. I worry that if I wrote to persuade I'd start to shy away unconsciously from ideas I knew would be hard to sell. When I notice something surprising it's usually very faint at first. There's nothing more than a slight stirring of discomfort. I don't want anything to get in the way of noticing it consciously. Notes 1 I had a strange feeling of being back in high school writing this. To get a good grade you had to both write the sort of pious crap you were expected to but also seem to be writing with conviction. The solution was a kind of method acting. It was revoltingly familiar to slip back into it. 2 Exercise for the reader: rephrase that thought to please the same people the first version would offend. 3 Come to think of it there is one way in which I deliberately pander to readers because it doesn't change the number of words: I switch person. This flattering distinction seems so natural to the average reader that they probably don't notice even when I switch in mid sentence though you tend to notice when it's done as conspicuously as this.Thanks to Jessica Livingston and Robert Morris for reading drafts of this.Note: An earlier version of this essay began by talking about why people dislike Michael Arrington. I now believe that was mistaken and that most people don't dislike him for the same reason I did when I first met him but simply because he writes about controversial things.
Note: The strategy described at the end of this essay didn't work. It would work for a while and then I'd gradually find myself using the Internet on my work computer. I'm trying other strategies now but I think this time I'll wait till I'm sure they work before writing about them.May 2008Procrastination feeds on distractions. Most people find it uncomfortable just to sit and do nothing you avoid work by doing something else.So one way to beat procrastination is to starve it of distractions. But that's not as straightforward as it sounds because there are people working hard to distract you. Distraction is not a static obstacle that you avoid like you might avoid a rock in the road. Distraction seeks you out.Chesterfield described dirt as matter out of place. Distracting is similarly desirable at the wrong time. And technology is continually being refined to produce more and more desirable things. Which means that as we learn to avoid one class of distractions new ones constantly appear like drug resistant bacteria.Television for example has after 50 years of refinement reached the point where it's like visual crack. I realized when I was 13 that TV was addictive so I stopped watching it. But I read recently that the average American watches 4 hours of TV a day. A quarter of their life.TV is in decline now but only because people have found even more addictive ways of wasting time. And what's especially dangerous is that many happen at your computer. This is no accident. An ever larger percentage of office workers sit in front of computers connected to the Internet and distractions always evolve toward the procrastinators.I remember when computers were for me at least exclusively for work. I might occasionally dial up a server to get mail or ftp files but most of the time I was offline. All I could do was write and program. Now I feel as if someone snuck a television onto my desk. Terribly addictive things are just a click away. Run into an obstacle in what you're working on Hmm I wonder what's new online. Better check.After years of carefully avoiding classic time sinks like TV games and Usenet I still managed to fall prey to distraction because I didn't realize that it evolves. Something that used to be safe using the Internet gradually became more and more dangerous. Some days I'd wake up get a cup of tea and check the news then check email then check the news again then answer a few emails then suddenly notice it was almost lunchtime and I hadn't gotten any real work done. And this started to happen more and more often.It took me surprisingly long to realize how distracting the Internet had become because the problem was intermittent. I ignored it the way you let yourself ignore a bug that only appears intermittently. When I was in the middle of a project distractions weren't really a problem. It was when I'd finished one project and was deciding what to do next that they always bit me.Another reason it was hard to notice the danger of this new type of distraction was that social customs hadn't yet caught up with it. If I'd spent a whole morning sitting on a sofa watching TV I'd have noticed very quickly. That's a known danger sign like drinking alone. But using the Internet still looked and felt a lot like work.Eventually though it became clear that the Internet had become so much more distracting that I had to start treating it differently. Basically I had to add a new application to my list of known time sinks: Firefox. The problem is a hard one to solve because most people still need the Internet for some things. If you drink too much you can solve that problem by stopping entirely. But you can't solve the problem of overeating by stopping eating. I couldn't simply avoid the Internet entirely as I'd done with previous time sinks.At first I tried rules. For example I'd tell myself I was only going to use the Internet twice a day. But these schemes never worked for long. Eventually something would come up that required me to use it more than that. And then I'd gradually slip back into my old ways.Addictive things have to be treated as if they were sentient adversaries mdash as if there were a little man in your head always cooking up the most plausible arguments for doing whatever you're trying to stop doing. If you leave a path to it he'll find it.The key seems to be visibility. The biggest ingredient in most bad habits is denial. So you have to make it so that you can't merely slip into doing the thing you're trying to avoid. It has to set off alarms.Maybe in the long term the right answer for dealing with Internet distractions will be software that watches and controls them. But in the meantime I've found a more drastic solution that definitely works: to set up a separate computer for using the Internet.I now leave wifi turned off on my main computer except when I need to transfer a file or edit a web page and I have a separate laptop on the other side of the room that I use to check mail or browse the web. (Irony of ironies it's the computer Steve Huffman wrote Reddit on. When Steve and Alexis auctioned off their old laptops for charity I bought them for the Y Combinator museum.)My rule is that I can spend as much time online as I want as long as I do it on that computer. And this turns out to be enough. When I have to sit on the other side of the room to check email or browse the web I become much more aware of it. Sufficiently aware in my case at least that it's hard to spend more than about an hour a day online.And my main computer is now freed for work. If you try this trick you'll probably be struck by how different it feels when your computer is disconnected from the Internet. It was alarming to me how foreign it felt to sit in front of a computer that could only be used for work because that showed how much time I must have been wasting.Wow. All I can do at this computer is work. Ok I better work then.That's the good part. Your old bad habits now help you to work. You're used to sitting in front of that computer for hours at a time. But you can't browse the web or check email now. What are you going to do You can't just sit there. So you start working.
(I originally wrote this at the request of a company producing a report about entrepreneurship. Unfortunately after reading it they decided it was too controversial to include.) VC funding will probably dry up somewhat during the present recession like it usually does in bad times. But this time the result may be different. This time the number of new startups may not decrease. And that could be dangerous for VCs.When VC funding dried up after the Internet Bubble startups dried up too. There were not a lot of new startups being founded in 2003. But startups aren't tied to VC the way they were 10 years ago. It's now possible for VCs and startups to diverge. And if they do they may not reconverge once the economy gets better.The reason startups no longer depend so much on VCs is one that everyone in the startup business knows by now: it has gotten much cheaper to start a startup. There are four main reasons: Moore's law has made hardware cheap open source has made software free the web has made marketing and distribution free and more powerful programming languages mean development teams can be smaller. These changes have pushed the cost of starting a startup down into the noise. In a lot of startups mdash probaby most startups funded by Y Combinator mdash the biggest expense is simply the founders' living expenses. We've had startups that were profitable on revenues of 3000 a month. 3000 is insignificant as revenues go. Why should anyone care about a startup making 3000 a month Because although insignificant as revenue this amount of money can change a startup's funding situation completely.Someone running a startup is always calculating in the back of their mind how much "runway" they have mdash how long they have till the money in the bank runs out and they either have to be profitable raise more money or go out of business. Once you cross the threshold of profitability however low your runway becomes infinite. It's a qualitative change like the stars turning into lines and disappearing when the Enterprise accelerates to warp speed. Once you're profitable you don't need investors' money. And because Internet startups have become so cheap to run the threshold of profitability can be trivially low. Which means many Internet startups don't need VC scale investments anymore. For many startups VC funding has in the language of VCs gone from a must have to a nice to have.This change happened while no one was looking and its effects have been largely masked so far. It was during the trough after the Internet Bubble that it became trivially cheap to start a startup but few realized it because startups were so out of fashion. When startups came back into fashion around 2005 investors were starting to write checks again. And while founders may not have needed VC money the way they used to they were willing to take it if offered mdash partly because there was a tradition of startups taking VC money and partly because startups like dogs tend to eat when given the opportunity. As long as VCs were writing checks founders were never forced to explore the limits of how little they needed them. There were a few startups who hit these limits accidentally because of their unusual circumstances mdash most famously 37signals which hit the limit because they crossed into startup land from the other direction: they started as a consulting firm so they had revenue before they had a product.VCs and founders are like two components that used to be bolted together. Around 2000 the bolt was removed. Because the components have so far been subjected to the same forces they still seem to be joined together but really one is just resting on the other. A sharp impact would make them fly apart. And the present recession could be that impact.Because of Y Combinator's position at the extreme end of the spectrum we'd be the first to see signs of a separation between founders and investors and we are in fact seeing it. For example though the stock market crash does seem to have made investors more cautious it doesn't seem to have had any effect on the number of people who want to start startups. We take applications for funding every 6 months. Applications for the current funding cycle closed on October 17 well after the markets tanked and even so we got a record number up 40 from the same cycle a year before.Maybe things will be different a year from now if the economy continues to get worse but so far there is zero slackening of interest among potential founders. That's different from the way things felt in 2001. Then there was a widespread feeling among potential founders that startups were over and that one should just go to grad school. That isn't happening this time and part of the reason is that even in a bad economy it's not that hard to build something that makes 3000 a month. If investors stop writing checks who cares We also see signs of a divergence between founders and investors in the attitudes of existing startups we've funded. I was talking to one recently that had a round fall through at the last minute over the sort of trifle that breaks deals when investors feel they have the upper hand mdash over an uncertainty about whether the founders had correctly filed their 83(b) forms if you can believe that. And yet this startup is obviously going to succeed: their traffic and revenue graphs look like a jet taking off. So I asked them if they wanted me to introduce them to more investors. To my surprise they said no mdash that they'd just spent four months dealing with investors and they were actually a lot happier now that they didn't have to. There was a friend they wanted to hire with the investor money and now they'd have to postpone that. But otherwise they felt they had enough in the bank to make it to profitability. To make sure they were moving to a cheaper apartment. And in this economy I bet they got a good deal on it.I've detected this "investors aren't worth the trouble" vibe from several YC founders I've talked to recently. At least one startup from the most recent (summer) cycle may not even raise angel money let alone VC. Ticketstumbler made it to profitability on Y Combinator's 15 000 investment and they hope not to need more. This surprised even us. Although YC is based on the idea of it being cheap to start a startup we never anticipated that founders would grow successful startups on nothing more than YC funding.If founders decide VCs aren't worth the trouble that could be bad for VCs. When the economy bounces back in a few years and they're ready to write checks again they may find that founders have moved on.There is a founder community just as there's a VC community. They all know one another and techniques spread rapidly between them. If one tries a new programming language or a new hosting provider and gets good results 6 months later half of them are using it. And the same is true for funding. The current generation of founders want to raise money from VCs and Sequoia specifically because Larry and Sergey took money from VCs and Sequoia specifically. Imagine what it would do to the VC business if the next hot company didn't take VC at all.VCs think they're playing a zero sum game. In fact it's not even that. If you lose a deal to Benchmark you lose that deal but VC as an industry still wins. If you lose a deal to None all VCs lose.This recession may be different from the one after the Internet Bubble. This time founders may keep starting startups. And if they do VCs will have to keep writing checks or they could become irrelevant.Thanks to Sam Altman Trevor Blackwell David Hornik Jessica Livingston Robert Morris and Fred Wilson for reading drafts of this.
If the world were static we could have monotonically increasing confidence in our beliefs. The more (and more varied) experience a belief survived the less likely it would be false. Most people implicitly believe something like this about their opinions. And they're justified in doing so with opinions about things that don't change much like human nature. But you can't trust your opinions in the same way about things that change which could include practically everything else.When experts are wrong it's often because they're experts on an earlier version of the world.Is it possible to avoid that Can you protect yourself against obsolete beliefs To some extent yes. I spent almost a decade investing in early stage startups and curiously enough protecting yourself against obsolete beliefs is exactly what you have to do to succeed as a startup investor. Most really good startup ideas look like bad ideas at first and many of those look bad specifically because some change in the world just switched them from bad to good. I spent a lot of time learning to recognize such ideas and the techniques I used may be applicable to ideas in general.The first step is to have an explicit belief in change. People who fall victim to a monotonically increasing confidence in their opinions are implicitly concluding the world is static. If you consciously remind yourself it isn't you start to look for change.Where should one look for it Beyond the moderately useful generalization that human nature doesn't change much the unfortunate fact is that change is hard to predict. This is largely a tautology but worth remembering all the same: change that matters usually comes from an unforeseen quarter.So I don't even try to predict it. When I get asked in interviews to predict the future I always have to struggle to come up with something plausible sounding on the fly like a student who hasn't prepared for an exam. 1 But it's not out of laziness that I haven't prepared. It seems to me that beliefs about the future are so rarely correct that they usually aren't worth the extra rigidity they impose and that the best strategy is simply to be aggressively open minded. Instead of trying to point yourself in the right direction admit you have no idea what the right direction is and try instead to be super sensitive to the winds of change.It's ok to have working hypotheses even though they may constrain you a bit because they also motivate you. It's exciting to chase things and exciting to try to guess answers. But you have to be disciplined about not letting your hypotheses harden into anything more. 2 I believe this passive m.o. works not just for evaluating new ideas but also for having them. The way to come up with new ideas is not to try explicitly to but to try to solve problems and simply not discount weird hunches you have in the process.The winds of change originate in the unconscious minds of domain experts. If you're sufficiently expert in a field any weird idea or apparently irrelevant question that occurs to you is ipso facto worth exploring. 3 Within Y Combinator when an idea is described as crazy it's a compliment mdash in fact on average probably a higher compliment than when an idea is described as good.Startup investors have extraordinary incentives for correcting obsolete beliefs. If they can realize before other investors that some apparently unpromising startup isn't they can make a huge amount of money. But the incentives are more than just financial. Investors' opinions are explicitly tested: startups come to them and they have to say yes or no and then fairly quickly they learn whether they guessed right. The investors who say no to a Google (and there were several) will remember it for the rest of their lives.Anyone who must in some sense bet on ideas rather than merely commenting on them has similar incentives. Which means anyone who wants to have such incentives can by turning their comments into bets: if you write about a topic in some fairly durable and public form you'll find you worry much more about getting things right than most people would in a casual conversation. 4 Another trick I've found to protect myself against obsolete beliefs is to focus initially on people rather than ideas. Though the nature of future discoveries is hard to predict I've found I can predict quite well what sort of people will make them. Good new ideas come from earnest energetic independent minded people.Betting on people over ideas saved me countless times as an investor. We thought Airbnb was a bad idea for example. But we could tell the founders were earnest energetic and independent minded. (Indeed almost pathologically so.) So we suspended disbelief and funded them.This too seems a technique that should be generally applicable. Surround yourself with the sort of people new ideas come from. If you want to notice quickly when your beliefs become obsolete you can't do better than to be friends with the people whose discoveries will make them so.It's hard enough already not to become the prisoner of your own expertise but it will only get harder because change is accelerating. That's not a recent trend change has been accelerating since the paleolithic era. Ideas beget ideas. I don't expect that to change. But I could be wrong. Notes 1 My usual trick is to talk about aspects of the present that most people haven't noticed yet. 2 Especially if they become well enough known that people start to identify them with you. You have to be extra skeptical about things you want to believe and once a hypothesis starts to be identified with you it will almost certainly start to be in that category. 3 In practice "sufficiently expert" doesn't require one to be recognized as an expert mdash which is a trailing indicator in any case. In many fields a year of focused work plus caring a lot would be enough. 4 Though they are public and persist indefinitely comments on e.g. forums and places like Twitter seem empirically to work like casual conversation. The threshold may be whether what you write has a title. Thanks to Sam Altman Patrick Collison and Robert Morris for reading drafts of this.
An investor wants to give you money for a certain percentage of your startup. Should you take it You're about to hire your first employee. How much stock should you give him These are some of the hardest questions founders face. And yet both have the same answer:1 (1 n)Whenever you're trading stock in your company for anything whether it's money or an employee or a deal with another company the test for whether to do it is the same. You should give up n of your company if what you trade it for improves your average outcome enough that the (100 n) you have left is worth more than the whole company was before.For example if an investor wants to buy half your company how much does that investment have to improve your average outcome for you to break even Obviously it has to double: if you trade half your company for something that more than doubles the company's average outcome you're net ahead. You have half as big a share of something worth more than twice as much.In the general case if n is the fraction of the company you're giving up the deal is a good one if it makes the company worth more than 1 (1 n).For example suppose Y Combinator offers to fund you in return for 6 of your company. In this case n is .06 and 1 (1 n) is 1.064. So you should take the deal if you believe we can improve your average outcome by more than 6.4 . If we improve your outcome by 10 you're net ahead because the remaining .94 you hold is worth .94 x 1.1 1.034. 1 One of the things the equity equation shows us is that financially at least taking money from a top VC firm can be a really good deal. Greg Mcadoo from Sequoia recently said at a YC dinner that when Sequoia invests alone they like to take about 30 of a company. 1 .7 1.43 meaning that deal is worth taking if they can improve your outcome by more than 43 . For the average startup that would be an extraordinary bargain. It would improve the average startup's prospects by more than 43 just to be able to say they were funded by Sequoia even if they never actually got the money.The reason Sequoia is such a good deal is that the percentage of the company they take is artificially low. They don't even try to get market price for their investment they limit their holdings to leave the founders enough stock to feel the company is still theirs.The catch is that Sequoia gets about 6000 business plans a year and funds about 20 of them so the odds of getting this great deal are 1 in 300. The companies that make it through are not average startups.Of course there are other factors to consider in a VC deal. It's never just a straight trade of money for stock. But if it were taking money from a top firm would generally be a bargain.You can use the same formula when giving stock to employees but it works in the other direction. If i is the average outcome for the company with the addition of some new person then they're worth n such that i 1 (1 n). Which means n (i 1) i.For example suppose you're just two founders and you want to hire an additional hacker who's so good you feel he'll increase the average outcome of the whole company by 20 . n (1.2 1) 1.2 .167. So you'll break even if you trade 16.7 of the company for him.That doesn't mean 16.7 is the right amount of stock to give him. Stock is not the only cost of hiring someone: there's usually salary and overhead as well. And if the company merely breaks even on the deal there's no reason to do it.I think to translate salary and overhead into stock you should multiply the annual rate by about 1.5. Most startups grow fast or die if you die you don't have to pay the guy and if you grow fast you'll be paying next year's salary out of next year's valuation which should be 3x this year's. If your valuation grows 3x a year the total cost in stock of a new hire's salary and overhead is 1.5 years' cost at the present valuation. 2 How much of an additional margin should the company need as the "activation energy" for the deal Since this is in effect the company's profit on a hire the market will determine that: if you're a hot opportunity you can charge more.Let's run through an example. Suppose the company wants to make a "profit" of 50 on the new hire mentioned above. So subtract a third from 16.7 and we have 11.1 as his "retail" price. Suppose further that he's going to cost 60k a year in salary and overhead x 1.5 90k total. If the company's valuation is 2 million 90k is 4.5 . 11.1 4.5 an offer of 6.6 .Incidentally notice how important it is for early employees to take little salary. It comes right out of stock that could otherwise be given to them.Obviously there is a great deal of play in these numbers. I'm not claiming that stock grants can now be reduced to a formula. Ultimately you always have to guess. But at least know what you're guessing. If you choose a number based on your gut feel or a table of typical grant sizes supplied by a VC firm understand what those are estimates of.And more generally when you make any decision involving equity run it through 1 (1 n) to see if it makes sense. You should always feel richer after trading equity. If the trade didn't increase the value of your remaining shares enough to put you net ahead you wouldn't have (or shouldn't have) done it.Notes 1 This is why we can't believe anyone would think Y Combinator was a bad deal. Does anyone really think we're so useless that in three months we can't improve a startup's prospects by 6.4 this article simply don't understand what we do. If all we did was write checks YC would be a bad deal. But in fact the money is the least of what we do. No VC who has seen Demo Day first hand has ever said YC took too much equity. 2 The obvious choice for your present valuation is the post money valuation of your last funding round. This probably undervalues the company though because (a) unless your last round just happened the company is presumably worth more and (b) the valuation of an early funding round usually reflects some other contribution by the investors.Thanks to Sam Altman Trevor Blackwell Paul Buchheit Hutch Fishman David Hornik Paul Kedrosky Jessica Livingston Gary Sabot and Joshua Schachter for reading drafts of this.
Remember the essays you had to write in high school Topic sentence introductory paragraph supporting paragraphs conclusion. The conclusion being say that Ahab in Moby Dick was a Christ like figure.Oy. So I'm going to try to give the other side of the story: what an essay really is and how you write one. Or at least how I write one.ModsThe most obvious difference between real essays and the things one has to write in school is that real essays are not exclusively about English literature. Certainly schools should teach students how to write. But due to a series of historical accidents the teaching of writing has gotten mixed together with the study of literature. And so all over the country students are writing not about how a baseball team with a small budget might compete with the Yankees or the role of color in fashion or what constitutes a good dessert but about symbolism in Dickens.With the result that writing is made to seem boring and pointless. Who cares about symbolism in Dickens Dickens himself would be more interested in an essay about color or baseball.How did things get this way To answer that we have to go back almost a thousand years. Around 1100 Europe at last began to catch its breath after centuries of chaos and once they had the luxury of curiosity they rediscovered what we call "the classics." The effect was rather as if we were visited by beings from another solar system. These earlier civilizations were so much more sophisticated that for the next several centuries the main work of European scholars in almost every field was to assimilate what they knew.During this period the study of ancient texts acquired great prestige. It seemed the essence of what scholars did. As European scholarship gained momentum it became less and less important by 1350 someone who wanted to learn about science could find better teachers than Aristotle in his own era. 1 But schools change slower than scholarship. In the 19th century the study of ancient texts was still the backbone of the curriculum.The time was then ripe for the question: if the study of ancient texts is a valid field for scholarship why not modern texts The answer of course is that the original raison d'etre of classical scholarship was a kind of intellectual archaeology that does not need to be done in the case of contemporary authors. But for obvious reasons no one wanted to give that answer. The archaeological work being mostly done it implied that those studying the classics were if not wasting their time at least working on problems of minor importance.And so began the study of modern literature. There was a good deal of resistance at first. The first courses in English literature seem to have been offered by the newer colleges particularly American ones. Dartmouth the University of Vermont Amherst and University College London taught English literature in the 1820s. But Harvard didn't have a professor of English literature until 1876 and Oxford not till 1885. (Oxford had a chair of Chinese before it had one of English.) 2 What tipped the scales at least in the US seems to have been the idea that professors should do research as well as teach. This idea (along with the PhD the department and indeed the whole concept of the modern university) was imported from Germany in the late 19th century. Beginning at Johns Hopkins in 1876 the new model spread rapidly.Writing was one of the casualties. Colleges had long taught English composition. But how do you do research on composition The professors who taught math could be required to do original math the professors who taught history could be required to write scholarly articles about history but what about the professors who taught rhetoric or composition What should they do research on The closest thing seemed to be English literature. 3 And so in the late 19th century the teaching of writing was inherited by English professors. This had two drawbacks: (a) an expert on literature need not himself be a good writer any more than an art historian has to be a good painter and (b) the subject of writing now tends to be literature since that's what the professor is interested in.High schools imitate universities. The seeds of our miserable high school experiences were sown in 1892 when the National Education Association "formally recommended that literature and composition be unified in the high school course." 4 The 'riting component of the 3 Rs then morphed into English with the bizarre consequence that high school students now had to write about English literature to write without even realizing it imitations of whatever English professors had been publishing in their journals a few decades before.It's no wonder if this seems to the student a pointless exercise because we're now three steps removed from real work: the students are imitating English professors who are imitating classical scholars who are merely the inheritors of a tradition growing out of what was 700 years ago fascinating and urgently needed work.No DefenseThe other big difference between a real essay and the things they make you write in school is that a real essay doesn't take a position and then defend it. That principle like the idea that we ought to be writing about literature turns out to be another intellectual hangover of long forgotten origins.It's often mistakenly believed that medieval universities were mostly seminaries. In fact they were more law schools. And at least in our tradition lawyers are advocates trained to take either side of an argument and make as good a case for it as they can. Whether cause or effect this spirit pervaded early universities. The study of rhetoric the art of arguing persuasively was a third of the undergraduate curriculum. 5 And after the lecture the most common form of discussion was the disputation. This is at least nominally preserved in our present day thesis defense: most people treat the words thesis and dissertation as interchangeable but originally at least a thesis was a position one took and the dissertation was the argument by which one defended it.Defending a position may be a necessary evil in a legal dispute but it's not the best way to get at the truth as I think lawyers would be the first to admit. It's not just that you miss subtleties this way. The real problem is that you can't change the question.And yet this principle is built into the very structure of the things they teach you to write in high school. The topic sentence is your thesis chosen in advance the supporting paragraphs the blows you strike in the conflict and the conclusion uh what is the conclusion I was never sure about that in high school. It seemed as if we were just supposed to restate what we said in the first paragraph but in different enough words that no one could tell. Why bother But when you understand the origins of this sort of "essay " you can see where the conclusion comes from. It's the concluding remarks to the jury.Good writing should be convincing certainly but it should be convincing because you got the right answers not because you did a good job of arguing. When I give a draft of an essay to friends there are two things I want to know: which parts bore them and which seem unconvincing. The boring bits can usually be fixed by cutting. But I don't try to fix the unconvincing bits by arguing more cleverly. I need to talk the matter over.At the very least I must have explained something badly. In that case in the course of the conversation I'll be forced to come up a with a clearer explanation which I can just incorporate in the essay. More often than not I have to change what I was saying as well. But the aim is never to be convincing per se. As the reader gets smarter convincing and true become identical so if I can convince smart readers I must be near the truth.The sort of writing that attempts to persuade may be a valid (or at least inevitable) form but it's historically inaccurate to call it an essay. An essay is something else.TryingTo understand what a real essay is we have to reach back into history again though this time not so far. To Michel de Montaigne who in 1580 published a book of what he called "essais." He was doing something quite different from what lawyers do and the difference is embodied in the name. Essayer is the French verb meaning "to try" and an essai is an attempt. An essay is something you write to try to figure something out.Figure out what You don't know yet. And so you can't begin with a thesis because you don't have one and may never have one. An essay doesn't begin with a statement but with a question. In a real essay you don't take a position and defend it. You notice a door that's ajar and you open it and walk in to see what's inside.If all you want to do is figure things out why do you need to write anything though Why not just sit and think Well there precisely is Montaigne's great discovery. Expressing ideas helps to form them. Indeed helps is far too weak a word. Most of what ends up in my essays I only thought of when I sat down to write them. That's why I write them.In the things you write in school you are in theory merely explaining yourself to the reader. In a real essay you're writing for yourself. You're thinking out loud.But not quite. Just as inviting people over forces you to clean up your apartment writing something that other people will read forces you to think well. So it does matter to have an audience. The things I've written just for myself are no good. They tend to peter out. When I run into difficulties I find I conclude with a few vague questions and then drift off to get a cup of tea.Many published essays peter out in the same way. Particularly the sort written by the staff writers of newsmagazines. Outside writers tend to supply editorials of the defend a position variety which make a beeline toward a rousing (and foreordained) conclusion. But the staff writers feel obliged to write something "balanced." Since they're writing for a popular magazine they start with the most radioactively controversial questions from which because they're writing for a popular magazine they then proceed to recoil in terror. Abortion for or against This group says one thing. That group says another. One thing is certain: the question is a complex one. (But don't get mad at us. We didn't draw any conclusions.)The RiverQuestions aren't enough. An essay has to come up with answers. They don't always of course. Sometimes you start with a promising question and get nowhere. But those you don't publish. Those are like experiments that get inconclusive results. An essay you publish ought to tell the reader something he didn't already know.But what you tell him doesn't matter so long as it's interesting. I'm sometimes accused of meandering. In defend a position writing that would be a flaw. There you're not concerned with truth. You already know where you're going and you want to go straight there blustering through obstacles and hand waving your way across swampy ground. But that's not what you're trying to do in an essay. An essay is supposed to be a search for truth. It would be suspicious if it didn't meander.The Meander (aka Menderes) is a river in Turkey. As you might expect it winds all over the place. But it doesn't do this out of frivolity. The path it has discovered is the most economical route to the sea. 6 The river's algorithm is simple. At each step flow down. For the essayist this translates to: flow interesting. Of all the places to go next choose the most interesting. One can't have quite as little foresight as a river. I always know generally what I want to write about. But not the specific conclusions I want to reach from paragraph to paragraph I let the ideas take their course.This doesn't always work. Sometimes like a river one runs up against a wall. Then I do the same thing the river does: backtrack. At one point in this essay I found that after following a certain thread I ran out of ideas. I had to go back seven paragraphs and start over in another direction.Fundamentally an essay is a train of thought but a cleaned up train of thought as dialogue is cleaned up conversation. Real thought like real conversation is full of false starts. It would be exhausting to read. You need to cut and fill to emphasize the central thread like an illustrator inking over a pencil drawing. But don't change so much that you lose the spontaneity of the original.Err on the side of the river. An essay is not a reference work. It's not something you read looking for a specific answer and feel cheated if you don't find it. I'd much rather read an essay that went off in an unexpected but interesting direction than one that plodded dutifully along a prescribed course.SurpriseSo what's interesting For me interesting means surprise. Interfaces as Geoffrey James has said should follow the principle of least astonishment. A button that looks like it will make a machine stop should make it stop not speed up. Essays should do the opposite. Essays should aim for maximum surprise.I was afraid of flying for a long time and could only travel vicariously. When friends came back from faraway places it wasn't just out of politeness that I asked what they saw. I really wanted to know. And I found the best way to get information out of them was to ask what surprised them. How was the place different from what they expected This is an extremely useful question. You can ask it of the most unobservant people and it will extract information they didn't even know they were recording.Surprises are things that you not only didn't know but that contradict things you thought you knew. And so they're the most valuable sort of fact you can get. They're like a food that's not merely healthy but counteracts the unhealthy effects of things you've already eaten.How do you find surprises Well therein lies half the work of essay writing. (The other half is expressing yourself well.) The trick is to use yourself as a proxy for the reader. You should only write about things you've thought about a lot. And anything you come across that surprises you who've thought about the topic a lot will probably surprise most readers.For example in a recent essay I pointed out that because you can only judge computer programmers by working with them no one knows who the best programmers are overall. I didn't realize this when I began that essay and even now I find it kind of weird. That's what you're looking for.So if you want to write essays you need two ingredients: a few topics you've thought about a lot and some ability to ferret out the unexpected.What should you think about My guess is that it doesn't matter that anything can be interesting if you get deeply enough into it. One possible exception might be things that have deliberately had all the variation sucked out of them like working in fast food. In retrospect was there anything interesting about working at Baskin Robbins Well it was interesting how important color was to the customers. Kids a certain age would point into the case and say that they wanted yellow. Did they want French Vanilla or Lemon They would just look at you blankly. They wanted yellow. And then there was the mystery of why the perennial favorite Pralines 'n' Cream was so appealing. (I think now it was the salt.) And the difference in the way fathers and mothers bought ice cream for their kids: the fathers like benevolent kings bestowing largesse the mothers harried giving in to pressure. So yes there does seem to be some material even in fast food.I didn't notice those things at the time though. At sixteen I was about as observant as a lump of rock. I can see more now in the fragments of memory I preserve of that age than I could see at the time from having it all happening live right in front of me.ObservationSo the ability to ferret out the unexpected must not merely be an inborn one. It must be something you can learn. How do you learn it To some extent it's like learning history. When you first read history it's just a whirl of names and dates. Nothing seems to stick. But the more you learn the more hooks you have for new facts to stick onto which means you accumulate knowledge at what's colloquially called an exponential rate. Once you remember that Normans conquered England in 1066 it will catch your attention when you hear that other Normans conquered southern Italy at about the same time. Which will make you wonder about Normandy and take note when a third book mentions that Normans were not like most of what is now called France tribes that flowed in as the Roman empire collapsed but Vikings (norman north man) who arrived four centuries later in 911. Which makes it easier to remember that Dublin was also established by Vikings in the 840s. Etc etc squared.Collecting surprises is a similar process. The more anomalies you've seen the more easily you'll notice new ones. Which means oddly enough that as you grow older life should become more and more surprising. When I was a kid I used to think adults had it all figured out. I had it backwards. Kids are the ones who have it all figured out. They're just mistaken.When it comes to surprises the rich get richer. But (as with wealth) there may be habits of mind that will help the process along. It's good to have a habit of asking questions especially questions beginning with Why. But not in the random way that three year olds ask why. There are an infinite number of questions. How do you find the fruitful ones I find it especially useful to ask why about things that seem wrong. For example why should there be a connection between humor and misfortune Why do we find it funny when a character even one we like slips on a banana peel There's a whole essay's worth of surprises there for sure.If you want to notice things that seem wrong you'll find a degree of skepticism helpful. I take it as an axiom that we're only achieving 1 of what we could. This helps counteract the rule that gets beaten into our heads as children: that things are the way they are because that is how things have to be. For example everyone I've talked to while writing this essay felt the same about English classes that the whole process seemed pointless. But none of us had the balls at the time to hypothesize that it was in fact all a mistake. We all thought there was just something we weren't getting.I have a hunch you want to pay attention not just to things that seem wrong but things that seem wrong in a humorous way. I'm always pleased when I see someone laugh as they read a draft of an essay. But why should I be I'm aiming for good ideas. Why should good ideas be funny The connection may be surprise. Surprises make us laugh and surprises are what one wants to deliver.I write down things that surprise me in notebooks. I never actually get around to reading them and using what I've written but I do tend to reproduce the same thoughts later. So the main value of notebooks may be what writing things down leaves in your head.People trying to be cool will find themselves at a disadvantage when collecting surprises. To be surprised is to be mistaken. And the essence of cool as any fourteen year old could tell you is nil admirari. When you're mistaken don't dwell on it just act like nothing's wrong and maybe no one will notice.One of the keys to coolness is to avoid situations where inexperience may make you look foolish. If you want to find surprises you should do the opposite. Study lots of different things because some of the most interesting surprises are unexpected connections between different fields. For example jam bacon pickles and cheese which are among the most pleasing of foods were all originally intended as methods of preservation. And so were books and paintings.Whatever you study include history but social and economic history not political history. History seems to me so important that it's misleading to treat it as a mere field of study. Another way to describe it is all the data we have so far.Among other things studying history gives one confidence that there are good ideas waiting to be discovered right under our noses. Swords evolved during the Bronze Age out of daggers which (like their flint predecessors) had a hilt separate from the blade. Because swords are longer the hilts kept breaking off. But it took five hundred years before someone thought of casting hilt and blade as one piece.DisobedienceAbove all make a habit of paying attention to things you're not supposed to either because they're "inappropriate " or not important or not what you're supposed to be working on. If you're curious about something trust your instincts. Follow the threads that attract your attention. If there's something you're really interested in you'll find they have an uncanny way of leading back to it anyway just as the conversation of people who are especially proud of something always tends to lead back to it.For example I've always been fascinated by comb overs especially the extreme sort that make a man look as if he's wearing a beret made of his own hair. Surely this is a lowly sort of thing to be interested in the sort of superficial quizzing best left to teenage girls. And yet there is something underneath. The key question I realized is how does the comber over not see how odd he looks And the answer is that he got to look that way incrementally. What began as combing his hair a little carefully over a thin patch has gradually over 20 years grown into a monstrosity. Gradualness is very powerful. And that power can be used for constructive purposes too: just as you can trick yourself into looking like a freak you can trick yourself into creating something so grand that you would never have dared to plan such a thing. Indeed this is just how most good software gets created. You start by writing a stripped down kernel (how hard can it be ) and gradually it grows into a complete operating system. Hence the next leap: could you do the same thing in painting or in a novel See what you can extract from a frivolous question If there's one piece of advice I would give about writing essays it would be: don't do as you're told. Don't believe what you're supposed to. Don't write the essay readers expect one learns nothing from what one expects. And don't write the way they taught you to in school.The most important sort of disobedience is to write essays at all. Fortunately this sort of disobedience shows signs of becoming rampant. It used to be that only a tiny number of officially approved writers were allowed to write essays. Magazines published few of them and judged them less by what they said than who wrote them a magazine might publish a story by an unknown writer if it was good enough but if they published an essay on x it had to be by someone who was at least forty and whose job title had x in it. Which is a problem because there are a lot of things insiders can't say precisely because they're insiders.The Internet is changing that. Anyone can publish an essay on the Web and it gets judged as any writing should by what it says not who wrote it. Who are you to write about x You are whatever you wrote.Popular magazines made the period between the spread of literacy and the arrival of TV the golden age of the short story. The Web may well make this the golden age of the essay. And that's certainly not something I realized when I started writing this.Notes 1 I'm thinking of Oresme (c. 1323 82). But it's hard to pick a date because there was a sudden drop off in scholarship just as Europeans finished assimilating classical science. The cause may have been the plague of 1347 the trend in scientific progress matches the population curve. 2 Parker William R. "Where Do College English Departments Come From " College English 28 (1966 67) pp. 339 351. Reprinted in Gray Donald J. (ed). The Department of English at Indiana University Bloomington 1868 1970. Indiana University Publications.Daniels Robert V. The University of Vermont: The First Two Hundred Years. University of Vermont 1991.Mueller Friedrich M. Letter to the Pall Mall Gazette. 1886 87. Reprinted in Bacon Alan (ed). The Nineteenth Century History of English Studies. Ashgate 1998. 3 I'm compressing the story a bit. At first literature took a back seat to philology which (a) seemed more serious and (b) was popular in Germany where many of the leading scholars of that generation had been trained.In some cases the writing teachers were transformed in situ into English professors. Francis James Child who had been Boylston Professor of Rhetoric at Harvard since 1851 became in 1876 the university's first professor of English. 4 Parker op. cit. p. 25. 5 The undergraduate curriculum or trivium (whence "trivial") consisted of Latin grammar rhetoric and logic. Candidates for masters' degrees went on to study the quadrivium of arithmetic geometry music and astronomy. Together these were the seven liberal arts.The study of rhetoric was inherited directly from Rome where it was considered the most important subject. It would not be far from the truth to say that education in the classical world meant training landowners' sons to speak well enough to defend their interests in political and legal disputes. 6 Trevor Blackwell points out that this isn't strictly true because the outside edges of curves erode faster. Thanks to Ken Anderson Trevor Blackwell Sarah Harlin Jessica Livingston Jackie McDonough and Robert Morris for reading drafts of this.
(Originally this essay began with a discussion of filtering. An expanded version of that discussion now exists on its own as So Far So Good.) We may be able to improve the accuracy of Bayesian spam filters by having them follow links to see what's waiting at the other end. Richard Jowsey of death2spam now does this in borderline cases and reports that it works well.Why only do it in borderline cases And why only do it once As I mentioned in Will Filters Kill Spam following all the urls in a spam would have an amusing side effect. If popular email clients did this in order to filter spam the spammer's servers would take a serious pounding. The more I think about this the better an idea it seems. This isn't just amusing it would be hard to imagine a more perfectly targeted counterattack on spammers.So I'd like to suggest an additional feature to those working on spam filters: a "punish" mode which if turned on would spider every url in a suspected spam n times where n could be set by the user. 1 As many people have noted one of the problems with the current email system is that it's too passive. It does whatever you tell it. So far all the suggestions for fixing the problem seem to involve new protocols. This one wouldn't.If widely used auto retrieving spam filters would make the email system rebound. The huge volume of the spam which has so far worked in the spammer's favor would now work against him like a branch snapping back in his face. Auto retrieving spam filters would drive the spammer's costs up and his sales down: his bandwidth usage would go through the roof and his servers would grind to a halt under the load which would make them unavailable to the people who would have responded to the spam.Pump out a million emails an hour get a million hits an hour on your servers. We would want to ensure that this is only done to suspected spams. As a rule any url sent to millions of people is likely to be a spam url so submitting every http request in every email would work fine nearly all the time. But there are a few cases where this isn't true: the urls at the bottom of mails sent from free email services like Yahoo Mail and Hotmail for example.To protect such sites and to prevent abuse auto retrieval should be combined with blacklists of spamvertised sites. Only sites on a blacklist would get crawled and sites would be blacklisted only after being inspected by humans. The lifetime of a spam must be several hours at least so it should be easy to update such a list in time to interfere with a spam promoting a new site. 2 High volume auto retrieval would only be practical for users on high bandwidth connections but there are enough of those to cause spammers serious trouble. Indeed this solution neatly mirrors the problem. The problem with spam is that in order to reach a few gullible people the spammer sends mail to everyone. The non gullible recipients are merely collateral damage. But the non gullible majority won't stop getting spam until they can stop (or threaten to stop) the gullible from responding to it. Auto retrieving spam filters offer them a way to do this.Would that kill spam Not quite. The biggest spammers could probably protect their servers against auto retrieving filters. However the easiest and cheapest way for them to do it would be to include working unsubscribe links in their mails. And this would be a necessity for smaller fry and for "legitimate" sites that hired spammers to promote them. So if auto retrieving filters became widespread they'd become auto unsubscribing filters.In this scenario spam would like OS crashes viruses and popups become one of those plagues that only afflict people who don't bother to use the right software. Notes 1 Auto retrieving filters will have to follow redirects and should in some cases (e.g. a page that just says "click here") follow more than one level of links. Make sure too that the http requests are indistinguishable from those of popular Web browsers including the order and referrer.If the response doesn't come back within x amount of time default to some fairly high spam probability.Instead of making n constant it might be a good idea to make it a function of the number of spams that have been seen mentioning the site. This would add a further level of protection against abuse and accidents. 2 The original version of this article used the term "whitelist" instead of "blacklist". Though they were to work like blacklists I preferred to call them whitelists because it might make them less vulnerable to legal attack. This just seems to have confused readers though.There should probably be multiple blacklists. A single point of failure would be vulnerable both to attack and abuse.details of this scheme. I can't claim to be certain it will work. (Who could till it has been tried in practice ) Fortunately unlike solutions that require new protocols this one can be tested on a subset of the problem. Why not try using FFBs on say domains that begin with A If spammers start to avoid such domains we'll know we're winning and we can roll down the rest of the alphabet one letter at a time. Thanks to Brian Burton Bill Yerazunis Dan Giffin Eric Raymond and Richard Jowsey for reading drafts of this.
 Kevin Kelleher suggested an interesting way to compare programming languages: to describe each in terms of the problem it fixes. The surprising thing is how many and how well languages can be described this way. Algol: Assembly language is too low level.Pascal: Algol doesn't have enough data types.Modula: Pascal is too wimpy for systems programming.Python: Modula 3 is scary. Simula: Algol isn't good enough at simulations.Smalltalk: Not everything in Simula is an object.Fortran: Assembly language is too low level.Cobol: Fortran is scary.PL 1: Fortran doesn't have enough data types.Ada: Every existing language is missing something.Basic: Fortran is scary.APL: Fortran isn't good enough at manipulating arrays.J: APL requires its own character set.C: Assembly language is too low level.C : C is too low level.Java: C is a kludge. And Microsoft is going to crush us.C : Java is controlled by Sun. Javascript: Java is scary. Lisp: Turing Machines are an awkward way to describe computation.Scheme: MacLisp is a kludge.T: Scheme has no libraries.Common Lisp: There are too many dialects of Lisp.Dylan: Scheme has no libraries and Lisp syntax is scary.Curl: Lisp syntax is scary and XML is redundant.Arc: Scheme has no libraries and both could be denser. Perl: Shell scripts awk sed are not enough like programming languages.Python: Perl is a kludge.Ruby: Perl is a kludge and Lisp syntax is scary.Prolog: Programming is not enough like logic. What I'm looking for is not exactly what motivated the language designer (Smalltalk was originally intended for children) but what niche the language first lodged in. What was the appeal of the language to its first users 
(Foreword to Jessica Livingston's Founders at Work.)Apparently sprinters reach their highest speed right out of the blocks and spend the rest of the race slowing down. The winners slow down the least. It's that way with most startups too. The earliest phase is usually the most productive. That's when they have the really big ideas. Imagine what Apple was like when 100 of its employees were either Steve Jobs or Steve Wozniak.The striking thing about this phase is that it's completely different from most people's idea of what business is like. If you looked in people's heads (or stock photo collections) for images representing "business " you'd get images of people dressed up in suits groups sitting around conference tables looking serious Powerpoint presentations people producing thick reports for one another to read. Early stage startups are the exact opposite of this. And yet they're probably the most productive part of the whole economy.Why the disconnect I think there's a general principle at work here: the less energy people expend on performance the more they expend on appearances to compensate. More often than not the energy they expend on seeming impressive makes their actual performance worse. A few years ago I read an article in which a car magazine modified the "sports" model of some production car to get the fastest possible standing quarter mile. You know how they did it They cut off all the crap the manufacturer had bolted onto the car to make it look fast.Business is broken the same way that car was. The effort that goes into looking productive is not merely wasted but actually makes organizations less productive. Suits for example. Suits do not help people to think better. I bet most executives at big companies do their best thinking when they wake up on Sunday morning and go downstairs in their bathrobe to make a cup of coffee. That's when you have ideas. Just imagine what a company would be like if people could think that well at work. People do in startups at least some of the time. (Half the time you're in a panic because your servers are on fire but the other half you're thinking as deeply as most people only get to sitting alone on a Sunday morning.)Ditto for most of the other differences between startups and what passes for productivity in big companies. And yet conventional ideas of professionalism have such an iron grip on our minds that even startup founders are affected by them. In our startup when outsiders came to visit we tried hard to seem "professional." We'd clean up our offices wear better clothes try to arrange that a lot of people were there during conventional office hours. In fact programming didn't get done by well dressed people at clean desks during office hours. It got done by badly dressed people (I was notorious for programmming wearing just a towel) in offices strewn with junk at 2 in the morning. But no visitor would understand that. Not even investors who are supposed to be able to recognize real productivity when they see it. Even we were affected by the conventional wisdom. We thought of ourselves as impostors succeeding despite being totally unprofessional. It was as if we'd created a Formula 1 car but felt sheepish because it didn't look like a car was supposed to look.In the car world there are at least some people who know that a high performance car looks like a Formula 1 racecar not a sedan with giant rims and a fake spoiler bolted to the trunk. Why not in business Probably because startups are so small. The really dramatic growth happens when a startup only has three or four people so only three or four people see that whereas tens of thousands see business as it's practiced by Boeing or Philip Morris.This book can help fix that problem by showing everyone what till now only a handful people got to see: what happens in the first year of a startup. This is what real productivity looks like. This is the Formula 1 racecar. It looks weird but it goes fast.Of course big companies won't be able to do everything these startups do. In big companies there's always going to be more politics and less scope for individual decisions. But seeing what startups are really like will at least show other organizations what to aim for. The time may soon be coming when instead of startups trying to seem more corporate corporations will try to seem more like startups. That would be a good thing. Japanese Translation 
 Watch how this essay was written on Etherpad. 
When people care enough about something to do it well those who do it best tend to be far better than everyone else. There's a huge gap between Leonardo and second rate contemporaries like Borgognone. You see the same gap between Raymond Chandler and the average writer of detective novels. A top ranked professional chess player could play ten thousand games against an ordinary club player without losing once.Like chess or painting or writing novels making money is a very specialized skill. But for some reason we treat this skill differently. No one complains when a few people surpass all the rest at playing chess or writing novels but when a few people make more money than the rest we get editorials saying this is wrong.Why The pattern of variation seems no different than for any other skill. What causes people to react so strongly when the skill is making money I think there are three reasons we treat making money as different: the misleading model of wealth we learn as children the disreputable way in which till recently most fortunes were accumulated and the worry that great variations in income are somehow bad for society. As far as I can tell the first is mistaken the second outdated and the third empirically false. Could it be that in a modern democracy variation in income is actually a sign of health The Daddy Model of WealthWhen I was five I thought electricity was created by electric sockets. I didn't realize there were power plants out there generating it. Likewise it doesn't occur to most kids that wealth is something that has to be generated. It seems to be something that flows from parents.Because of the circumstances in which they encounter it children tend to misunderstand wealth. They confuse it with money. They think that there is a fixed amount of it. And they think of it as something that's distributed by authorities (and so should be distributed equally) rather than something that has to be created (and might be created unequally).In fact wealth is not money. Money is just a convenient way of trading one form of wealth for another. Wealth is the underlying stuff mdash the goods and services we buy. When you travel to a rich or poor country you don't have to look at people's bank accounts to tell which kind you're in. You can see wealth mdash in buildings and streets in the clothes and the health of the people.Where does wealth come from People make it. This was easier to grasp when most people lived on farms and made many of the things they wanted with their own hands. Then you could see in the house the herds and the granary the wealth that each family created. It was obvious then too that the wealth of the world was not a fixed quantity that had to be shared out like slices of a pie. If you wanted more wealth you could make it.This is just as true today though few of us create wealth directly for ourselves (except for a few vestigial domestic tasks). Mostly we create wealth for other people in exchange for money which we then trade for the forms of wealth we want. 1 Because kids are unable to create wealth whatever they have has to be given to them. And when wealth is something you're given then of course it seems that it should be distributed equally. 2 As in most families it is. The kids see to that. "Unfair " they cry when one sibling gets more than another.In the real world you can't keep living off your parents. If you want something you either have to make it or do something of equivalent value for someone else in order to get them to give you enough money to buy it. In the real world wealth is (except for a few specialists like thieves and speculators) something you have to create not something that's distributed by Daddy. And since the ability and desire to create it vary from person to person it's not made equally.You get paid by doing or making something people want and those who make more money are often simply better at doing what people want. Top actors make a lot more money than B list actors. The B list actors might be almost as charismatic but when people go to the theater and look at the list of movies playing they want that extra oomph that the big stars have.Doing what people want is not the only way to get money of course. You could also rob banks or solicit bribes or establish a monopoly. Such tricks account for some variation in wealth and indeed for some of the biggest individual fortunes but they are not the root cause of variation in income. The root cause of variation in income as Occam's Razor implies is the same as the root cause of variation in every other human skill.In the United States the CEO of a large public company makes about 100 times as much as the average person. 3 Basketball players make about 128 times as much and baseball players 72 times as much. Editorials quote this kind of statistic with horror. But I have no trouble imagining that one person could be 100 times as productive as another. In ancient Rome the price of slaves varied by a factor of 50 depending on their skills. 4 And that's without considering motivation or the extra leverage in productivity that you can get from modern technology.Editorials about athletes' or CEOs' salaries remind me of early Christian writers arguing from first principles about whether the Earth was round when they could just walk outside and check. 5 How much someone's work is worth is not a policy question. It's something the market already determines."Are they really worth 100 of us " editorialists ask. Depends on what you mean by worth. If you mean worth in the sense of what people will pay for their skills the answer is yes apparently.A few CEOs' incomes reflect some kind of wrongdoing. But are there not others whose incomes really do reflect the wealth they generate Steve Jobs saved a company that was in a terminal decline. And not merely in the way a turnaround specialist does by cutting costs he had to decide what Apple's next products should be. Few others could have done it. And regardless of the case with CEOs it's hard to see how anyone could argue that the salaries of professional basketball players don't reflect supply and demand.It may seem unlikely in principle that one individual could really generate so much more wealth than another. The key to this mystery is to revisit that question are they really worth 100 of us Would a basketball team trade one of their players for 100 random people What would Apple's next product look like if you replaced Steve Jobs with a committee of 100 random people 6 These things don't scale linearly. Perhaps the CEO or the professional athlete has only ten times (whatever that means) the skill and determination of an ordinary person. But it makes all the difference that it's concentrated in one individual.When we say that one kind of work is overpaid and another underpaid what are we really saying In a free market prices are determined by what buyers want. People like baseball more than poetry so baseball players make more than poets. To say that a certain kind of work is underpaid is thus identical with saying that people want the wrong things.Well of course people want the wrong things. It seems odd to be surprised by that. And it seems even odder to say that it's unjust that certain kinds of work are underpaid. 7 Then you're saying that it's unjust that people want the wrong things. It's lamentable that people prefer reality TV and corndogs to Shakespeare and steamed vegetables but unjust That seems like saying that blue is heavy or that up is circular.The appearance of the word "unjust" here is the unmistakable spectral signature of the Daddy Model. Why else would this idea occur in this odd context Whereas if the speaker were still operating on the Daddy Model and saw wealth as something that flowed from a common source and had to be shared out rather than something generated by doing what other people wanted this is exactly what you'd get on noticing that some people made much more than others.When we talk about "unequal distribution of income " we should also ask where does that income come from 8 Who made the wealth it represents Because to the extent that income varies simply according to how much wealth people create the distribution may be unequal but it's hardly unjust.Stealing ItThe second reason we tend to find great disparities of wealth alarming is that for most of human history the usual way to accumulate a fortune was to steal it: in pastoral societies by cattle raiding in agricultural societies by appropriating others' estates in times of war and taxing them in times of peace.In conflicts those on the winning side would receive the estates confiscated from the losers. In England in the 1060s when William the Conqueror distributed the estates of the defeated Anglo Saxon nobles to his followers the conflict was military. By the 1530s when Henry VIII distributed the estates of the monasteries to his followers it was mostly political. 9 But the principle was the same. Indeed the same principle is at work now in Zimbabwe.In more organized societies like China the ruler and his officials used taxation instead of confiscation. But here too we see the same principle: the way to get rich was not to create wealth but to serve a ruler powerful enough to appropriate it.This started to change in Europe with the rise of the middle class. Now we think of the middle class as people who are neither rich nor poor but originally they were a distinct group. In a feudal society there are just two classes: a warrior aristocracy and the serfs who work their estates. The middle class were a new third group who lived in towns and supported themselves by manufacturing and trade.Starting in the tenth and eleventh centuries petty nobles and former serfs banded together in towns that gradually became powerful enough to ignore the local feudal lords. 10 Like serfs the middle class made a living largely by creating wealth. (In port cities like Genoa and Pisa they also engaged in piracy.) But unlike serfs they had an incentive to create a lot of it. Any wealth a serf created belonged to his master. There was not much point in making more than you could hide. Whereas the independence of the townsmen allowed them to keep whatever wealth they created.Once it became possible to get rich by creating wealth society as a whole started to get richer very rapidly. Nearly everything we have was created by the middle class. Indeed the other two classes have effectively disappeared in industrial societies and their names been given to either end of the middle class. (In the original sense of the word Bill Gates is middle class.)But it was not till the Industrial Revolution that wealth creation definitively replaced corruption as the best way to get rich. In England at least corruption only became unfashionable (and in fact only started to be called "corruption") when there started to be other faster ways to get rich.Seventeenth century England was much like the third world today in that government office was a recognized route to wealth. The great fortunes of that time still derived more from what we would now call corruption than from commerce. 11 By the nineteenth century that had changed. There continued to be bribes as there still are everywhere but politics had by then been left to men who were driven more by vanity than greed. Technology had made it possible to create wealth faster than you could steal it. The prototypical rich man of the nineteenth century was not a courtier but an industrialist.With the rise of the middle class wealth stopped being a zero sum game. Jobs and Wozniak didn't have to make us poor to make themselves rich. Quite the opposite: they created things that made our lives materially richer. They had to or we wouldn't have paid for them.But since for most of the world's history the main route to wealth was to steal it we tend to be suspicious of rich people. Idealistic undergraduates find their unconsciously preserved child's model of wealth confirmed by eminent writers of the past. It is a case of the mistaken meeting the outdated."Behind every great fortune there is a crime " Balzac wrote. Except he didn't. What he actually said was that a great fortune with no apparent cause was probably due to a crime well enough executed that it had been forgotten. If we were talking about Europe in 1000 or most of the third world today the standard misquotation would be spot on. But Balzac lived in nineteenth century France where the Industrial Revolution was well advanced. He knew you could make a fortune without stealing it. After all he did himself as a popular novelist. 12 Only a few countries (by no coincidence the richest ones) have reached this stage. In most corruption still has the upper hand. In most the fastest way to get wealth is by stealing it. And so when we see increasing differences in income in a rich country there is a tendency to worry that it's sliding back toward becoming another Venezuela. I think the opposite is happening. I think you're seeing a country a full step ahead of Venezuela.The Lever of TechnologyWill technology increase the gap between rich and poor It will certainly increase the gap between the productive and the unproductive. That's the whole point of technology. With a tractor an energetic farmer could plow six times as much land in a day as he could with a team of horses. But only if he mastered a new kind of farming.I've seen the lever of technology grow visibly in my own time. In high school I made money by mowing lawns and scooping ice cream at Baskin Robbins. This was the only kind of work available at the time. Now high school kids could write software or design web sites. But only some of them will the rest will still be scooping ice cream.I remember very vividly when in 1985 improved technology made it possible for me to buy a computer of my own. Within months I was using it to make money as a freelance programmer. A few years before I couldn't have done this. A few years before there was no such thing as a freelance programmer. But Apple created wealth in the form of powerful inexpensive computers and programmers immediately set to work using it to create more.As this example suggests the rate at which technology increases our productive capacity is probably polynomial rather than linear. So we should expect to see ever increasing variation in individual productivity as time goes on. Will that increase the gap between rich and the poor Depends which gap you mean.Technology should increase the gap in income but it seems to decrease other gaps. A hundred years ago the rich led a different kind of life from ordinary people. They lived in houses full of servants wore elaborately uncomfortable clothes and travelled about in carriages drawn by teams of horses which themselves required their own houses and servants. Now thanks to technology the rich live more like the average person.Cars are a good example of why. It's possible to buy expensive handmade cars that cost hundreds of thousands of dollars. But there is not much point. Companies make more money by building a large number of ordinary cars than a small number of expensive ones. So a company making a mass produced car can afford to spend a lot more on its design. If you buy a custom made car something will always be breaking. The only point of buying one now is to advertise that you can.Or consider watches. Fifty years ago by spending a lot of money on a watch you could get better performance. When watches had mechanical movements expensive watches kept better time. Not any more. Since the invention of the quartz movement an ordinary Timex is more accurate than a Patek Philippe costing hundreds of thousands of dollars. 13 Indeed as with expensive cars if you're determined to spend a lot of money on a watch you have to put up with some inconvenience to do it: as well as keeping worse time mechanical watches have to be wound.The only thing technology can't cheapen is brand. Which is precisely why we hear ever more about it. Brand is the residue left as the substantive differences between rich and poor evaporate. But what label you have on your stuff is a much smaller matter than having it versus not having it. In 1900 if you kept a carriage no one asked what year or brand it was. If you had one you were rich. And if you weren't rich you took the omnibus or walked. Now even the poorest Americans drive cars and it is only because we're so well trained by advertising that we can even recognize the especially expensive ones. 14 The same pattern has played out in industry after industry. If there is enough demand for something technology will make it cheap enough to sell in large volumes and the mass produced versions will be if not better at least more convenient. 15 And there is nothing the rich like more than convenience. The rich people I know drive the same cars wear the same clothes have the same kind of furniture and eat the same foods as my other friends. Their houses are in different neighborhoods or if in the same neighborhood are different sizes but within them life is similar. The houses are made using the same construction techniques and contain much the same objects. It's inconvenient to do something expensive and custom.The rich spend their time more like everyone else too. Bertie Wooster seems long gone. Now most people who are rich enough not to work do anyway. It's not just social pressure that makes them idleness is lonely and demoralizing.Nor do we have the social distinctions there were a hundred years ago. The novels and etiquette manuals of that period read now like descriptions of some strange tribal society. "With respect to the continuance of friendships..." hints Mrs. Beeton's Book of Household Management (1880) "it may be found necessary in some cases for a mistress to relinquish on assuming the responsibility of a household many of those commenced in the earlier part of her life." A woman who married a rich man was expected to drop friends who didn't. You'd seem a barbarian if you behaved that way today. You'd also have a very boring life. People still tend to segregate themselves somewhat but much more on the basis of education than wealth. 16 Materially and socially technology seems to be decreasing the gap between the rich and the poor not increasing it. If Lenin walked around the offices of a company like Yahoo or Intel or Cisco he'd think communism had won. Everyone would be wearing the same clothes have the same kind of office (or rather cubicle) with the same furnishings and address one another by their first names instead of by honorifics. Everything would seem exactly as he'd predicted until he looked at their bank accounts. Oops.Is it a problem if technology increases that gap It doesn't seem to be so far. As it increases the gap in income it seems to decrease most other gaps.Alternative to an AxiomOne often hears a policy criticized on the grounds that it would increase the income gap between rich and poor. As if it were an axiom that this would be bad. It might be true that increased variation in income would be bad but I don't see how we can say it's axiomatic.Indeed it may even be false in industrial democracies. In a society of serfs and warlords certainly variation in income is a sign of an underlying problem. But serfdom is not the only cause of variation in income. A 747 pilot doesn't make 40 times as much as a checkout clerk because he is a warlord who somehow holds her in thrall. His skills are simply much more valuable.I'd like to propose an alternative idea: that in a modern society increasing variation in income is a sign of health. Technology seems to increase the variation in productivity at faster than linear rates. If we don't see corresponding variation in income there are three possible explanations: (a) that technical innovation has stopped (b) that the people who would create the most wealth aren't doing it or (c) that they aren't getting paid for it.I think we can safely say that (a) and (b) would be bad. If you disagree try living for a year using only the resources available to the average Frankish nobleman in 800 and report back to us. (I'll be generous and not send you back to the stone age.)The only option if you're going to have an increasingly prosperous society without increasing variation in income seems to be (c) that people will create a lot of wealth without being paid for it. That Jobs and Wozniak for example will cheerfully work 20 hour days to produce the Apple computer for a society that allows them after taxes to keep just enough of their income to match what they would have made working 9 to 5 at a big company.Will people create wealth if they can't get paid for it Only if it's fun. People will write operating systems for free. But they won't install them or take support calls or train customers to use them. And at least 90 of the work that even the highest tech companies do is of this second unedifying kind.All the unfun kinds of wealth creation slow dramatically in a society that confiscates private fortunes. We can confirm this empirically. Suppose you hear a strange noise that you think may be due to a nearby fan. You turn the fan off and the noise stops. You turn the fan back on and the noise starts again. Off quiet. On noise. In the absence of other information it would seem the noise is caused by the fan.At various times and places in history whether you could accumulate a fortune by creating wealth has been turned on and off. Northern Italy in 800 off (warlords would steal it). Northern Italy in 1100 on. Central France in 1100 off (still feudal). England in 1800 on. England in 1974 off (98 tax on investment income). United States in 1974 on. We've even had a twin study: West Germany on East Germany off. In every case the creation of wealth seems to appear and disappear like the noise of a fan as you switch on and off the prospect of keeping it.There is some momentum involved. It probably takes at least a generation to turn people into East Germans (luckily for England). But if it were merely a fan we were studying without all the extra baggage that comes from the controversial topic of wealth no one would have any doubt that the fan was causing the noise.If you suppress variations in income whether by stealing private fortunes as feudal rulers used to do or by taxing them away as some modern governments have done the result always seems to be the same. Society as a whole ends up poorer.If I had a choice of living in a society where I was materially much better off than I am now but was among the poorest or in one where I was the richest but much worse off than I am now I'd take the first option. If I had children it would arguably be immoral not to. It's absolute poverty you want to avoid not relative poverty. If as the evidence so far implies you have to have one or the other in your society take relative poverty.You need rich people in your society not so much because in spending their money they create jobs but because of what they have to do to get rich. I'm not talking about the trickle down effect here. I'm not saying that if you let Henry Ford get rich he'll hire you as a waiter at his next party. I'm saying that he'll make you a tractor to replace your horse.Notes 1 Part of the reason this subject is so contentious is that some of those most vocal on the subject of wealth mdash university students heirs professors politicians and journalists mdash have the least experience creating it. (This phenomenon will be familiar to anyone who has overheard conversations about sports in a bar.)Students are mostly still on the parental dole and have not stopped to think about where that money comes from. Heirs will be on the parental dole for life. Professors and politicians live within socialist eddies of the economy at one remove from the creation of wealth and are paid a flat rate regardless of how hard they work. And journalists as part of their professional code segregate themselves from the revenue collecting half of the businesses they work for (the ad sales department). Many of these people never come face to face with the fact that the money they receive represents wealth mdash wealth that except in the case of journalists someone else created earlier. They live in a world in which income is doled out by a central authority according to some abstract notion of fairness (or randomly in the case of heirs) rather than given by other people in return for something they wanted so it may seem to them unfair that things don't work the same in the rest of the economy.(Some professors do create a great deal of wealth for society. But the money they're paid isn't a quid pro quo. It's more in the nature of an investment.) 2 When one reads about the origins of the Fabian Society it sounds like something cooked up by the high minded Edwardian child heroes of Edith Nesbit's The Wouldbegoods. 3 According to a study by the Corporate Library the median total compensation including salary bonus stock grants and the exercise of stock options of S P 500 CEOs in 2002 was 3.65 million. According to Sports Illustrated the average NBA player's salary during the 2002 03 season was 4.54 million and the average major league baseball player's salary at the start of the 2003 season was 2.56 million. According to the Bureau of Labor Statistics the mean annual wage in the US in 2002 was 35 560. 4 In the early empire the price of an ordinary adult slave seems to have been about 2 000 sestertii (e.g. Horace Sat. ii.7.43). A servant girl cost 600 (Martial vi.66) while Columella (iii.3.8) says that a skilled vine dresser was worth 8 000. A doctor P. Decimus Eros Merula paid 50 000 sestertii for his freedom (Dessau Inscriptiones 7812). Seneca (Ep. xxvii.7) reports that one Calvisius Sabinus paid 100 000 sestertii apiece for slaves learned in the Greek classics. Pliny (Hist. Nat. vii.39) says that the highest price paid for a slave up to his time was 700 000 sestertii for the linguist (and presumably teacher) Daphnis but that this had since been exceeded by actors buying their own freedom.Classical Athens saw a similar variation in prices. An ordinary laborer was worth about 125 to 150 drachmae. Xenophon (Mem. ii.5) mentions prices ranging from 50 to 6 000 drachmae (for the manager of a silver mine).For more on the economics of ancient slavery see:Jones A. H. M. "Slavery in the Ancient World " Economic History Review 2:9 (1956) 185 199 reprinted in Finley M. I. (ed.) Slavery in Classical Antiquity Heffer 1964. 5 Eratosthenes (276 mdash 195 BC) used shadow lengths in different cities to estimate the Earth's circumference. He was off by only about 2 . 6 No and Windows respectively. 7 One of the biggest divergences between the Daddy Model and reality is the valuation of hard work. In the Daddy Model hard work is in itself deserving. In reality wealth is measured by what one delivers not how much effort it costs. If I paint someone's house the owner shouldn't pay me extra for doing it with a toothbrush.It will seem to someone still implicitly operating on the Daddy Model that it is unfair when someone works hard and doesn't get paid much. To help clarify the matter get rid of everyone else and put our worker on a desert island hunting and gathering fruit. If he's bad at it he'll work very hard and not end up with much food. Is this unfair Who is being unfair to him 8 Part of the reason for the tenacity of the Daddy Model may be the dual meaning of "distribution." When economists talk about "distribution of income " they mean statistical distribution. But when you use the phrase frequently you can't help associating it with the other sense of the word (as in e.g. "distribution of alms") and thereby subconsciously seeing wealth as something that flows from some central tap. The word "regressive" as applied to tax rates has a similar effect at least on me how can anything regressive be good 9 "From the beginning of the reign Thomas Lord Roos was an assiduous courtier of the young Henry VIII and was soon to reap the rewards. In 1525 he was made a Knight of the Garter and given the Earldom of Rutland. In the thirties his support of the breach with Rome his zeal in crushing the Pilgrimage of Grace and his readiness to vote the death penalty in the succession of spectacular treason trials that punctuated Henry's erratic matrimonial progress made him an obvious candidate for grants of monastic property."Stone Lawrence Family and Fortune: Studies in Aristocratic Finance in the Sixteenth and Seventeenth Centuries Oxford University Press 1973 p. 166. 10 There is archaeological evidence for large settlements earlier but it's hard to say what was happening in them.Hodges Richard and David Whitehouse Mohammed Charlemagne and the Origins of Europe Cornell University Press 1983. 11 William Cecil and his son Robert were each in turn the most powerful minister of the crown and both used their position to amass fortunes among the largest of their times. Robert in particular took bribery to the point of treason. "As Secretary of State and the leading advisor to King James on foreign policy he was a special recipient of favour being offered large bribes by the Dutch not to make peace with Spain and large bribes by Spain to make peace." (Stone op. cit. p. 17.) 12 Though Balzac made a lot of money from writing he was notoriously improvident and was troubled by debts all his life. 13 A Timex will gain or lose about .5 seconds per day. The most accurate mechanical watch the Patek Philippe 10 Day Tourbillon is rated at 1.5 to 2 seconds. Its retail price is about 220 000. 14 If asked to choose which was more expensive a well preserved 1989 Lincoln Town Car ten passenger limousine ( 5 000) or a 2004 Mercedes S600 sedan ( 122 000) the average Edwardian might well guess wrong. 15 To say anything meaningful about income trends you have to talk about real income or income as measured in what it can buy. But the usual way of calculating real income ignores much of the growth in wealth over time because it depends on a consumer price index created by bolting end to end a series of numbers that are only locally accurate and that don't include the prices of new inventions until they become so common that their prices stabilize.So while we might think it was very much better to live in a world with antibiotics or air travel or an electric power grid than without real income statistics calculated in the usual way will prove to us that we are only slightly richer for having these things.Another approach would be to ask if you were going back to the year x in a time machine how much would you have to spend on trade goods to make your fortune For example if you were going back to 1970 it would certainly be less than 500 because the processing power you can get for 500 today would have been worth at least 150 million in 1970. The function goes asymptotic fairly quickly because for times over a hundred years or so you could get all you needed in present day trash. In 1800 an empty plastic drink bottle with a screw top would have seemed a miracle of workmanship. 16 Some will say this amounts to the same thing because the rich have better opportunities for education. That's a valid point. It is still possible to a degree to buy your kids' way into top colleges by sending them to private schools that in effect hack the college admissions process.According to a 2002 report by the National Center for Education Statistics about 1.7 of American kids attend private non sectarian schools. At Princeton 36 of the class of 2007 came from such schools. (Interestingly the number at Harvard is significantly lower about 28 .) Obviously this is a huge loophole. It does at least seem to be closing not widening.Perhaps the designers of admissions processes should take a lesson from the example of computer security and instead of just assuming that their system can't be hacked measure the degree to which it is.
To the popular press "hacker" means someone who breaks into computers. Among programmers it means a good programmer. But the two meanings are connected. To programmers "hacker" connotes mastery in the most literal sense: someone who can make a computer do what he wants mdash whether the computer wants to or not.To add to the confusion the noun "hack" also has two senses. It can be either a compliment or an insult. It's called a hack when you do something in an ugly way. But when you do something so clever that you somehow beat the system that's also called a hack. The word is used more often in the former than the latter sense probably because ugly solutions are more common than brilliant ones.Believe it or not the two senses of "hack" are also connected. Ugly and imaginative solutions have something in common: they both break the rules. And there is a gradual continuum between rule breaking that's merely ugly (using duct tape to attach something to your bike) and rule breaking that is brilliantly imaginative (discarding Euclidean space).Hacking predates computers. When he was working on the Manhattan Project Richard Feynman used to amuse himself by breaking into safes containing secret documents. This tradition continues today. When we were in grad school a hacker friend of mine who spent too much time around MIT had his own lock picking kit. (He now runs a hedge fund a not unrelated enterprise.)It is sometimes hard to explain to authorities why one would want to do such things. Another friend of mine once got in trouble with the government for breaking into computers. This had only recently been declared a crime and the FBI found that their usual investigative technique didn't work. Police investigation apparently begins with a motive. The usual motives are few: drugs money sex revenge. Intellectual curiosity was not one of the motives on the FBI's list. Indeed the whole concept seemed foreign to them.Those in authority tend to be annoyed by hackers' general attitude of disobedience. But that disobedience is a byproduct of the qualities that make them good programmers. They may laugh at the CEO when he talks in generic corporate newspeech but they also laugh at someone who tells them a certain problem can't be solved. Suppress one and you suppress the other.This attitude is sometimes affected. Sometimes young programmers notice the eccentricities of eminent hackers and decide to adopt some of their own in order to seem smarter. The fake version is not merely annoying the prickly attitude of these posers can actually slow the process of innovation.But even factoring in their annoying eccentricities the disobedient attitude of hackers is a net win. I wish its advantages were better understood.For example I suspect people in Hollywood are simply mystified by hackers' attitudes toward copyrights. They are a perennial topic of heated discussion on Slashdot. But why should people who program computers be so concerned about copyrights of all things Partly because some companies use mechanisms to prevent copying. Show any hacker a lock and his first thought is how to pick it. But there is a deeper reason that hackers are alarmed by measures like copyrights and patents. They see increasingly aggressive measures to protect "intellectual property" as a threat to the intellectual freedom they need to do their job. And they are right.It is by poking about inside current technology that hackers get ideas for the next generation. No thanks intellectual homeowners may say we don't need any outside help. But they're wrong. The next generation of computer technology has often mdash perhaps more often than not mdash been developed by outsiders.In 1977 there was no doubt some group within IBM developing what they expected to be the next generation of business computer. They were mistaken. The next generation of business computer was being developed on entirely different lines by two long haired guys called Steve in a garage in Los Altos. At about the same time the powers that be were cooperating to develop the official next generation operating system Multics. But two guys who thought Multics excessively complex went off and wrote their own. They gave it a name that was a joking reference to Multics: Unix.The latest intellectual property laws impose unprecedented restrictions on the sort of poking around that leads to new ideas. In the past a competitor might use patents to prevent you from selling a copy of something they made but they couldn't prevent you from taking one apart to see how it worked. The latest laws make this a crime. How are we to develop new technology if we can't study current technology to figure out how to improve it Ironically hackers have brought this on themselves. Computers are responsible for the problem. The control systems inside machines used to be physical: gears and levers and cams. Increasingly the brains (and thus the value) of products is in software. And by this I mean software in the general sense: i.e. data. A song on an LP is physically stamped into the plastic. A song on an iPod's disk is merely stored on it.Data is by definition easy to copy. And the Internet makes copies easy to distribute. So it is no wonder companies are afraid. But as so often happens fear has clouded their judgement. The government has responded with draconian laws to protect intellectual property. They probably mean well. But they may not realize that such laws will do more harm than good.Why are programmers so violently opposed to these laws If I were a legislator I'd be interested in this mystery mdash for the same reason that if I were a farmer and suddenly heard a lot of squawking coming from my hen house one night I'd want to go out and investigate. Hackers are not stupid and unanimity is very rare in this world. So if they're all squawking perhaps there is something amiss.Could it be that such laws though intended to protect America will actually harm it Think about it. There is something very American about Feynman breaking into safes during the Manhattan Project. It's hard to imagine the authorities having a sense of humor about such things over in Germany at that time. Maybe it's not a coincidence.Hackers are unruly. That is the essence of hacking. And it is also the essence of Americanness. It is no accident that Silicon Valley is in America and not France or Germany or England or Japan. In those countries people color inside the lines.I lived for a while in Florence. But after I'd been there a few months I realized that what I'd been unconsciously hoping to find there was back in the place I'd just left. The reason Florence is famous is that in 1450 it was New York. In 1450 it was filled with the kind of turbulent and ambitious people you find now in America. (So I went back to America.)It is greatly to America's advantage that it is a congenial atmosphere for the right sort of unruliness mdash that it is a home not just for the smart but for smart alecks. And hackers are invariably smart alecks. If we had a national holiday it would be April 1st. It says a great deal about our work that we use the same word for a brilliant or a horribly cheesy solution. When we cook one up we're not always 100 sure which kind it is. But as long as it has the right sort of wrongness that's a promising sign. It's odd that people think of programming as precise and methodical. Computers are precise and methodical. Hacking is something you do with a gleeful laugh.In our world some of the most characteristic solutions are not far removed from practical jokes. IBM was no doubt rather surprised by the consequences of the licensing deal for DOS just as the hypothetical "adversary" must be when Michael Rabin solves a problem by redefining it as one that's easier to solve.Smart alecks have to develop a keen sense of how much they can get away with. And lately hackers have sensed a change in the atmosphere. Lately hackerliness seems rather frowned upon.To hackers the recent contraction in civil liberties seems especially ominous. That must also mystify outsiders. Why should we care especially about civil liberties Why programmers more than dentists or salesmen or landscapers Let me put the case in terms a government official would appreciate. Civil liberties are not just an ornament or a quaint American tradition. Civil liberties make countries rich. If you made a graph of GNP per capita vs. civil liberties you'd notice a definite trend. Could civil liberties really be a cause rather than just an effect I think so. I think a society in which people can do and say what they want will also tend to be one in which the most efficient solutions win rather than those sponsored by the most influential people. Authoritarian countries become corrupt corrupt countries become poor and poor countries are weak. It seems to me there is a Laffer curve for government power just as for tax revenues. At least it seems likely enough that it would be stupid to try the experiment and find out. Unlike high tax rates you can't repeal totalitarianism if it turns out to be a mistake.This is why hackers worry. The government spying on people doesn't literally make programmers write worse code. It just leads eventually to a world in which bad ideas win. And because this is so important to hackers they're especially sensitive to it. They can sense totalitarianism approaching from a distance as animals can sense an approaching thunderstorm.It would be ironic if as hackers fear recent measures intended to protect national security and intellectual property turned out to be a missile aimed right at what makes America successful. But it would not be the first time that measures taken in an atmosphere of panic had the opposite of the intended effect.There is such a thing as Americanness. There's nothing like living abroad to teach you that. And if you want to know whether something will nurture or squash this quality it would be hard to find a better focus group than hackers because they come closest of any group I know to embodying it. Closer probably than the men running our government who for all their talk of patriotism remind me more of Richelieu or Mazarin than Thomas Jefferson or George Washington.When you read what the founding fathers had to say for themselves they sound more like hackers. "The spirit of resistance to government " Jefferson wrote "is so valuable on certain occasions that I wish it always to be kept alive."Imagine an American president saying that today. Like the remarks of an outspoken old grandmother the sayings of the founding fathers have embarrassed generations of their less confident successors. They remind us where we come from. They remind us that it is the people who break rules that are the source of America's wealth and power.Those in a position to impose rules naturally want them to be obeyed. But be careful what you ask for. You might get it.Thanks to Ken Anderson Trevor Blackwell Daniel Giffin Sarah Harlin Shiro Kawai Jessica Livingston Matz Jackie McDonough Robert Morris Eric Raymond Guido van Rossum David Weinberger and Steven Wolfram for reading drafts of this essay. (The image shows Steves Jobs and Wozniak with a "blue box." Photo by Margret Wozniak. Reproduced by permission of Steve Wozniak.)
(This essay is derived from a talk at the 2008 Startup School.)About a month after we started Y Combinator we came up with the phrase that became our motto: Make something people want. We've learned a lot since then but if I were choosing now that's still the one I'd pick.Another thing we tell founders is not to worry too much about the business model at least at first. Not because making money is unimportant but because it's so much easier than building something great.A couple weeks ago I realized that if you put those two ideas together you get something surprising. Make something people want. Don't worry too much about making money. What you've got is a description of a charity.When you get an unexpected result like this it could either be a bug or a new discovery. Either businesses aren't supposed to be like charities and we've proven by reductio ad absurdum that one or both of the principles we began with is false. Or we have a new idea.I suspect it's the latter because as soon as this thought occurred to me a whole bunch of other things fell into place.ExamplesFor example Craigslist. It's not a charity but they run it like one. And they're astoundingly successful. When you scan down the list of most popular web sites the number of employees at Craigslist looks like a misprint. Their revenues aren't as high as they could be but most startups would be happy to trade places with them.In Patrick O'Brian's novels his captains always try to get upwind of their opponents. If you're upwind you decide when and if to engage the other ship. Craigslist is effectively upwind of enormous revenues. They'd face some challenges if they wanted to make more but not the sort you face when you're tacking upwind trying to force a crappy product on ambivalent users by spending ten times as much on sales as on development. 1 I'm not saying startups should aim to end up like Craigslist. They're a product of unusual circumstances. But they're a good model for the early phases.Google looked a lot like a charity in the beginning. They didn't have ads for over a year. At year 1 Google was indistinguishable from a nonprofit. If a nonprofit or government organization had started a project to index the web Google at year 1 is the limit of what they'd have produced.Back when I was working on spam filters I thought it would be a good idea to have a web based email service with good spam filtering. I wasn't thinking of it as a company. I just wanted to keep people from getting spammed. But as I thought more about this project I realized it would probably have to be a company. It would cost something to run and it would be a pain to fund with grants and donations.That was a surprising realization. Companies often claim to be benevolent but it was surprising to realize there were purely benevolent projects that had to be embodied as companies to work.I didn't want to start another company so I didn't do it. But if someone had they'd probably be quite rich now. There was a window of about two years when spam was increasing rapidly but all the big email services had terrible filters. If someone had launched a new spam free mail service users would have flocked to it.Notice the pattern here From either direction we get to the same spot. If you start from successful startups you find they often behaved like nonprofits. And if you start from ideas for nonprofits you find they'd often make good startups.PowerHow wide is this territory Would all good nonprofits be good companies Possibly not. What makes Google so valuable is that their users have money. If you make people with money love you you can probably get some of it. But could you also base a successful startup on behaving like a nonprofit to people who don't have money Could you for example grow a successful startup out of curing an unfashionable but deadly disease like malaria I'm not sure but I suspect that if you pushed this idea you'd be surprised how far it would go. For example people who apply to Y Combinator don't generally have much money and yet we can profit by helping them because with our help they could make money. Maybe the situation is similar with malaria. Maybe an organization that helped lift its weight off a country could benefit from the resulting growth.I'm not proposing this is a serious idea. I don't know anything about malaria. But I've been kicking ideas around long enough to know when I come across a powerful one.One way to guess how far an idea extends is to ask yourself at what point you'd bet against it. The thought of betting against benevolence is alarming in the same way as saying that something is technically impossible. You're just asking to be made a fool of because these are such powerful forces. 2 For example initially I thought maybe this principle only applied to Internet startups. Obviously it worked for Google but what about Microsoft Surely Microsoft isn't benevolent But when I think back to the beginning they were. Compared to IBM they were like Robin Hood. When IBM introduced the PC they thought they were going to make money selling hardware at high prices. But by gaining control of the PC standard Microsoft opened up the market to any manufacturer. Hardware prices plummeted and lots of people got to have computers who couldn't otherwise have afforded them. It's the sort of thing you'd expect Google to do.Microsoft isn't so benevolent now. Now when one thinks of what Microsoft does to users all the verbs that come to mind begin with F. 3 And yet it doesn't seem to pay. Their stock price has been flat for years. Back when they were Robin Hood their stock price rose like Google's. Could there be a connection You can see how there would be. When you're small you can't bully customers so you have to charm them. Whereas when you're big you can maltreat them at will and you tend to because it's easier than satisfying them. You grow big by being nice but you can stay big by being mean.You get away with it till the underlying conditions change and then all your victims escape. So "Don't be evil" may be the most valuable thing Paul Buchheit made for Google because it may turn out to be an elixir of corporate youth. I'm sure they find it constraining but think how valuable it will be if it saves them from lapsing into the fatal laziness that afflicted Microsoft and IBM.The curious thing is this elixir is freely available to any other company. Anyone can adopt "Don't be evil." The catch is that people will hold you to it. So I don't think you're going to see record labels or tobacco companies using this discovery.MoraleThere's a lot of external evidence that benevolence works. But how does it work One advantage of investing in a large number of startups is that you get a lot of data about how they work. From what we've seen being good seems to help startups in three ways: it improves their morale it makes other people want to help them and above all it helps them be decisive.Morale is tremendously important to a startup mdash so important that morale alone is almost enough to determine success. Startups are often described as emotional roller coasters. One minute you're going to take over the world and the next you're doomed. The problem with feeling you're doomed is not just that it makes you unhappy but that it makes you stop working. So the downhills of the roller coaster are more of a self fulfilling prophecy than the uphills. If feeling you're going to succeed makes you work harder that probably improves your chances of succeeding but if feeling you're going to fail makes you stop working that practically guarantees you'll fail.Here's where benevolence comes in. If you feel you're really helping people you'll keep working even when it seems like your startup is doomed. Most of us have some amount of natural benevolence. The mere fact that someone needs you makes you want to help them. So if you start the kind of startup where users come back each day you've basically built yourself a giant tamagotchi. You've made something you need to take care of.Blogger is a famous example of a startup that went through really low lows and survived. At one point they ran out of money and everyone left. Evan Williams came in to work the next day and there was no one but him. What kept him going Partly that users needed him. He was hosting thousands of people's blogs. He couldn't just let the site die.There are many advantages of launching quickly but the most important may be that once you have users the tamagotchi effect kicks in. Once you have users to take care of you're forced to figure out what will make them happy and that's actually very valuable information.The added confidence that comes from trying to help people can also help you with investors. One of the founders of Chatterous told me recently that he and his cofounder had decided that this service was something the world needed so they were going to keep working on it no matter what even if they had to move back to Canada and live in their parents' basements.Once they realized this they stopped caring so much what investors thought about them. They still met with them but they weren't going to die if they didn't get their money. And you know what The investors got a lot more interested. They could sense that the Chatterouses were going to do this startup with or without them.If you're really committed and your startup is cheap to run you become very hard to kill. And practically all startups even the most successful come close to death at some point. So if doing good for people gives you a sense of mission that makes you harder to kill that alone more than compensates for whatever you lose by not choosing a more selfish project.HelpAnother advantage of being good is that it makes other people want to help you. This too seems to be an inborn trait in humans.One of the startups we've funded Octopart is currently locked in a classic battle of good versus evil. They're a search site for industrial components. A lot of people need to search for components and before Octopart there was no good way to do it. That it turned out was no coincidence.Octopart built the right way to search for components. Users like it and they've been growing rapidly. And yet for most of Octopart's life the biggest distributor Digi Key has been trying to force them take their prices off the site. Octopart is sending them customers for free and yet Digi Key is trying to make that traffic stop. Why Because their current business model depends on overcharging people who have incomplete information about prices. They don't want search to work.The Octoparts are the nicest guys in the world. They dropped out of the PhD program in physics at Berkeley to do this. They just wanted to fix a problem they encountered in their research. Imagine how much time you could save the world's engineers if they could do searches online. So when I hear that a big evil company is trying to stop them in order to keep search broken it makes me really want to help them. It makes me spend more time on the Octoparts than I do with most of the other startups we've funded. It just made me spend several minutes telling you how great they are. Why Because they're good guys and they're trying to help the world.If you're benevolent people will rally around you: investors customers other companies and potential employees. In the long term the most important may be the potential employees. I think everyone knows now that good hackers are much better than mediocre ones. If you can attract the best hackers to work for you as Google has you have a big advantage. And the very best hackers tend to be idealistic. They're not desperate for a job. They can work wherever they want. So most want to work on things that will make the world better.CompassBut the most important advantage of being good is that it acts as a compass. One of the hardest parts of doing a startup is that you have so many choices. There are just two or three of you and a thousand things you could do. How do you decide Here's the answer: Do whatever's best for your users. You can hold onto this like a rope in a hurricane and it will save you if anything can. Follow it and it will take you through everything you need to do.It's even the answer to questions that seem unrelated like how to convince investors to give you money. If you're a good salesman you could try to just talk them into it. But the more reliable route is to convince them through your users: if you make something users love enough to tell their friends you grow exponentially and that will convince any investor.Being good is a particularly useful strategy for making decisions in complex situations because it's stateless. It's like telling the truth. The trouble with lying is that you have to remember everything you've said in the past to make sure you don't contradict yourself. If you tell the truth you don't have to remember anything and that's a really useful property in domains where things happen fast.For example Y Combinator has now invested in 80 startups 57 of which are still alive. (The rest have died or merged or been acquired.) When you're trying to advise 57 startups it turns out you have to have a stateless algorithm. You can't have ulterior motives when you have 57 things going on at once because you can't remember them. So our rule is just to do whatever's best for the founders. Not because we're particularly benevolent but because it's the only algorithm that works on that scale.When you write something telling people to be good you seem to be claiming to be good yourself. So I want to say explicitly that I am not a particularly good person. When I was a kid I was firmly in the camp of bad. The way adults used the word good it seemed to be synonymous with quiet so I grew up very suspicious of it.You know how there are some people whose names come up in conversation and everyone says "He's such a great guy " People never say that about me. The best I get is "he means well." I am not claiming to be good. At best I speak good as a second language.So I'm not suggesting you be good in the usual sanctimonious way. I'm suggesting it because it works. It will work not just as a statement of "values " but as a guide to strategy and even a design spec for software. Don't just not be evil. Be good.Notes 1 Fifty years ago it would have seemed shocking for a public company not to pay dividends. Now many tech companies don't. The markets seem to have figured out how to value potential dividends. Maybe that isn't the last step in this evolution. Maybe markets will eventually get comfortable with potential earnings. (VCs already are and at least some of them consistently make money.)I realize this sounds like the stuff one used to hear about the "new economy" during the Bubble. Believe me I was not drinking that kool aid at the time. But I'm convinced there were some good ideas buried in Bubble thinking. For example it's ok to focus on growth instead of profits mdash but only if the growth is genuine. You can't be buying users that's a pyramid scheme. But a company with rapid genuine growth is valuable and eventually markets learn how to value valuable things. 2 The idea of starting a company with benevolent aims is currently undervalued because the kind of people who currently make that their explicit goal don't usually do a very good job.It's one of the standard career paths of trustafarians to start some vaguely benevolent business. The problem with most of them is that they either have a bogus political agenda or are feebly executed. The trustafarians' ancestors didn't get rich by preserving their traditional culture maybe people in Bolivia don't want to either. And starting an organic farm though it's at least straightforwardly benevolent doesn't help people on the scale that Google does.Most explicitly benevolent projects don't hold themselves sufficiently accountable. They act as if having good intentions were enough to guarantee good effects. 3 Users dislike their new operating system so much that they're starting petitions to save the old one. And the old one was nothing special. The hackers within Microsoft must know in their hearts that if the company really cared about users they'd just advise them to switch to OSX.Thanks to Trevor Blackwell Paul Buchheit Jessica Livingston and Robert Morris for reading drafts of this.Video of talk 
I grew up believing that taste is just a matter of personal preference. Each person has things they like but no one's preferences are any better than anyone else's. There is no such thing as good taste.Like a lot of things I grew up believing this turns out to be false and I'm going to try to explain why.One problem with saying there's no such thing as good taste is that it also means there's no such thing as good art. If there were good art then people who liked it would have better taste than people who didn't. So if you discard taste you also have to discard the idea of art being good and artists being good at making it.It was pulling on that thread that unravelled my childhood faith in relativism. When you're trying to make things taste becomes a practical matter. You have to decide what to do next. Would it make the painting better if I changed that part If there's no such thing as better it doesn't matter what you do. In fact it doesn't matter if you paint at all. You could just go out and buy a ready made blank canvas. If there's no such thing as good that would be just as great an achievement as the ceiling of the Sistine Chapel. Less laborious certainly but if you can achieve the same level of performance with less effort surely that's more impressive not less.Yet that doesn't seem quite right does it AudienceI think the key to this puzzle is to remember that art has an audience. Art has a purpose which is to interest its audience. Good art (like good anything) is art that achieves its purpose particularly well. The meaning of "interest" can vary. Some works of art are meant to shock and others to please some are meant to jump out at you and others to sit quietly in the background. But all art has to work on an audience and mdash here's the critical point mdash members of the audience share things in common.For example nearly all humans find human faces engaging. It seems to be wired into us. Babies can recognize faces practically from birth. In fact faces seem to have co evolved with our interest in them the face is the body's billboard. So all other things being equal a painting with faces in it will interest people more than one without. 1 One reason it's easy to believe that taste is merely personal preference is that if it isn't how do you pick out the people with better taste There are billions of people each with their own opinion on what grounds can you prefer one to another 2 But if audiences have a lot in common you're not in a position of having to choose one out of a random set of individual biases because the set isn't random. All humans find faces engaging mdash practically by definition: face recognition is in our DNA. And so having a notion of good art in the sense of art that does its job well doesn't require you to pick out a few individuals and label their opinions as correct. No matter who you pick they'll find faces engaging.Of course space aliens probably wouldn't find human faces engaging. But there might be other things they shared in common with us. The most likely source of examples is math. I expect space aliens would agree with us most of the time about which of two proofs was better. Erdos thought so. He called a maximally elegant proof one out of God's book and presumably God's book is universal. 3 Once you start talking about audiences you don't have to argue simply that there are or aren't standards of taste. Instead tastes are a series of concentric rings like ripples in a pond. There are some things that will appeal to you and your friends others that will appeal to most people your age others that will appeal to most humans and perhaps others that would appeal to most sentient beings (whatever that means).The picture is slightly more complicated than that because in the middle of the pond there are overlapping sets of ripples. For example there might be things that appealed particularly to men or to people from a certain culture.If good art is art that interests its audience then when you talk about art being good you also have to say for what audience. So is it meaningless to talk about art simply being good or bad No because one audience is the set of all possible humans. I think that's the audience people are implicitly talking about when they say a work of art is good: they mean it would engage any human. 4 And that is a meaningful test because although like any everyday concept "human" is fuzzy around the edges there are a lot of things practically all humans have in common. In addition to our interest in faces there's something special about primary colors for nearly all of us because it's an artifact of the way our eyes work. Most humans will also find images of 3D objects engaging because that also seems to be built into our visual perception. 5 And beneath that there's edge finding which makes images with definite shapes more engaging than mere blur.Humans have a lot more in common than this of course. My goal is not to compile a complete list just to show that there's some solid ground here. People's preferences aren't random. So an artist working on a painting and trying to decide whether to change some part of it doesn't have to think "Why bother I might as well flip a coin." Instead he can ask "What would make the painting more interesting to people " And the reason you can't equal Michelangelo by going out and buying a blank canvas is that the ceiling of the Sistine Chapel is more interesting to people.A lot of philosophers have had a hard time believing it was possible for there to be objective standards for art. It seemed obvious that beauty for example was something that happened in the head of the observer not something that was a property of objects. It was thus "subjective" rather than "objective." But in fact if you narrow the definition of beauty to something that works a certain way on humans and you observe how much humans have in common it turns out to be a property of objects after all. You don't have to choose between something being a property of the subject or the object if subjects all react similarly. Being good art is thus a property of objects as much as say being toxic to humans is: it's good art if it consistently affects humans in a certain way. ErrorSo could we figure out what the best art is by taking a vote After all if appealing to humans is the test we should be able to just ask them right Well not quite. For products of nature that might work. I'd be willing to eat the apple the world's population had voted most delicious and I'd probably be willing to visit the beach they voted most beautiful but having to look at the painting they voted the best would be a crapshoot.Man made stuff is different. For one thing artists unlike apple trees often deliberately try to trick us. Some tricks are quite subtle. For example any work of art sets expectations by its level of finish. You don't expect photographic accuracy in something that looks like a quick sketch. So one widely used trick especially among illustrators is to intentionally make a painting or drawing look like it was done faster than it was. The average person looks at it and thinks: how amazingly skillful. It's like saying something clever in a conversation as if you'd thought of it on the spur of the moment when in fact you'd worked it out the day before.Another much less subtle influence is brand. If you go to see the Mona Lisa you'll probably be disappointed because it's hidden behind a thick glass wall and surrounded by a frenzied crowd taking pictures of themselves in front of it. At best you can see it the way you see a friend across the room at a crowded party. The Louvre might as well replace it with copy no one would be able to tell. And yet the Mona Lisa is a small dark painting. If you found people who'd never seen an image of it and sent them to a museum in which it was hanging among other paintings with a tag labelling it as a portrait by an unknown fifteenth century artist most would walk by without giving it a second look.For the average person brand dominates all other factors in the judgement of art. Seeing a painting they recognize from reproductions is so overwhelming that their response to it as a painting is drowned out.And then of course there are the tricks people play on themselves. Most adults looking at art worry that if they don't like what they're supposed to they'll be thought uncultured. This doesn't just affect what they claim to like they actually make themselves like things they're supposed to.That's why you can't just take a vote. Though appeal to people is a meaningful test in practice you can't measure it just as you can't find north using a compass with a magnet sitting next to it. There are sources of error so powerful that if you take a vote all you're measuring is the error.We can however approach our goal from another direction by using ourselves as guinea pigs. You're human. If you want to know what the basic human reaction to a piece of art would be you can at least approach that by getting rid of the sources of error in your own judgements.For example while anyone's reaction to a famous painting will be warped at first by its fame there are ways to decrease its effects. One is to come back to the painting over and over. After a few days the fame wears off and you can start to see it as a painting. Another is to stand close. A painting familiar from reproductions looks more familiar from ten feet away close in you see details that get lost in reproductions and which you're therefore seeing for the first time.There are two main kinds of error that get in the way of seeing a work of art: biases you bring from your own circumstances and tricks played by the artist. Tricks are straightforward to correct for. Merely being aware of them usually prevents them from working. For example when I was ten I used to be very impressed by airbrushed lettering that looked like shiny metal. But once you study how it's done you see that it's a pretty cheesy trick mdash one of the sort that relies on pushing a few visual buttons really hard to temporarily overwhelm the viewer. It's like trying to convince someone by shouting at them.The way not to be vulnerable to tricks is to explicitly seek out and catalog them. When you notice a whiff of dishonesty coming from some kind of art stop and figure out what's going on. When someone is obviously pandering to an audience that's easily fooled whether it's someone making shiny stuff to impress ten year olds or someone making conspicuously avant garde stuff to impress would be intellectuals learn how they do it. Once you've seen enough examples of specific types of tricks you start to become a connoisseur of trickery in general just as professional magicians are.What counts as a trick Roughly it's something done with contempt for the audience. For example the guys designing Ferraris in the 1950s were probably designing cars that they themselves admired. Whereas I suspect over at General Motors the marketing people are telling the designers "Most people who buy SUVs do it to seem manly not to drive off road. So don't worry about the suspension just make that sucker as big and tough looking as you can." 6 I think with some effort you can make yourself nearly immune to tricks. It's harder to escape the influence of your own circumstances but you can at least move in that direction. The way to do it is to travel widely in both time and space. If you go and see all the different kinds of things people like in other cultures and learn about all the different things people have liked in the past you'll probably find it changes what you like. I doubt you could ever make yourself into a completely universal person if only because you can only travel in one direction in time. But if you find a work of art that would appeal equally to your friends to people in Nepal and to the ancient Greeks you're probably onto something.My main point here is not how to have good taste but that there can even be such a thing. And I think I've shown that. There is such a thing as good art. It's art that interests its human audience and since humans have a lot in common what interests them is not random. Since there's such a thing as good art there's also such a thing as good taste which is the ability to recognize it.If we were talking about the taste of apples I'd agree that taste is just personal preference. Some people like certain kinds of apples and others like other kinds but how can you say that one is right and the other wrong 7 The thing is art isn't apples. Art is man made. It comes with a lot of cultural baggage and in addition the people who make it often try to trick us. Most people's judgement of art is dominated by these extraneous factors they're like someone trying to judge the taste of apples in a dish made of equal parts apples and jalapeno peppers. All they're tasting is the peppers. So it turns out you can pick out some people and say that they have better taste than others: they're the ones who actually taste art like apples.Or to put it more prosaically they're the people who (a) are hard to trick and (b) don't just like whatever they grew up with. If you could find people who'd eliminated all such influences on their judgement you'd probably still see variation in what they liked. But because humans have so much in common you'd also find they agreed on a lot. They'd nearly all prefer the ceiling of the Sistine Chapel to a blank canvas.Making ItI wrote this essay because I was tired of hearing "taste is subjective" and wanted to kill it once and for all. Anyone who makes things knows intuitively that's not true. When you're trying to make art the temptation to be lazy is as great as in any other kind of work. Of course it matters to do a good job. And yet you can see how great a hold "taste is subjective" has even in the art world by how nervous it makes people to talk about art being good or bad. Those whose jobs require them to judge art like curators mostly resort to euphemisms like "significant" or "important" or (getting dangerously close) "realized." 8 I don't have any illusions that being able to talk about art being good or bad will cause the people who talk about it to have anything more useful to say. Indeed one of the reasons "taste is subjective" found such a receptive audience is that historically the things people have said about good taste have generally been such nonsense.It's not for the people who talk about art that I want to free the idea of good art but for those who make it. Right now ambitious kids going to art school run smack into a brick wall. They arrive hoping one day to be as good as the famous artists they've seen in books and the first thing they learn is that the concept of good has been retired. Instead everyone is just supposed to explore their own personal vision. 9 When I was in art school we were looking one day at a slide of some great fifteenth century painting and one of the students asked "Why don't artists paint like that now " The room suddenly got quiet. Though rarely asked out loud this question lurks uncomfortably in the back of every art student's mind. It was as if someone had brought up the topic of lung cancer in a meeting within Philip Morris."Well " the professor replied "we're interested in different questions now." He was a pretty nice guy but at the time I couldn't help wishing I could send him back to fifteenth century Florence to explain in person to Leonardo Co. how we had moved beyond their early limited concept of art. Just imagine that conversation.In fact one of the reasons artists in fifteenth century Florence made such great things was that they believed you could make great things. 10 They were intensely competitive and were always trying to outdo one another like mathematicians or physicists today mdash maybe like anyone who has ever done anything really well.The idea that you could make great things was not just a useful illusion. They were actually right. So the most important consequence of realizing there can be good art is that it frees artists to try to make it. To the ambitious kids arriving at art school this year hoping one day to make great things I say: don't believe it when they tell you this is a naive and outdated ambition. There is such a thing as good art and if you try to make it there are people who will notice.Notes 1 This is not to say of course that good paintings must have faces in them just that everyone's visual piano has that key on it. There are situations in which you want to avoid faces precisely because they attract so much attention. But you can see how universally faces work by their prevalence in advertising. 2 The other reason it's easy to believe is that it makes people feel good. To a kid this idea is crack. In every other respect they're constantly being told that they have a lot to learn. But in this they're perfect. Their opinion carries the same weight as any adult's. You should probably question anything you believed as a kid that you'd want to believe this much. 3 It's conceivable that the elegance of proofs is quantifiable in the sense that there may be some formal measure that turns out to coincide with mathematicians' judgements. Perhaps it would be worth trying to make a formal language for proofs in which those considered more elegant consistently came out shorter (perhaps after being macroexpanded or compiled). 4 Maybe it would be possible to make art that would appeal to space aliens but I'm not going to get into that because (a) it's too hard to answer and (b) I'm satisfied if I can establish that good art is a meaningful idea for human audiences. 5 If early abstract paintings seem more interesting than later ones it may be because the first abstract painters were trained to paint from life and their hands thus tended to make the kind of gestures you use in representing physical things. In effect they were saying "scaramara" instead of "uebfgbsb." 6 It's a bit more complicated because sometimes artists unconsciously use tricks by imitating art that does. 7 I phrased this in terms of the taste of apples because if people can see the apples they can be fooled. When I was a kid most apples were a variety called Red Delicious that had been bred to look appealing in stores but which didn't taste very good. 8 To be fair curators are in a difficult position. If they're dealing with recent art they have to include things in shows that they think are bad. That's because the test for what gets included in shows is basically the market price and for recent art that is largely determined by successful businessmen and their wives. So it's not always intellectual dishonesty that makes curators and dealers use neutral sounding language. 9 What happens in practice is that everyone gets really good at talking about art. As the art itself gets more random the effort that would have gone into the work goes instead into the intellectual sounding theory behind it. "My work represents an exploration of gender and sexuality in an urban context " etc. Different people win at that game. 10 There were several other reasons including that Florence was then the richest and most sophisticated city in the world and that they lived in a time before photography had (a) killed portraiture as a source of income and (b) made brand the dominant factor in the sale of art.Incidentally I'm not saying that good art fifteenth century European art. I'm not saying we should make what they made but that we should work like they worked. There are fields now in which many people work with the same energy and honesty that fifteenth century artists did but art is not one of them.Thanks to Trevor Blackwell Jessica Livingston and Robert Morris for reading drafts of this and to Paul Watson for permission to use the image at the top.
(This essay is derived from a keynote talk at the 2007 ASES Summit at Stanford.)The world of investors is a foreign one to most hackers mdash partly because investors are so unlike hackers and partly because they tend to operate in secret. I've been dealing with this world for many years both as a founder and an investor and I still don't fully understand it.In this essay I'm going to list some of the more surprising things I've learned about investors. Some I only learned in the past year.Teaching hackers how to deal with investors is probably the second most important thing we do at Y Combinator. The most important thing for a startup is to make something good. But everyone knows that's important. The dangerous thing about investors is that hackers don't know how little they know about this strange world.1. The investors are what make a startup hub.About a year ago I tried to figure out what you'd need to reproduce Silicon Valley. I decided the critical ingredients were rich people and nerds mdash investors and founders. People are all you need to make technology and all the other people will move.If I had to narrow that down I'd say investors are the limiting factor. Not because they contribute more to the startup but simply because they're least willing to move. They're rich. They're not going to move to Albuquerque just because there are some smart hackers there they could invest in. Whereas hackers will move to the Bay Area to find investors.2. Angel investors are the most critical.There are several types of investors. The two main categories are angels and VCs: VCs invest other people's money and angels invest their own.Though they're less well known the angel investors are probably the more critical ingredient in creating a silicon valley. Most companies that VCs invest in would never have made it that far if angels hadn't invested first. VCs say between half and three quarters of companies that raise series A rounds have taken some outside investment already. 1 Angels are willing to fund riskier projects than VCs. They also give valuable advice because (unlike VCs) many have been startup founders themselves.Google's story shows the key role angels play. A lot of people know Google raised money from Kleiner and Sequoia. What most don't realize is how late. That VC round was a series B round the premoney valuation was 75 million. Google was already a successful company at that point. Really Google was funded with angel money.It may seem odd that the canonical Silicon Valley startup was funded by angels but this is not so surprising. Risk is always proportionate to reward. So the most successful startup of all is likely to have seemed an extremely risky bet at first and that is exactly the kind VCs won't touch.Where do angel investors come from From other startups. So startup hubs like Silicon Valley benefit from something like the marketplace effect but shifted in time: startups are there because startups were there.3. Angels don't like publicity.If angels are so important why do we hear more about VCs Because VCs like publicity. They need to market themselves to the investors who are their "customers" mdash the endowments and pension funds and rich families whose money they invest mdash and also to founders who might come to them for funding.Angels don't need to market themselves to investors because they invest their own money. Nor do they want to market themselves to founders: they don't want random people pestering them with business plans. Actually neither do VCs. Both angels and VCs get deals almost exclusively through personal introductions. 2 The reason VCs want a strong brand is not to draw in more business plans over the transom but so they win deals when competing against other VCs. Whereas angels are rarely in direct competition because (a) they do fewer deals (b) they're happy to split them and (c) they invest at a point where the stream is broader.4. Most investors especially VCs are not like founders.Some angels are or were hackers. But most VCs are a different type of people: they're dealmakers.If you're a hacker here's a thought experiment you can run to understand why there are basically no hacker VCs: How would you like a job where you never got to make anything but instead spent all your time listening to other people pitch (mostly terrible) projects deciding whether to fund them and sitting on their boards if you did That would not be fun for most hackers. Hackers like to make things. This would be like being an administrator.Because most VCs are a different species of people from founders it's hard to know what they're thinking. If you're a hacker the last time you had to deal with these guys was in high school. Maybe in college you walked past their fraternity on your way to the lab. But don't underestimate them. They're as expert in their world as you are in yours. What they're good at is reading people and making deals work to their advantage. Think twice before you try to beat them at that.5. Most investors are momentum investors.Because most investors are dealmakers rather than technology people they generally don't understand what you're doing. I knew as a founder that most VCs didn't get technology. I also knew some made a lot of money. And yet it never occurred to me till recently to put those two ideas together and ask "How can VCs make money by investing in stuff they don't understand "The answer is that they're like momentum investors. You can (or could once) make a lot of money by noticing sudden changes in stock prices. When a stock jumps upward you buy and when it suddenly drops you sell. In effect you're insider trading without knowing what you know. You just know someone knows something and that's making the stock move.This is how most venture investors operate. They don't try to look at something and predict whether it will take off. They win by noticing that something is taking off a little sooner than everyone else. That generates almost as good returns as actually being able to pick winners. They may have to pay a little more than they would if they got in at the very beginning but only a little.Investors always say what they really care about is the team. Actually what they care most about is your traffic then what other investors think then the team. If you don't yet have any traffic they fall back on number 2 what other investors think. And this as you can imagine produces wild oscillations in the "stock price" of a startup. One week everyone wants you and they're begging not to be cut out of the deal. But all it takes is for one big investor to cool on you and the next week no one will return your phone calls. We regularly have startups go from hot to cold or cold to hot in a matter of days and literally nothing has changed.There are two ways to deal with this phenomenon. If you're feeling really confident you can try to ride it. You can start by asking a comparatively lowly VC for a small amount of money and then after generating interest there ask more prestigious VCs for larger amounts stirring up a crescendo of buzz and then "sell" at the top. This is extremely risky and takes months even if you succeed. I wouldn't try it myself. My advice is to err on the side of safety: when someone offers you a decent deal just take it and get on with building the company. Startups win or lose based on the quality of their product not the quality of their funding deals.6. Most investors are looking for big hits.Venture investors like companies that could go public. That's where the big returns are. They know the odds of any individual startup going public are small but they want to invest in those that at least have a chance of going public.Currently the way VCs seem to operate is to invest in a bunch of companies most of which fail and one of which is Google. Those few big wins compensate for losses on their other investments. What this means is that most VCs will only invest in you if you're a potential Google. They don't care about companies that are a safe bet to be acquired for 20 million. There needs to be a chance however small of the company becoming really big.Angels are different in this respect. They're happy to invest in a company where the most likely outcome is a 20 million acquisition if they can do it at a low enough valuation. But of course they like companies that could go public too. So having an ambitious long term plan pleases everyone.If you take VC money you have to mean it because the structure of VC deals prevents early acquisitions. If you take VC money they won't let you sell early.7. VCs want to invest large amounts.The fact that they're running investment funds makes VCs want to invest large amounts. A typical VC fund is now hundreds of millions of dollars. If 400 million has to be invested by 10 partners they have to invest 40 million each. VCs usually sit on the boards of companies they fund. If the average deal size was 1 million each partner would have to sit on 40 boards which would not be fun. So they prefer bigger deals where they can put a lot of money to work at once.VCs don't regard you as a bargain if you don't need a lot of money. That may even make you less attractive because it means their investment creates less of a barrier to entry for competitors.Angels are in a different position because they're investing their own money. They're happy to invest small amounts mdash sometimes as little as 20 000 mdash as long as the potential returns look good enough. So if you're doing something inexpensive go to angels.8. Valuations are fiction.VCs admit that valuations are an artifact. They decide how much money you need and how much of the company they want and those two constraints yield a valuation.Valuations increase as the size of the investment does. A company that an angel is willing to put 50 000 into at a valuation of a million can't take 6 million from VCs at that valuation. That would leave the founders less than a seventh of the company between them (since the option pool would also come out of that seventh). Most VCs wouldn't want that which is why you never hear of deals where a VC invests 6 million at a premoney valuation of 1 million.If valuations change depending on the amount invested that shows how far they are from reflecting any kind of value of the company.Since valuations are made up founders shouldn't care too much about them. That's not the part to focus on. In fact a high valuation can be a bad thing. If you take funding at a premoney valuation of 10 million you won't be selling the company for 20. You'll have to sell for over 50 for the VCs to get even a 5x return which is low to them. More likely they'll want you to hold out for 100. But needing to get a high price decreases the chance of getting bought at all many companies can buy you for 10 million but only a handful for 100. And since a startup is like a pass fail course for the founders what you want to optimize is your chance of a good outcome not the percentage of the company you keep.So why do founders chase high valuations They're tricked by misplaced ambition. They feel they've achieved more if they get a higher valuation. They usually know other founders and if they get a higher valuation they can say "mine is bigger than yours." But funding is not the real test. The real test is the final outcome for the founder and getting too high a valuation may just make a good outcome less likely.The one advantage of a high valuation is that you get less dilution. But there is another less sexy way to achieve that: just take less money.9. Investors look for founders like the current stars.Ten years ago investors were looking for the next Bill Gates. This was a mistake because Microsoft was a very anomalous startup. They started almost as a contract programming operation and the reason they became huge was that IBM happened to drop the PC standard in their lap.Now all the VCs are looking for the next Larry and Sergey. This is a good trend because Larry and Sergey are closer to the ideal startup founders.Historically investors thought it was important for a founder to be an expert in business. So they were willing to fund teams of MBAs who planned to use the money to pay programmers to build their product for them. This is like funding Steve Ballmer in the hope that the programmer he'll hire is Bill Gates mdash kind of backward as the events of the Bubble showed. Now most VCs know they should be funding technical guys. This is more pronounced among the very top funds the lamer ones still want to fund MBAs.If you're a hacker it's good news that investors are looking for Larry and Sergey. The bad news is the only investors who can do it right are the ones who knew them when they were a couple of CS grad students not the confident media stars they are today. What investors still don't get is how clueless and tentative great founders can seem at the very beginning.10. The contribution of investors tends to be underestimated.Investors do more for startups than give them money. They're helpful in doing deals and arranging introductions and some of the smarter ones particularly angels can give good advice about the product.In fact I'd say what separates the great investors from the mediocre ones is the quality of their advice. Most investors give advice but the top ones give good advice.Whatever help investors give a startup tends to be underestimated. It's to everyone's advantage to let the world think the founders thought of everything. The goal of the investors is for the company to become valuable and the company seems more valuable if it seems like all the good ideas came from within.This trend is compounded by the obsession that the press has with founders. In a company founded by two people 10 of the ideas might come from the first guy they hire. Arguably they've done a bad job of hiring otherwise. And yet this guy will be almost entirely overlooked by the press.I say this as a founder: the contribution of founders is always overestimated. The danger here is that new founders looking at existing founders will think that they're supermen that one couldn't possibly equal oneself. Actually they have a hundred different types of support people just offscreen making the whole show possible. 3 11. VCs are afraid of looking bad.I've been very surprised to discover how timid most VCs are. They seem to be afraid of looking bad to their partners and perhaps also to the limited partners mdash the people whose money they invest.You can measure this fear in how much less risk VCs are willing to take. You can tell they won't make investments for their fund that they might be willing to make themselves as angels. Though it's not quite accurate to say that VCs are less willing to take risks. They're less willing to do things that might look bad. That's not the same thing.For example most VCs would be very reluctant to invest in a startup founded by a pair of 18 year old hackers no matter how brilliant because if the startup failed their partners could turn on them and say "What you invested x million of our money in a pair of 18 year olds " Whereas if a VC invested in a startup founded by three former banking executives in their 40s who planned to outsource their product development mdash which to my mind is actually a lot riskier than investing in a pair of really smart 18 year olds mdash he couldn't be faulted if it failed for making such an apparently prudent investment.As a friend of mine said "Most VCs can't do anything that would sound bad to the kind of doofuses who run pension funds." Angels can take greater risks because they don't have to answer to anyone.12. Being turned down by investors doesn't mean much.Some founders are quite dejected when they get turned down by investors. They shouldn't take it so much to heart. To start with investors are often wrong. It's hard to think of a successful startup that wasn't turned down by investors at some point. Lots of VCs rejected Google. So obviously the reaction of investors is not a very meaningful test.Investors will often reject you for what seem to be superficial reasons. I read of one VC who turned down a startup simply because they'd given away so many little bits of stock that the deal required too many signatures to close. 4 The reason investors can get away with this is that they see so many deals. It doesn't matter if they underestimate you because of some surface imperfection because the next best deal will be almost as good. Imagine picking out apples at a grocery store. You grab one with a little bruise. Maybe it's just a surface bruise but why even bother checking when there are so many other unbruised apples to choose from Investors would be the first to admit they're often wrong. So when you get rejected by investors don't think "we suck " but instead ask "do we suck " Rejection is a question not an answer.13. Investors are emotional.I've been surprised to discover how emotional investors can be. You'd expect them to be cold and calculating or at least businesslike but often they're not. I'm not sure if it's their position of power that makes them this way or the large sums of money involved but investment negotiations can easily turn personal. If you offend investors they'll leave in a huff.A while ago an eminent VC firm offered a series A round to a startup we'd seed funded. Then they heard a rival VC firm was also interested. They were so afraid that they'd be rejected in favor of this other firm that they gave the startup what's known as an "exploding termsheet." They had I think 24 hours to say yes or no or the deal was off. Exploding termsheets are a somewhat dubious device but not uncommon. What surprised me was their reaction when I called to talk about it. I asked if they'd still be interested in the startup if the rival VC didn't end up making an offer and they said no. What rational basis could they have had for saying that If they thought the startup was worth investing in what difference should it make what some other VC thought Surely it was their duty to their limited partners simply to invest in the best opportunities they found they should be delighted if the other VC said no because it would mean they'd overlooked a good opportunity. But of course there was no rational basis for their decision. They just couldn't stand the idea of taking this rival firm's rejects.In this case the exploding termsheet was not (or not only) a tactic to pressure the startup. It was more like the high school trick of breaking up with someone before they can break up with you. In an earlier essay I said that VCs were a lot like high school girls. A few VCs have joked about that characterization but none have disputed it.14. The negotiation never stops till the closing.Most deals for investment or acquisition happen in two phases. There's an initial phase of negotiation about the big questions. If this succeeds you get a termsheet so called because it outlines the key terms of a deal. A termsheet is not legally binding but it is a definite step. It's supposed to mean that a deal is going to happen once the lawyers work out all the details. In theory these details are minor ones by definition all the important points are supposed to be covered in the termsheet.Inexperience and wishful thinking combine to make founders feel that when they have a termsheet they have a deal. They want there to be a deal everyone acts like they have a deal so there must be a deal. But there isn't and may not be for several months. A lot can change for a startup in several months. It's not uncommon for investors and acquirers to get buyer's remorse. So you have to keep pushing keep selling all the way to the close. Otherwise all the "minor" details left unspecified in the termsheet will be interpreted to your disadvantage. The other side may even break the deal if they do that they'll usually seize on some technicality or claim you misled them rather than admitting they changed their minds.It can be hard to keep the pressure on an investor or acquirer all the way to the closing because the most effective pressure is competition from other investors or acquirers and these tend to drop away when you get a termsheet. You should try to stay as close friends as you can with these rivals but the most important thing is just to keep up the momentum in your startup. The investors or acquirers chose you because you seemed hot. Keep doing whatever made you seem hot. Keep releasing new features keep getting new users keep getting mentioned in the press and in blogs.15. Investors like to co invest.I've been surprised how willing investors are to split deals. You might think that if they found a good deal they'd want it all to themselves but they seem positively eager to syndicate. This is understandable with angels they invest on a smaller scale and don't like to have too much money tied up in any one deal. But VCs also share deals a lot. Why Partly I think this is an artifact of the rule I quoted earlier: after traffic VCs care most what other VCs think. A deal that has multiple VCs interested in it is more likely to close so of deals that close more will have multiple investors.There is one rational reason to want multiple VCs in a deal: Any investor who co invests with you is one less investor who could fund a competitor. Apparently Kleiner and Sequoia didn't like splitting the Google deal but it did at least have the advantage from each one's point of view that there probably wouldn't be a competitor funded by the other. Splitting deals thus has similar advantages to confusing paternity.But I think the main reason VCs like splitting deals is the fear of looking bad. If another firm shares the deal then in the event of failure it will seem to have been a prudent choice mdash a consensus decision rather than just the whim of an individual partner.16. Investors collude.Investing is not covered by antitrust law. At least it better not be because investors regularly do things that would be illegal otherwise. I know personally of cases where one investor has talked another out of making a competitive offer using the promise of sharing future deals.In principle investors are all competing for the same deals but the spirit of cooperation is stronger than the spirit of competition. The reason again is that there are so many deals. Though a professional investor may have a closer relationship with a founder he invests in than with other investors his relationship with the founder is only going to last a couple years whereas his relationship with other firms will last his whole career. There isn't so much at stake in his interactions with other investors but there will be a lot of them. Professional investors are constantly trading little favors.Another reason investors stick together is to preserve the power of investors as a whole. So you will not as of this writing be able to get investors into an auction for your series A round. They'd rather lose the deal than establish a precedent of VCs competitively bidding against one another. An efficient startup funding market may be coming in the distant future things tend to move in that direction but it's certainly not here now. 17. Large scale investors care about their portfolio not any individual company.The reason startups work so well is that everyone with power also has equity. The only way any of them can succeed is if they all do. This makes everyone naturally pull in the same direction subject to differences of opinion about tactics.The problem is larger scale investors don't have exactly the same motivation. Close but not identical. They don't need any given startup to succeed like founders do just their portfolio as a whole to. So in borderline cases the rational thing for them to do is to sacrifice unpromising startups.Large scale investors tend to put startups in three categories: successes failures and the "living dead" mdash companies that are plugging along but don't seem likely in the immediate future to get bought or go public. To the founders "living dead" sounds harsh. These companies may be far from failures by ordinary standards. But they might as well be from a venture investor's point of view and they suck up just as much time and attention as the successes. So if such a company has two possible strategies a conservative one that's slightly more likely to work in the end or a risky one that within a short time will either yield a giant success or kill the company VCs will push for the kill or cure option. To them the company is already a write off. Better to have resolution one way or the other as soon as possible.If a startup gets into real trouble instead of trying to save it VCs may just sell it at a low price to another of their portfolio companies. Philip Greenspun said in Founders at Work that Ars Digita's VCs did this to them.18. Investors have different risk profiles from founders.Most people would rather a 100 chance of 1 million than a 20 chance of 10 million. Investors are rich enough to be rational and prefer the latter. So they'll always tend to encourage founders to keep rolling the dice. If a company is doing well investors will want founders to turn down most acquisition offers. And indeed most startups that turn down acquisition offers ultimately do better. But it's still hair raising for the founders because they might end up with nothing. When someone's offering to buy you for a price at which your stock is worth 5 million saying no is equivalent to having 5 million and betting it all on one spin of the roulette wheel.Investors will tell you the company is worth more. And they may be right. But that doesn't mean it's wrong to sell. Any financial advisor who put all his client's assets in the stock of a single private company would probably lose his license for it.More and more investors are letting founders cash out partially. That should correct the problem. Most founders have such low standards that they'll feel rich with a sum that doesn't seem huge to investors. But this custom is spreading too slowly because VCs are afraid of seeming irresponsible. No one wants to be the first VC to give someone fuck you money and then actually get told "fuck you." But until this does start to happen we know VCs are being too conservative.19. Investors vary greatly.Back when I was a founder I used to think all VCs were the same. And in fact they do all look the same. They're all what hackers call "suits." But since I've been dealing with VCs more I've learned that some suits are smarter than others.They're also in a business where winners tend to keep winning and losers to keep losing. When a VC firm has been successful in the past everyone wants funding from them so they get the pick of all the new deals. The self reinforcing nature of the venture funding market means that the top ten firms live in a completely different world from say the hundredth. As well as being smarter they tend to be calmer and more upstanding they don't need to do iffy things to get an edge and don't want to because they have more brand to protect.There are only two kinds of VCs you want to take money from if you have the luxury of choosing: the "top tier" VCs meaning about the top 20 or so firms plus a few new ones that are not among the top 20 only because they haven't been around long enough.It's particularly important to raise money from a top firm if you're a hacker because they're more confident. That means they're less likely to stick you with a business guy as CEO like VCs used to do in the 90s. If you seem smart and want to do it they'll let you run the company.20. Investors don't realize how much it costs to raise money from them.Raising money is a huge time suck at just the point where startups can least afford it. It's not unusual for it to take five or six months to close a funding round. Six weeks is fast. And raising money is not just something you can leave running as a background process. When you're raising money it's inevitably the main focus of the company. Which means building the product isn't.Suppose a Y Combinator company starts talking to VCs after demo day and is successful in raising money from them closing the deal after a comparatively short 8 weeks. Since demo day occurs after 10 weeks the company is now 18 weeks old. Raising money rather than working on the product has been the company's main focus for 44 of its existence. And mind you this an example where things turned out well.When a startup does return to working on the product after a funding round finally closes it's as if they were returning to work after a months long illness. They've lost most of their momentum.Investors have no idea how much they damage the companies they invest in by taking so long to do it. But companies do. So there is a big opportunity here for a new kind of venture fund that invests smaller amounts at lower valuations but promises to either close or say no very quickly. If there were such a firm I'd recommend it to startups in preference to any other no matter how prestigious. Startups live on speed and momentum.21. Investors don't like to say no.The reason funding deals take so long to close is mainly that investors can't make up their minds. VCs are not big companies they can do a deal in 24 hours if they need to. But they usually let the initial meetings stretch out over a couple weeks. The reason is the selection algorithm I mentioned earlier. Most don't try to predict whether a startup will win but to notice quickly that it already is winning. They care what the market thinks of you and what other VCs think of you and they can't judge those just from meeting you.Because they're investing in things that (a) change fast and (b) they don't understand a lot of investors will reject you in a way that can later be claimed not to have been a rejection. Unless you know this world you may not even realize you've been rejected. Here's a VC saying no: We're really excited about your project and we want to keep in close touch as you develop it further. Translated into more straightforward language this means: We're not investing in you but we may change our minds if it looks like you're taking off. Sometimes they're more candid and say explicitly that they need to "see some traction." They'll invest in you if you start to get lots of users. But so would any VC. So all they're saying is that you're still at square 1.Here's a test for deciding whether a VC's response was yes or no. Look down at your hands. Are you holding a termsheet 22. You need investors.Some founders say "Who needs investors " Empirically the answer seems to be: everyone who wants to succeed. Practically every successful startup takes outside investment at some point.Why What the people who think they don't need investors forget is that they will have competitors. The question is not whether you need outside investment but whether it could help you at all. If the answer is yes and you don't take investment then competitors who do will have an advantage over you. And in the startup world a little advantage can expand into a lot.Mike Moritz famously said that he invested in Yahoo because he thought they had a few weeks' lead over their competitors. That may not have mattered quite so much as he thought because Google came along three years later and kicked Yahoo's ass. But there is something in what he said. Sometimes a small lead can grow into the yes half of a binary choice.Maybe as it gets cheaper to start a startup it will start to be possible to succeed in a competitive market without outside funding. There are certainly costs to raising money. But as of this writing the empirical evidence says it's a net win.23. Investors like it when you don't need them.A lot of founders approach investors as if they needed their permission to start a company mdash as if it were like getting into college. But you don't need investors to start most companies they just make it easier.And in fact investors greatly prefer it if you don't need them. What excites them both consciously and unconsciously is the sort of startup that approaches them saying "the train's leaving the station are you in or out " not the one saying "please can we have some money to start a company "Most investors are "bottoms" in the sense that the startups they like most are those that are rough with them. When Google stuck Kleiner and Sequoia with a 75 million premoney valuation their reaction was probably "Ouch That feels so good." And they were right weren't they That deal probably made them more than any other they've done.The thing is VCs are pretty good at reading people. So don't try to act tough with them unless you really are the next Google or they'll see through you in a second. Instead of acting tough what most startups should do is simply always have a backup plan. Always have some alternative plan for getting started if any given investor says no. Having one is the best insurance against needing one.So you shouldn't start a startup that's expensive to start because then you'll be at the mercy of investors. If you ultimately want to do something that will cost a lot start by doing a cheaper subset of it and expand your ambitions when and if you raise more money.Apparently the most likely animals to be left alive after a nuclear war are cockroaches because they're so hard to kill. That's what you want to be as a startup initially. Instead of a beautiful but fragile flower that needs to have its stem in a plastic tube to support itself better to be small ugly and indestructible.Notes 1 I may be underestimating VCs. They may play some behind the scenes role in IPOs which you ultimately need if you want to create a silicon valley. 2 A few VCs have an email address you can send your business plan to but the number of startups that get funded this way is basically zero. You should always get a personal introduction mdash and to a partner not an associate. 3 Several people have told us that the most valuable thing about startup school was that they got to see famous startup founders and realized they were just ordinary guys. Though we're happy to provide this service this is not generally the way we pitch startup school to potential speakers. 4 Actually this sounds to me like a VC who got buyer's remorse then used a technicality to get out of the deal. But it's telling that it even seemed a plausible excuse.Thanks to Sam Altman Paul Buchheit Hutch Fishman and Robert Morris for reading drafts of this and to Kenneth King of ASES for inviting me to speak.
Hacker News was two years old last week. Initially it was supposed to be a side project mdash an application to sharpen Arc on and a place for current and future Y Combinator founders to exchange news. It's grown bigger and taken up more time than I expected but I don't regret that because I've learned so much from working on it.GrowthWhen we launched in February 2007 weekday traffic was around 1600 daily uniques. It's since grown to around 22 000. This growth rate is a bit higher than I'd like. I'd like the site to grow since a site that isn't growing at least slowly is probably dead. But I wouldn't want it to grow as large as Digg or Reddit mdash mainly because that would dilute the character of the site but also because I don't want to spend all my time dealing with scaling.I already have problems enough with that. Remember the original motivation for HN was to test a new programming language and moreover one that's focused on experimenting with language design not performance. Every time the site gets slow I fortify myself by recalling McIlroy and Bentley's famous quote The key to performance is elegance not battalions of special cases. and look for the bottleneck I can remove with least code. So far I've been able to keep up in the sense that performance has remained consistently mediocre despite 14x growth. I don't know what I'll do next but I'll probably think of something.This is my attitude to the site generally. Hacker News is an experiment and an experiment in a very young field. Sites of this type are only a few years old. Internet conversation generally is only a few decades old. So we've probably only discovered a fraction of what we eventually will.That's why I'm so optimistic about HN. When a technology is this young the existing solutions are usually terrible which means it must be possible to do much better which means many problems that seem insoluble aren't. Including I hope the problem that has afflicted so many previous communities: being ruined by growth.DilutionUsers have worried about that since the site was a few months old. So far these alarms have been false but they may not always be. Dilution is a hard problem. But probably soluble it doesn't mean much that open conversations have "always" been destroyed by growth when "always" equals 20 instances.But it's important to remember we're trying to solve a new problem because that means we're going to have to try new things most of which probably won't work. A couple weeks ago I tried displaying the names of users with the highest average comment scores in orange. 1 That was a mistake. Suddenly a culture that had been more or less united was divided into haves and have nots. I didn't realize how united the culture had been till I saw it divided. It was painful to watch. 2 So orange usernames won't be back. (Sorry about that.) But there will be other equally broken seeming ideas in the future and the ones that turn out to work will probably seem just as broken as those that don't.Probably the most important thing I've learned about dilution is that it's measured more in behavior than users. It's bad behavior you want to keep out more than bad people. User behavior turns out to be surprisingly malleable. If people are expected to behave well they tend to and vice versa.Though of course forbidding bad behavior does tend to keep away bad people because they feel uncomfortably constrained in a place where they have to behave well. But this way of keeping them out is gentler and probably also more effective than overt barriers.It's pretty clear now that the broken windows theory applies to community sites as well. The theory is that minor forms of bad behavior encourage worse ones: that a neighborhood with lots of graffiti and broken windows becomes one where robberies occur. I was living in New York when Giuliani introduced the reforms that made the broken windows theory famous and the transformation was miraculous. And I was a Reddit user when the opposite happened there and the transformation was equally dramatic.I'm not criticizing Steve and Alexis. What happened to Reddit didn't happen out of neglect. From the start they had a policy of censoring nothing except spam. Plus Reddit had different goals from Hacker News. Reddit was a startup not a side project its goal was to grow as fast as possible. Combine rapid growth and zero censorship and the result is a free for all. But I don't think they'd do much differently if they were doing it again. Measured by traffic Reddit is much more successful than Hacker News.But what happened to Reddit won't inevitably happen to HN. There are several local maxima. There can be places that are free for alls and places that are more thoughtful just as there are in the real world and people will behave differently depending on which they're in just as they do in the real world.I've observed this in the wild. I've seen people cross posting on Reddit and Hacker News who actually took the trouble to write two versions a flame for Reddit and a more subdued version for HN.SubmissionsThere are two major types of problems a site like Hacker News needs to avoid: bad stories and bad comments. So far the danger of bad stories seems smaller. The stories on the frontpage now are still roughly the ones that would have been there when HN started.I once thought I'd have to weight votes to keep crap off the frontpage but I haven't had to yet. I wouldn't have predicted the frontpage would hold up so well and I'm not sure why it has. Perhaps only the more thoughtful users care enough to submit and upvote links so the marginal cost of one random new user approaches zero. Or perhaps the frontpage protects itself by advertising what type of submission is expected.The most dangerous thing for the frontpage is stuff that's too easy to upvote. If someone proves a new theorem it takes some work by the reader to decide whether or not to upvote it. An amusing cartoon takes less. A rant with a rallying cry as the title takes zero because people vote it up without even reading it.Hence what I call the Fluff Principle: on a user voted news site the links that are easiest to judge will take over unless you take specific measures to prevent it.Hacker News has two kinds of protections against fluff. The most common types of fluff links are banned as off topic. Pictures of kittens political diatribes and so on are explicitly banned. This keeps out most fluff but not all of it. Some links are both fluff in the sense of being very short and also on topic.There's no single solution to that. If a link is just an empty rant editors will sometimes kill it even if it's on topic in the sense of being about hacking because it's not on topic by the real standard which is to engage one's intellectual curiosity. If the posts on a site are characteristically of this type I sometimes ban it which means new stuff at that url is auto killed. If a post has a linkbait title editors sometimes rephrase it to be more matter of fact. This is especially necessary with links whose titles are rallying cries because otherwise they become implicit "vote up if you believe such and such" posts which are the most extreme form of fluff.The techniques for dealing with links have to evolve because the links do. The existence of aggregators has already affected what they aggregate. Writers now deliberately write things to draw traffic from aggregators mdash sometimes even specific ones. (No the irony of this statement is not lost on me.) Then there are the more sinister mutations like linkjacking mdash posting a paraphrase of someone else's article and submitting that instead of the original. These can get a lot of upvotes because a lot of what's good in an article often survives indeed the closer the paraphrase is to plagiarism the more survives. 3 I think it's important that a site that kills submissions provide a way for users to see what got killed if they want to. That keeps editors honest and just as importantly makes users confident they'd know if the editors stopped being honest. HN users can do this by flipping a switch called showdead in their profile. 4 CommentsBad comments seem to be a harder problem than bad submissions. While the quality of links on the frontpage of HN hasn't changed much the quality of the median comment may have decreased somewhat.There are two main kinds of badness in comments: meanness and stupidity. There is a lot of overlap between the two mdash mean comments are disproportionately likely also to be dumb mdash but the strategies for dealing with them are different. Meanness is easier to control. You can have rules saying one shouldn't be mean and if you enforce them it seems possible to keep a lid on meanness.Keeping a lid on stupidity is harder perhaps because stupidity is not so easily distinguishable. Mean people are more likely to know they're being mean than stupid people are to know they're being stupid.The most dangerous form of stupid comment is not the long but mistaken argument but the dumb joke. Long but mistaken arguments are actually quite rare. There is a strong correlation between comment quality and length if you wanted to compare the quality of comments on community sites average length would be a good predictor. Probably the cause is human nature rather than anything specific to comment threads. Probably it's simply that stupidity more often takes the form of having few ideas than wrong ones.Whatever the cause stupid comments tend to be short. And since it's hard to write a short comment that's distinguished for the amount of information it conveys people try to distinguish them instead by being funny. The most tempting format for stupid comments is the supposedly witty put down probably because put downs are the easiest form of humor. 5 So one advantage of forbidding meanness is that it also cuts down on these.Bad comments are like kudzu: they take over rapidly. Comments have much more effect on new comments than submissions have on new submissions. If someone submits a lame article the other submissions don't all become lame. But if someone posts a stupid comment on a thread that sets the tone for the region around it. People reply to dumb jokes with dumb jokes.Maybe the solution is to add a delay before people can respond to a comment and make the length of the delay inversely proportional to some prediction of its quality. Then dumb threads would grow slower. 6 PeopleI notice most of the techniques I've described are conservative: they're aimed at preserving the character of the site rather than enhancing it. I don't think that's a bias of mine. It's due to the shape of the problem. Hacker News had the good fortune to start out good so in this case it's literally a matter of preservation. But I think this principle would also apply to sites with different origins.The good things in a community site come from people more than technology it's mainly in the prevention of bad things that technology comes into play. Technology certainly can enhance discussion. Nested comments do for example. But I'd rather use a site with primitive features and smart nice users than a more advanced one whose users were idiots or trolls.So the most important thing a community site can do is attract the kind of people it wants. A site trying to be as big as possible wants to attract everyone. But a site aiming at a particular subset of users has to attract just those mdash and just as importantly repel everyone else. I've made a conscious effort to do this on HN. The graphic design is as plain as possible and the site rules discourage dramatic link titles. The goal is that the only thing to interest someone arriving at HN for the first time should be the ideas expressed there.The downside of tuning a site to attract certain people is that to those people it can be too attractive. I'm all too aware how addictive Hacker News can be. For me as for many users it's a kind of virtual town square. When I want to take a break from working I walk into the square just as I might into Harvard Square or University Ave in the physical world. 7 But an online square is more dangerous than a physical one. If I spent half the day loitering on University Ave I'd notice. I have to walk a mile to get there and sitting in a cafe feels different from working. But visiting an online forum takes just a click and feels superficially very much like working. You may be wasting your time but you're not idle. Someone is wrong on the Internet and you're fixing the problem.Hacker News is definitely useful. I've learned a lot from things I've read on HN. I've written several essays that began as comments there. So I wouldn't want the site to go away. But I would like to be sure it's not a net drag on productivity. What a disaster that would be to attract thousands of smart people to a site that caused them to waste lots of time. I wish I could be 100 sure that's not a description of HN.I feel like the addictiveness of games and social applications is still a mostly unsolved problem. The situation now is like it was with crack in the 1980s: we've invented terribly addictive new things and we haven't yet evolved ways to protect ourselves from them. We will eventually and that's one of the problems I hope to focus on next. Notes 1 I tried ranking users by both average and median comment score and average (with the high score thrown out) seemed the more accurate predictor of high quality. Median may be the more accurate predictor of low quality though. 2 Another thing I learned from this experiment is that if you're going to distinguish between people you better be sure you do it right. This is one problem where rapid prototyping doesn't work.Indeed that's the intellectually honest argument for not discriminating between various types of people. The reason not to do it is not that everyone's the same but that it's bad to do wrong and hard to do right. 3 When I catch egregiously linkjacked posts I replace the url with that of whatever they copied. Sites that habitually linkjack get banned. 4 Digg is notorious for its lack of transparency. The root of the problem is not that the guys running Digg are especially sneaky but that they use the wrong algorithm for generating their frontpage. Instead of bubbling up from the bottom as they get more votes as on Reddit stories start at the top and get pushed down by new arrivals.The reason for the difference is that Digg is derived from Slashdot while Reddit is derived from Delicious popular. Digg is Slashdot with voting instead of editors and Reddit is Delicious popular with voting instead of bookmarking. (You can still see fossils of their origins in their graphic design.)Digg's algorithm is very vulnerable to gaming because any story that makes it onto the frontpage is the new top story. Which in turn forces Digg to respond with extreme countermeasures. A lot of startups have some kind of secret about the subterfuges they had to resort to in the early days and I suspect Digg's is the extent to which the top stories were de facto chosen by human editors. 5 The dialog on Beavis and Butthead was composed largely of these and when I read comments on really bad sites I can hear them in their voices. 6 I suspect most of the techniques for discouraging stupid comments have yet to be discovered. Xkcd implemented a particularly clever one in its IRC channel: don't allow the same thing twice. Once someone has said "fail " no one can ever say it again. This would penalize short comments especially because they have less room to avoid collisions in.Another promising idea is the stupid filter which is just like a probabilistic spam filter but trained on corpora of stupid and non stupid comments instead.You may not have to kill bad comments to solve the problem. Comments at the bottom of a long thread are rarely seen so it may be enough to incorporate a prediction of quality in the comment sorting algorithm. 7 What makes most suburbs so demoralizing is that there's no center to walk to. Thanks to Justin Kan Jessica Livingston Robert Morris Alexis Ohanian Emmet Shear and Fred Wilson for reading drafts of this.
A good programmer working intensively on his own code can hold it in his mind the way a mathematician holds a problem he's working on. Mathematicians don't answer questions by working them out on paper the way schoolchildren are taught to. They do more in their heads: they try to understand a problem space well enough that they can walk around it the way you can walk around the memory of the house you grew up in. At its best programming is the same. You hold the whole program in your head and you can manipulate it at will.That's particularly valuable at the start of a project because initially the most important thing is to be able to change what you're doing. Not just to solve the problem in a different way but to change the problem you're solving.Your code is your understanding of the problem you're exploring. So it's only when you have your code in your head that you really understand the problem.It's not easy to get a program into your head. If you leave a project for a few months it can take days to really understand it again when you return to it. Even when you're actively working on a program it can take half an hour to load into your head when you start work each day. And that's in the best case. Ordinary programmers working in typical office conditions never enter this mode. Or to put it more dramatically ordinary programmers working in typical office conditions never really understand the problems they're solving.Even the best programmers don't always have the whole program they're working on loaded into their heads. But there are things you can do to help: Avoid distractions. Distractions are bad for many types of work but especially bad for programming because programmers tend to operate at the limit of the detail they can handle.The danger of a distraction depends not on how long it is but on how much it scrambles your brain. A programmer can leave the office and go and get a sandwich without losing the code in his head. But the wrong kind of interruption can wipe your brain in 30 seconds.Oddly enough scheduled distractions may be worse than unscheduled ones. If you know you have a meeting in an hour you don't even start working on something hard. Work in long stretches. Since there's a fixed cost each time you start working on a program it's more efficient to work in a few long sessions than many short ones. There will of course come a point where you get stupid because you're tired. This varies from person to person. I've heard of people hacking for 36 hours straight but the most I've ever been able to manage is about 18 and I work best in chunks of no more than 12.The optimum is not the limit you can physically endure. There's an advantage as well as a cost of breaking up a project. Sometimes when you return to a problem after a rest you find your unconscious mind has left an answer waiting for you. Use succinct languages. More powerful programming languages make programs shorter. And programmers seem to think of programs at least partially in the language they're using to write them. The more succinct the language the shorter the program and the easier it is to load and keep in your head.You can magnify the effect of a powerful language by using a style called bottom up programming where you write programs in multiple layers the lower ones acting as programming languages for those above. If you do this right you only have to keep the topmost layer in your head. Keep rewriting your program. Rewriting a program often yields a cleaner design. But it would have advantages even if it didn't: you have to understand a program completely to rewrite it so there is no better way to get one loaded into your head. Write rereadable code. All programmers know it's good to write readable code. But you yourself are the most important reader. Especially in the beginning a prototype is a conversation with yourself. And when writing for yourself you have different priorities. If you're writing for other people you may not want to make code too dense. Some parts of a program may be easiest to read if you spread things out like an introductory textbook. Whereas if you're writing code to make it easy to reload into your head it may be best to go for brevity. Work in small groups. When you manipulate a program in your head your vision tends to stop at the edge of the code you own. Other parts you don't understand as well and more importantly can't take liberties with. So the smaller the number of programmers the more completely a project can mutate. If there's just one programmer as there often is at first you can do all encompassing redesigns. Don't have multiple people editing the same piece of code. You never understand other people's code as well as your own. No matter how thoroughly you've read it you've only read it not written it. So if a piece of code is written by multiple authors none of them understand it as well as a single author would.And of course you can't safely redesign something other people are working on. It's not just that you'd have to ask permission. You don't even let yourself think of such things. Redesigning code with several authors is like changing laws redesigning code you alone control is like seeing the other interpretation of an ambiguous image.If you want to put several people to work on a project divide it into components and give each to one person. Start small. A program gets easier to hold in your head as you become familiar with it. You can start to treat parts as black boxes once you feel confident you've fully explored them. But when you first start working on a project you're forced to see everything. If you start with too big a problem you may never quite be able to encompass it. So if you need to write a big complex program the best way to begin may not be to write a spec for it but to write a prototype that solves a subset of the problem. Whatever the advantages of planning they're often outweighed by the advantages of being able to keep a program in your head. It's striking how often programmers manage to hit all eight points by accident. Someone has an idea for a new project but because it's not officially sanctioned he has to do it in off hours mdash which turn out to be more productive because there are no distractions. Driven by his enthusiasm for the new project he works on it for many hours at a stretch. Because it's initially just an experiment instead of a "production" language he uses a mere "scripting" language mdash which is in fact far more powerful. He completely rewrites the program several times that wouldn't be justifiable for an official project but this is a labor of love and he wants it to be perfect. And since no one is going to see it except him he omits any comments except the note to self variety. He works in a small group perforce because he either hasn't told anyone else about the idea yet or it seems so unpromising that no one else is allowed to work on it. Even if there is a group they couldn't have multiple people editing the same code because it changes too fast for that to be possible. And the project starts small because the idea is small at first he just has some cool hack he wants to try out.Even more striking are the number of officially sanctioned projects that manage to do all eight things wrong. In fact if you look at the way software gets written in most organizations it's almost as if they were deliberately trying to do things wrong. In a sense they are. One of the defining qualities of organizations since there have been such a thing is to treat individuals as interchangeable parts. This works well for more parallelizable tasks like fighting wars. For most of history a well drilled army of professional soldiers could be counted on to beat an army of individual warriors no matter how valorous. But having ideas is not very parallelizable. And that's what programs are: ideas.It's not merely true that organizations dislike the idea of depending on individual genius it's a tautology. It's part of the definition of an organization not to. Of our current concept of an organization at least.Maybe we could define a new kind of organization that combined the efforts of individuals without requiring them to be interchangeable. Arguably a market is such a form of organization though it may be more accurate to describe a market as a degenerate case mdash as what you get by default when organization isn't possible.Probably the best we'll do is some kind of hack like making the programming parts of an organization work differently from the rest. Perhaps the optimal solution is for big companies not even to try to develop ideas in house but simply to buy them. But regardless of what the solution turns out to be the first step is to realize there's a problem. There is a contradiction in the very phrase "software company." The two words are pulling in opposite directions. Any good programmer in a large organization is going to be at odds with it because organizations are designed to prevent what programmers strive for.Good programmers manage to get a lot done anyway. But often it requires practically an act of rebellion against the organizations that employ them. Perhaps it will help if more people understand that the way programmers behave is driven by the demands of the work they do. It's not because they're irresponsible that they work in long binges during which they blow off all other obligations plunge straight into programming instead of writing specs first and rewrite code that already works. It's not because they're unfriendly that they prefer to work alone or growl at people who pop their head in the door to say hello. This apparently random collection of annoying habits has a single explanation: the power of holding a program in one's head.Whether or not understanding this can help large organizations it can certainly help their competitors. The weakest point in big companies is that they don't let individual programmers do great work. So if you're a little startup this is the place to attack them. Take on the kind of problems that have to be solved in one big brain. Thanks to Sam Altman David Greenspan Aaron Iba Jessica Livingston Robert Morris Peter Norvig Lisa Randall Emmett Shear Sergei Tsarev and Stephen Wolfram for reading drafts of this.
There are some topics I save up because they'll be so much fun to write about. This is one of them: a list of my heroes.I'm not claiming this is a list of the n most admirable people. Who could make such a list even if they wanted to Einstein isn't on the list for example even though he probably deserves to be on any shortlist of admirable people. I once asked a physicist friend if Einstein was really as smart as his fame implies and she said that yes he was. So why isn't he on the list Because I had to ask. This is a list of people who've influenced me not people who would have if I understood their work.My test was to think of someone and ask "is this person my hero " It often returned surprising answers. For example it returned false for Montaigne who was arguably the inventor of the essay. Why When I thought about what it meant to call someone a hero it meant I'd decide what to do by asking what they'd do in the same situation. That's a stricter standard than admiration.After I made the list I looked to see if there was a pattern and there was a very clear one. Everyone on the list had two qualities: they cared almost excessively about their work and they were absolutely honest. By honest I don't mean trustworthy so much as that they never pander: they never say or do something because that's what the audience wants. They are all fundamentally subversive for this reason though they conceal it to varying degrees. Jack LambertI grew up in Pittsburgh in the 1970s. Unless you were there it's hard to imagine how that town felt about the Steelers. Locally all the news was bad. The steel industry was dying. But the Steelers were the best team in football mdash and moreover in a way that seemed to reflect the personality of the city. They didn't do anything fancy. They just got the job done.Other players were more famous: Terry Bradshaw Franco Harris Lynn Swann. But they played offense and you always get more attention for that. It seemed to me as a twelve year old football expert that the best of them all was Jack Lambert. And what made him so good was that he was utterly relentless. He didn't just care about playing well he cared almost too much. He seemed to regard it as a personal insult when someone from the other team had possession of the ball on his side of the line of scrimmage.The suburbs of Pittsburgh in the 1970s were a pretty dull place. School was boring. All the adults around were bored with their jobs working for big companies. Everything that came to us through the mass media was (a) blandly uniform and (b) produced elsewhere. Jack Lambert was the exception. He was like nothing else I'd seen. Kenneth ClarkKenneth Clark is the best nonfiction writer I know of on any subject. Most people who write about art history don't really like art you can tell from a thousand little signs. But Clark did and not just intellectually but the way one anticipates a delicious dinner.What really makes him stand out though is the quality of his ideas. His style is deceptively casual but there is more in his books than in a library of art monographs. Reading The Nude is like a ride in a Ferrari. Just as you're getting settled you're slammed back in your seat by the acceleration. Before you can adjust you're thrown sideways as the car screeches into the first turn. His brain throws off ideas almost too fast to grasp them. Finally at the end of the chapter you come to a halt with your eyes wide and a big smile on your face.Kenneth Clark was a star in his day thanks to the documentary series Civilisation. And if you read only one book about art history Civilisation is the one I'd recommend. It's much better than the drab Sears Catalogs of art that undergraduates are forced to buy for Art History 101. Larry MihalkoA lot of people have a great teacher at some point in their childhood. Larry Mihalko was mine. When I look back it's like there's a line drawn between third and fourth grade. After Mr. Mihalko everything was different.Why First of all he was intellectually curious. I had a few other teachers who were smart but I wouldn't describe them as intellectually curious. In retrospect he was out of place as an elementary school teacher and I think he knew it. That must have been hard for him but it was wonderful for us his students. His class was a constant adventure. I used to like going to school every day.The other thing that made him different was that he liked us. Kids are good at telling that. The other teachers were at best benevolently indifferent. But Mr. Mihalko seemed like he actually wanted to be our friend. On the last day of fourth grade he got out one of the heavy school record players and played James Taylor's "You've Got a Friend" to us. Just call out my name and you know wherever I am I'll come running. He died at 59 of lung cancer. I've never cried like I cried at his funeral. LeonardoOne of the things I've learned about making things that I didn't realize when I was a kid is that much of the best stuff isn't made for audiences but for oneself. You see paintings and drawings in museums and imagine they were made for you to look at. Actually a lot of the best ones were made as a way of exploring the world not as a way to please other people. The best of these explorations are sometimes more pleasing than stuff made explicitly to please.Leonardo did a lot of things. One of his most admirable qualities was that he did so many different things that were admirable. What people know of him now is his paintings and his more flamboyant inventions like flying machines. That makes him seem like some kind of dreamer who sketched artists' conceptions of rocket ships on the side. In fact he made a large number of far more practical technical discoveries. He was as good an engineer as a painter.His most impressive work to me is his drawings. They're clearly made more as a way of studying the world than producing something beautiful. And yet they can hold their own with any work of art ever made. No one else before or since was that good when no one was looking. Robert MorrisRobert Morris has a very unusual quality: he's never wrong. It might seem this would require you to be omniscient but actually it's surprisingly easy. Don't say anything unless you're fairly sure of it. If you're not omniscient you just don't end up saying much.More precisely the trick is to pay careful attention to how you qualify what you say. By using this trick Robert has as far as I know managed to be mistaken only once and that was when he was an undergrad. When the Mac came out he said that little desktop computers would never be suitable for real hacking.It's wrong to call it a trick in his case though. If it were a conscious trick he would have slipped in a moment of excitement. With Robert this quality is wired in. He has an almost superhuman integrity. He's not just generally correct but also correct about how correct he is.You'd think it would be such a great thing never to be wrong that everyone would do this. It doesn't seem like that much extra work to pay as much attention to the error on an idea as to the idea itself. And yet practically no one does. I know how hard it is because since meeting Robert I've tried to do in software what he seems to do in hardware. P. G. WodehousePeople are finally starting to admit that Wodehouse was a great writer. If you want to be thought a great novelist in your own time you have to sound intellectual. If what you write is popular or entertaining or funny you're ipso facto suspect. That makes Wodehouse doubly impressive because it meant that to write as he wanted to he had to commit to being despised in his own lifetime.Evelyn Waugh called him a great writer but to most people at the time that would have read as a chivalrous or deliberately perverse gesture. At the time any random autobiographical novel by a recent college grad could count on more respectful treatment from the literary establishment.Wodehouse may have begun with simple atoms but the way he composed them into molecules was near faultless. His rhythm in particular. It makes me self conscious to write about it. I can think of only two other writers who came near him for style: Evelyn Waugh and Nancy Mitford. Those three used the English language like they owned it.But Wodehouse has something neither of them did. He's at ease. Evelyn Waugh and Nancy Mitford cared what other people thought of them: he wanted to seem aristocratic she was afraid she wasn't smart enough. But Wodehouse didn't give a damn what anyone thought of him. He wrote exactly what he wanted. Alexander CalderCalder's on this list because he makes me happy. Can his work stand up to Leonardo's Probably not. There might not be anything from the 20th Century that can. But what was good about Modernism Calder had and had in a way that he made seem effortless.What was good about Modernism was its freshness. Art became stuffy in the nineteenth century. The paintings that were popular at the time were mostly the art equivalent of McMansions mdash big pretentious and fake. Modernism meant starting over making things with the same earnest motives that children might. The artists who benefited most from this were the ones who had preserved a child's confidence like Klee and Calder.Klee was impressive because he could work in so many different styles. But between the two I like Calder better because his work seemed happier. Ultimately the point of art is to engage the viewer. It's hard to predict what will often something that seems interesting at first will bore you after a month. Calder's sculptures never get boring. They just sit there quietly radiating optimism like a battery that never runs out. As far as I can tell from books and photographs the happiness of Calder's work is his own happiness showing through. Jane AustenEveryone admires Jane Austen. Add my name to the list. To me she seems the best novelist of all time.I'm interested in how things work. When I read most novels I pay as much attention to the author's choices as to the story. But in her novels I can't see the gears at work. Though I'd really like to know how she does what she does I can't figure it out because she's so good that her stories don't seem made up. I feel like I'm reading a description of something that actually happened.I used to read a lot of novels when I was younger. I can't read most anymore because they don't have enough information in them. Novels seem so impoverished compared to history and biography. But reading Austen is like reading nonfiction. She writes so well you don't even notice her. John McCarthyJohn McCarthy invented Lisp the field of (or at least the term) artificial intelligence and was an early member of both of the top two computer science departments MIT and Stanford. No one would dispute that he's one of the greats but he's an especial hero to me because of Lisp.It's hard for us now to understand what a conceptual leap that was at the time. Paradoxically one of the reasons his achievement is hard to appreciate is that it was so successful. Practically every programming language invented in the last 20 years includes ideas from Lisp and each year the median language gets more Lisplike.In 1958 these ideas were anything but obvious. In 1958 there seem to have been two ways of thinking about programming. Some people thought of it as math and proved things about Turing Machines. Others thought of it as a way to get things done and designed languages all too influenced by the technology of the day. McCarthy alone bridged the gap. He designed a language that was math. But designed is not really the word discovered is more like it. The SpitfireAs I was making this list I found myself thinking of people like Douglas Bader and R.J. Mitchell and Jeffrey Quill and I realized that though all of them had done many things in their lives there was one factor above all that connected them: the Spitfire.This is supposed to be a list of heroes. How can a machine be on it Because that machine was not just a machine. It was a lens of heroes. Extraordinary devotion went into it and extraordinary courage came out.It's a cliche to call World War II a contest between good and evil but between fighter designs it really was. The Spitfire's original nemesis the ME 109 was a brutally practical plane. It was a killing machine. The Spitfire was optimism embodied. And not just in its beautiful lines: it was at the edge of what could be manufactured. But taking the high road worked. In the air beauty had the edge just. Steve JobsPeople alive when Kennedy was killed usually remember exactly where they were when they heard about it. I remember exactly where I was when a friend asked if I'd heard Steve Jobs had cancer. It was like the floor dropped out. A few seconds later she told me that it was a rare operable type and that he'd be ok. But those seconds seemed long.I wasn't sure whether to include Jobs on this list. A lot of people at Apple seem to be afraid of him which is a bad sign. But he compels admiration.There's no name for what Steve Jobs is because there hasn't been anyone quite like him before. He doesn't design Apple's products himself. Historically the closest analogy to what he does are the great Renaissance patrons of the arts. As the CEO of a company that makes him unique.Most CEOs delegate taste to a subordinate. The design paradox means they're choosing more or less at random. But Steve Jobs actually has taste himself mdash such good taste that he's shown the world how much more important taste is than they realized. Isaac NewtonNewton has a strange role in my pantheon of heroes: he's the one I reproach myself with. He worked on big things at least for part of his life. It's so easy to get distracted working on small stuff. The questions you're answering are pleasantly familiar. You get immediate rewards mdash in fact you get bigger rewards in your time if you work on matters of passing importance. But I'm uncomfortably aware that this is the route to well deserved obscurity.To do really great things you have to seek out questions people didn't even realize were questions. There have probably been other people who did this as well as Newton for their time but Newton is my model of this kind of thought. I can just begin to understand what it must have felt like for him.You only get one life. Why not do something huge The phrase "paradigm shift" is overused now but Kuhn was onto something. And you know more are out there separated from us by what will later seem a surprisingly thin wall of laziness and stupidity. If we work like Newton.Thanks to Trevor Blackwell Jessica Livingston and Jackie McDonough for reading drafts of this.
For nearly all of history the success of a society was proportionate to its ability to assemble large and disciplined organizations. Those who bet on economies of scale generally won which meant the largest organizations were the most successful ones.Things have already changed so much that this is hard for us to believe but till just a few decades ago the largest organizations tended to be the most progressive. An ambitious kid graduating from college in 1960 wanted to work in the huge gleaming offices of Ford or General Electric or NASA. Small meant small time. Small in 1960 didn't mean a cool little startup. It meant uncle Sid's shoe store.When I grew up in the 1970s the idea of the "corporate ladder" was still very much alive. The standard plan was to try to get into a good college from which one would be drafted into some organization and then rise to positions of gradually increasing responsibility. The more ambitious merely hoped to climb the same ladder faster. 1 But in the late twentieth century something changed. It turned out that economies of scale were not the only force at work. Particularly in technology the increase in speed one could get from smaller groups started to trump the advantages of size.The future turned out to be different from the one we were expecting in 1970. The domed cities and flying cars we expected have failed to materialize. But fortunately so have the jumpsuits with badges indicating our specialty and rank. Instead of being dominated by a few giant tree structured organizations it's now looking like the economy of the future will be a fluid network of smaller independent units.It's not so much that large organizations stopped working. There's no evidence that famously successful organizations like the Roman army or the British East India Company were any less afflicted by protocol and politics than organizations of the same size today. But they were competing against opponents who couldn't change the rules on the fly by discovering new technology. Now it turns out the rule "large and disciplined organizations win" needs to have a qualification appended: "at games that change slowly." No one knew till change reached a sufficient speed.Large organizations will start to do worse now though because for the first time in history they're no longer getting the best people. An ambitious kid graduating from college now doesn't want to work for a big company. They want to work for the hot startup that's rapidly growing into one. If they're really ambitious they want to start it. 2 This doesn't mean big companies will disappear. To say that startups will succeed implies that big companies will exist because startups that succeed either become big companies or are acquired by them. 3 But large organizations will probably never again play the leading role they did up till the last quarter of the twentieth century.It's kind of surprising that a trend that lasted so long would ever run out. How often does it happen that a rule works for thousands of years then switches polarity The millennia long run of bigger is better left us with a lot of traditions that are now obsolete but extremely deeply rooted. Which means the ambitious can now do arbitrage on them. It will be very valuable to understand precisely which ideas to keep and which can now be discarded.The place to look is where the spread of smallness began: in the world of startups.There have always been occasional cases particularly in the US of ambitious people who grew the ladder under them instead of climbing it. But till recently this was an anomalous route that tended to be followed only by outsiders. It was no coincidence that the great industrialists of the nineteenth century had so little formal education. As huge as their companies eventually became they were all essentially mechanics and shopkeepers at first. That was a social step no one with a college education would take if they could avoid it. Till the rise of technology startups and in particular Internet startups it was very unusual for educated people to start their own businesses.The eight men who left Shockley Semiconductor to found Fairchild Semiconductor the original Silicon Valley startup weren't even trying to start a company at first. They were just looking for a company willing to hire them as a group. Then one of their parents introduced them to a small investment bank that offered to find funding for them to start their own so they did. But starting a company was an alien idea to them it was something they backed into. 4 Now I would guess that practically every Stanford or Berkeley undergrad who knows how to program has at least considered the idea of starting a startup. East Coast universities are not far behind and British universities only a little behind them. This pattern suggests that attitudes at Stanford and Berkeley are not an anomaly but a leading indicator. This is the way the world is going.Of course Internet startups are still only a fraction of the world's economy. Could a trend based on them be that powerful I think so. There's no reason to suppose there's any limit to the amount of work that could be done in this area. Like science wealth seems to expand fractally. Steam power was a sliver of the British economy when Watt started working on it. But his work led to more work till that sliver had expanded into something bigger than the whole economy of which it had initially been a part.The same thing could happen with the Internet. If Internet startups offer the best opportunity for ambitious people then a lot of ambitious people will start them and this bit of the economy will balloon in the usual fractal way.Even if Internet related applications only become a tenth of the world's economy this component will set the tone for the rest. The most dynamic part of the economy always does in everything from salaries to standards of dress. Not just because of its prestige but because the principles underlying the most dynamic part of the economy tend to be ones that work.For the future the trend to bet on seems to be networks of small autonomous groups whose performance is measured individually. And the societies that win will be the ones with the least impedance.As with the original industrial revolution some societies are going to be better at this than others. Within a generation of its birth in England the Industrial Revolution had spread to continental Europe and North America. But it didn't spread everywhere. This new way of doing things could only take root in places that were prepared for it. It could only spread to places that already had a vigorous middle class.There is a similar social component to the transformation that began in Silicon Valley in the 1960s. Two new kinds of techniques were developed there: techniques for building integrated circuits and techniques for building a new type of company designed to grow fast by creating new technology. The techniques for building integrated circuits spread rapidly to other countries. But the techniques for building startups didn't. Fifty years later startups are ubiquitous in Silicon Valley and common in a handful of other US cities but they're still an anomaly in most of the world.Part of the reason mdash possibly the main reason mdash that startups have not spread as broadly as the Industrial Revolution did is their social disruptiveness. Though it brought many social changes the Industrial Revolution was not fighting the principle that bigger is better. Quite the opposite: the two dovetailed beautifully. The new industrial companies adapted the customs of existing large organizations like the military and the civil service and the resulting hybrid worked well. "Captains of industry" issued orders to "armies of workers " and everyone knew what they were supposed to do.Startups seem to go more against the grain socially. It's hard for them to flourish in societies that value hierarchy and stability just as it was hard for industrialization to flourish in societies ruled by people who stole at will from the merchant class. But there were already a handful of countries past that stage when the Industrial Revolution happened. There do not seem to be that many ready this time. Notes 1 One of the bizarre consequences of this model was that the usual way to make more money was to become a manager. This is one of the things startups fix. 2 There are a lot of reasons American car companies have been doing so much worse than Japanese car companies but at least one of them is a cause for optimism: American graduates have more options. 3 It's possible that companies will one day be able to grow big in revenues without growing big in people but we are not very far along that trend yet. 4 Lecuyer Christophe Making Silicon Valley MIT Press 2006.Thanks to Trevor Blackwell Paul Buchheit Jessica Livingston and Robert Morris for reading drafts of this.
(This essay is derived from a guest lecture at Harvard which incorporated an earlier talk at Northeastern.)When I finished grad school in computer science I went to art school to study painting. A lot of people seemed surprised that someone interested in computers would also be interested in painting. They seemed to think that hacking and painting were very different kinds of work that hacking was cold precise and methodical and that painting was the frenzied expression of some primal urge.Both of these images are wrong. Hacking and painting have a lot in common. In fact of all the different types of people I've known hackers and painters are among the most alike.What hackers and painters have in common is that they're both makers. Along with composers architects and writers what hackers and painters are trying to do is make good things. They're not doing research per se though if in the course of trying to make good things they discover some new technique so much the better.I've never liked the term "computer science." The main reason I don't like it is that there's no such thing. Computer science is a grab bag of tenuously related areas thrown together by an accident of history like Yugoslavia. At one end you have people who are really mathematicians but call what they're doing computer science so they can get DARPA grants. In the middle you have people working on something like the natural history of computers studying the behavior of algorithms for routing data through networks for example. And then at the other extreme you have the hackers who are trying to write interesting software and for whom computers are just a medium of expression as concrete is for architects or paint for painters. It's as if mathematicians physicists and architects all had to be in the same department.Sometimes what the hackers do is called "software engineering " but this term is just as misleading. Good software designers are no more engineers than architects are. The border between architecture and engineering is not sharply defined but it's there. It falls between what and how: architects decide what to do and engineers figure out how to do it.What and how should not be kept too separate. You're asking for trouble if you try to decide what to do without understanding how to do it. But hacking can certainly be more than just deciding how to implement some spec. At its best it's creating the spec though it turns out the best way to do that is to implement it.Perhaps one day "computer science" will like Yugoslavia get broken up into its component parts. That might be a good thing. Especially if it meant independence for my native land hacking.Bundling all these different types of work together in one department may be convenient administratively but it's confusing intellectually. That's the other reason I don't like the name "computer science." Arguably the people in the middle are doing something like an experimental science. But the people at either end the hackers and the mathematicians are not actually doing science.The mathematicians don't seem bothered by this. They happily set to work proving theorems like the other mathematicians over in the math department and probably soon stop noticing that the building they work in says computer science'' on the outside. But for the hackers this label is a problem. If what they're doing is called science it makes them feel they ought to be acting scientific. So instead of doing what they really want to do which is to design beautiful software hackers in universities and research labs feel they ought to be writing research papers.In the best case the papers are just a formality. Hackers write cool software and then write a paper about it and the paper becomes a proxy for the achievement represented by the software. But often this mismatch causes problems. It's easy to drift away from building beautiful things toward building ugly things that make more suitable subjects for research papers.Unfortunately beautiful things don't always make the best subjects for papers. Number one research must be original and as anyone who has written a PhD dissertation knows the way to be sure that you're exploring virgin territory is to to stake out a piece of ground that no one wants. Number two research must be substantial and awkward systems yield meatier papers because you can write about the obstacles you have to overcome in order to get things done. Nothing yields meaty problems like starting with the wrong assumptions. Most of AI is an example of this rule if you assume that knowledge can be represented as a list of predicate logic expressions whose arguments represent abstract concepts you'll have a lot of papers to write about how to make this work. As Ricky Ricardo used to say "Lucy you got a lot of explaining to do."The way to create something beautiful is often to make subtle tweaks to something that already exists or to combine existing ideas in a slightly new way. This kind of work is hard to convey in a research paper.So why do universities and research labs continue to judge hackers by publications For the same reason that "scholastic aptitude" gets measured by simple minded standardized tests or the productivity of programmers gets measured in lines of code. These tests are easy to apply and there is nothing so tempting as an easy test that kind of works.Measuring what hackers are actually trying to do designing beautiful software would be much more difficult. You need a good sense of design to judge good design. And there is no correlation except possibly a negative one between people's ability to recognize good design and their confidence that they can.The only external test is time. Over time beautiful things tend to thrive and ugly things tend to get discarded. Unfortunately the amounts of time involved can be longer than human lifetimes. Samuel Johnson said it took a hundred years for a writer's reputation to converge. You have to wait for the writer's influential friends to die and then for all their followers to die.I think hackers just have to resign themselves to having a large random component in their reputations. In this they are no different from other makers. In fact they're lucky by comparison. The influence of fashion is not nearly so great in hacking as it is in painting.There are worse things than having people misunderstand your work. A worse danger is that you will yourself misunderstand your work. Related fields are where you go looking for ideas. If you find yourself in the computer science department there is a natural temptation to believe for example that hacking is the applied version of what theoretical computer science is the theory of. All the time I was in graduate school I had an uncomfortable feeling in the back of my mind that I ought to know more theory and that it was very remiss of me to have forgotten all that stuff within three weeks of the final exam.Now I realize I was mistaken. Hackers need to understand the theory of computation about as much as painters need to understand paint chemistry. You need to know how to calculate time and space complexity and about Turing completeness. You might also want to remember at least the concept of a state machine in case you have to write a parser or a regular expression library. Painters in fact have to remember a good deal more about paint chemistry than that.I've found that the best sources of ideas are not the other fields that have the word "computer" in their names but the other fields inhabited by makers. Painting has been a much richer source of ideas than the theory of computation.For example I was taught in college that one ought to figure out a program completely on paper before even going near a computer. I found that I did not program this way. I found that I liked to program sitting in front of a computer not a piece of paper. Worse still instead of patiently writing out a complete program and assuring myself it was correct I tended to just spew out code that was hopelessly broken and gradually beat it into shape. Debugging I was taught was a kind of final pass where you caught typos and oversights. The way I worked it seemed like programming consisted of debugging.For a long time I felt bad about this just as I once felt bad that I didn't hold my pencil the way they taught me to in elementary school. If I had only looked over at the other makers the painters or the architects I would have realized that there was a name for what I was doing: sketching. As far as I can tell the way they taught me to program in college was all wrong. You should figure out programs as you're writing them just as writers and painters and architects do.Realizing this has real implications for software design. It means that a programming language should above all be malleable. A programming language is for thinking of programs not for expressing programs you've already thought of. It should be a pencil not a pen. Static typing would be a fine idea if people actually did write programs the way they taught me to in college. But that's not how any of the hackers I know write programs. We need a language that lets us scribble and smudge and smear not a language where you have to sit with a teacup of types balanced on your knee and make polite conversation with a strict old aunt of a compiler.While we're on the subject of static typing identifying with the makers will save us from another problem that afflicts the sciences: math envy. Everyone in the sciences secretly believes that mathematicians are smarter than they are. I think mathematicians also believe this. At any rate the result is that scientists tend to make their work look as mathematical as possible. In a field like physics this probably doesn't do much harm but the further you get from the natural sciences the more of a problem it becomes.A page of formulas just looks so impressive. (Tip: for extra impressiveness use Greek variables.) And so there is a great temptation to work on problems you can treat formally rather than problems that are say important.If hackers identified with other makers like writers and painters they wouldn't feel tempted to do this. Writers and painters don't suffer from math envy. They feel as if they're doing something completely unrelated. So are hackers I think.If universities and research labs keep hackers from doing the kind of work they want to do perhaps the place for them is in companies. Unfortunately most companies won't let hackers do what they want either. Universities and research labs force hackers to be scientists and companies force them to be engineers.I only discovered this myself quite recently. When Yahoo bought Viaweb they asked me what I wanted to do. I had never liked the business side very much and said that I just wanted to hack. When I got to Yahoo I found that what hacking meant to them was implementing software not designing it. Programmers were seen as technicians who translated the visions (if that is the word) of product managers into code.This seems to be the default plan in big companies. They do it because it decreases the standard deviation of the outcome. Only a small percentage of hackers can actually design software and it's hard for the people running a company to pick these out. So instead of entrusting the future of the software to one brilliant hacker most companies set things up so that it is designed by committee and the hackers merely implement the design.If you want to make money at some point remember this because this is one of the reasons startups win. Big companies want to decrease the standard deviation of design outcomes because they want to avoid disasters. But when you damp oscillations you lose the high points as well as the low. This is not a problem for big companies because they don't win by making great products. Big companies win by sucking less than other big companies.So if you can figure out a way to get in a design war with a company big enough that its software is designed by product managers they'll never be able to keep up with you. These opportunities are not easy to find though. It's hard to engage a big company in a design war just as it's hard to engage an opponent inside a castle in hand to hand combat. It would be pretty easy to write a better word processor than Microsoft Word for example but Microsoft within the castle of their operating system monopoly probably wouldn't even notice if you did.The place to fight design wars is in new markets where no one has yet managed to establish any fortifications. That's where you can win big by taking the bold approach to design and having the same people both design and implement the product. Microsoft themselves did this at the start. So did Apple. And Hewlett Packard. I suspect almost every successful startup has.So one way to build great software is to start your own startup. There are two problems with this though. One is that in a startup you have to do so much besides write software. At Viaweb I considered myself lucky if I got to hack a quarter of the time. And the things I had to do the other three quarters of the time ranged from tedious to terrifying. I have a benchmark for this because I once had to leave a board meeting to have some cavities filled. I remember sitting back in the dentist's chair waiting for the drill and feeling like I was on vacation.The other problem with startups is that there is not much overlap between the kind of software that makes money and the kind that's interesting to write. Programming languages are interesting to write and Microsoft's first product was one in fact but no one will pay for programming languages now. If you want to make money you tend to be forced to work on problems that are too nasty for anyone to solve for free.All makers face this problem. Prices are determined by supply and demand and there is just not as much demand for things that are fun to work on as there is for things that solve the mundane problems of individual customers. Acting in off Broadway plays just doesn't pay as well as wearing a gorilla suit in someone's booth at a trade show. Writing novels doesn't pay as well as writing ad copy for garbage disposals. And hacking programming languages doesn't pay as well as figuring out how to connect some company's legacy database to their Web server.I think the answer to this problem in the case of software is a concept known to nearly all makers: the day job. This phrase began with musicians who perform at night. More generally it means that you have one kind of work you do for money and another for love.Nearly all makers have day jobs early in their careers. Painters and writers notoriously do. If you're lucky you can get a day job that's closely related to your real work. Musicians often seem to work in record stores. A hacker working on some programming language or operating system might likewise be able to get a day job using it. 1 When I say that the answer is for hackers to have day jobs and work on beautiful software on the side I'm not proposing this as a new idea. This is what open source hacking is all about. What I'm saying is that open source is probably the right model because it has been independently confirmed by all the other makers.It seems surprising to me that any employer would be reluctant to let hackers work on open source projects. At Viaweb we would have been reluctant to hire anyone who didn't. When we interviewed programmers the main thing we cared about was what kind of software they wrote in their spare time. You can't do anything really well unless you love it and if you love to hack you'll inevitably be working on projects of your own. 2 Because hackers are makers rather than scientists the right place to look for metaphors is not in the sciences but among other kinds of makers. What else can painting teach us about hacking One thing we can learn or at least confirm from the example of painting is how to learn to hack. You learn to paint mostly by doing it. Ditto for hacking. Most hackers don't learn to hack by taking college courses in programming. They learn to hack by writing programs of their own at age thirteen. Even in college classes you learn to hack mostly by hacking. 3 Because painters leave a trail of work behind them you can watch them learn by doing. If you look at the work of a painter in chronological order you'll find that each painting builds on things that have been learned in previous ones. When there's something in a painting that works very well you can usually find version 1 of it in a smaller form in some earlier painting.I think most makers work this way. Writers and architects seem to as well. Maybe it would be good for hackers to act more like painters and regularly start over from scratch instead of continuing to work for years on one project and trying to incorporate all their later ideas as revisions.The fact that hackers learn to hack by doing it is another sign of how different hacking is from the sciences. Scientists don't learn science by doing it but by doing labs and problem sets. Scientists start out doing work that's perfect in the sense that they're just trying to reproduce work someone else has already done for them. Eventually they get to the point where they can do original work. Whereas hackers from the start are doing original work it's just very bad. So hackers start original and get good and scientists start good and get original. The other way makers learn is from examples. For a painter a museum is a reference library of techniques. For hundreds of years it has been part of the traditional education of painters to copy the works of the great masters because copying forces you to look closely at the way a painting is made.Writers do this too. Benjamin Franklin learned to write by summarizing the points in the essays of Addison and Steele and then trying to reproduce them. Raymond Chandler did the same thing with detective stories.Hackers likewise can learn to program by looking at good programs not just at what they do but the source code too. One of the less publicized benefits of the open source movement is that it has made it easier to learn to program. When I learned to program we had to rely mostly on examples in books. The one big chunk of code available then was Unix but even this was not open source. Most of the people who read the source read it in illicit photocopies of John Lions' book which though written in 1977 was not allowed to be published until 1996.Another example we can take from painting is the way that paintings are created by gradual refinement. Paintings usually begin with a sketch. Gradually the details get filled in. But it is not merely a process of filling in. Sometimes the original plans turn out to be mistaken. Countless paintings when you look at them in xrays turn out to have limbs that have been moved or facial features that have been readjusted.Here's a case where we can learn from painting. I think hacking should work this way too. It's unrealistic to expect that the specifications for a program will be perfect. You're better off if you admit this up front and write programs in a way that allows specifications to change on the fly.(The structure of large companies makes this hard for them to do so here is another place where startups have an advantage.)Everyone by now presumably knows about the danger of premature optimization. I think we should be just as worried about premature design deciding too early what a program should do.The right tools can help us avoid this danger. A good programming language should like oil paint make it easy to change your mind. Dynamic typing is a win here because you don't have to commit to specific data representations up front. But the key to flexibility I think is to make the language very abstract. The easiest program to change is one that's very short. This sounds like a paradox but a great painting has to be better than it has to be. For example when Leonardo painted the portrait of Ginevra de Benci in the National Gallery he put a juniper bush behind her head. In it he carefully painted each individual leaf. Many painters might have thought this is just something to put in the background to frame her head. No one will look that closely at it.Not Leonardo. How hard he worked on part of a painting didn't depend at all on how closely he expected anyone to look at it. He was like Michael Jordan. Relentless.Relentlessness wins because in the aggregate unseen details become visible. When people walk by the portrait of Ginevra de Benci their attention is often immediately arrested by it even before they look at the label and notice that it says Leonardo da Vinci. All those unseen details combine to produce something that's just stunning like a thousand barely audible voices all singing in tune.Great software likewise requires a fanatical devotion to beauty. If you look inside good software you find that parts no one is ever supposed to see are beautiful too. I'm not claiming I write great software but I know that when it comes to code I behave in a way that would make me eligible for prescription drugs if I approached everyday life the same way. It drives me crazy to see code that's badly indented or that uses ugly variable names.If a hacker were a mere implementor turning a spec into code then he could just work his way through it from one end to the other like someone digging a ditch. But if the hacker is a creator we have to take inspiration into account.In hacking like painting work comes in cycles. Sometimes you get excited about some new project and you want to work sixteen hours a day on it. Other times nothing seems interesting.To do good work you have to take these cycles into account because they're affected by how you react to them. When you're driving a car with a manual transmission on a hill you have to back off the clutch sometimes to avoid stalling. Backing off can likewise prevent ambition from stalling. In both painting and hacking there are some tasks that are terrifyingly ambitious and others that are comfortingly routine. It's a good idea to save some easy tasks for moments when you would otherwise stall.In hacking this can literally mean saving up bugs. I like debugging: it's the one time that hacking is as straightforward as people think it is. You have a totally constrained problem and all you have to do is solve it. Your program is supposed to do x. Instead it does y. Where does it go wrong You know you're going to win in the end. It's as relaxing as painting a wall.The example of painting can teach us not only how to manage our own work but how to work together. A lot of the great art of the past is the work of multiple hands though there may only be one name on the wall next to it in the museum. Leonardo was an apprentice in the workshop of Verrocchio and painted one of the angels in his Baptism of Christ. This sort of thing was the rule not the exception. Michelangelo was considered especially dedicated for insisting on painting all the figures on the ceiling of the Sistine Chapel himself.As far as I know when painters worked together on a painting they never worked on the same parts. It was common for the master to paint the principal figures and for assistants to paint the others and the background. But you never had one guy painting over the work of another.I think this is the right model for collaboration in software too. Don't push it too far. When a piece of code is being hacked by three or four different people no one of whom really owns it it will end up being like a common room. It will tend to feel bleak and abandoned and accumulate cruft. The right way to collaborate I think is to divide projects into sharply defined modules each with a definite owner and with interfaces between them that are as carefully designed and if possible as articulated as programming languages.Like painting most software is intended for a human audience. And so hackers like painters must have empathy to do really great work. You have to be able to see things from the user's point of view.When I was a kid I was always being told to look at things from someone else's point of view. What this always meant in practice was to do what someone else wanted instead of what I wanted. This of course gave empathy a bad name and I made a point of not cultivating it.Boy was I wrong. It turns out that looking at things from other people's point of view is practically the secret of success. It doesn't necessarily mean being self sacrificing. Far from it. Understanding how someone else sees things doesn't imply that you'll act in his interest in some situations in war for example you want to do exactly the opposite. 4 Most makers make things for a human audience. And to engage an audience you have to understand what they need. Nearly all the greatest paintings are paintings of people for example because people are what people are interested in.Empathy is probably the single most important difference between a good hacker and a great one. Some hackers are quite smart but when it comes to empathy are practically solipsists. It's hard for such people to design great software 5 because they can't see things from the user's point of view.One way to tell how good people are at empathy is to watch them explain a technical question to someone without a technical background. We probably all know people who though otherwise smart are just comically bad at this. If someone asks them at a dinner party what a programming language is they'll say something like Oh a high level language is what the compiler uses as input to generate object code.'' High level language Compiler Object code Someone who doesn't know what a programming language is obviously doesn't know what these things are either.Part of what software has to do is explain itself. So to write good software you have to understand how little users understand. They're going to walk up to the software with no preparation and it had better do what they guess it will because they're not going to read the manual. The best system I've ever seen in this respect was the original Macintosh in 1985. It did what software almost never does: it just worked. 6 Source code too should explain itself. If I could get people to remember just one quote about programming it would be the one at the beginning of Structure and Interpretation of Computer Programs. Programs should be written for people to read and only incidentally for machines to execute. You need to have empathy not just for your users but for your readers. It's in your interest because you'll be one of them. Many a hacker has written a program only to find on returning to it six months later that he has no idea how it works. I know several people who've sworn off Perl after such experiences. 7 Lack of empathy is associated with intelligence to the point that there is even something of a fashion for it in some places. But I don't think there's any correlation. You can do well in math and the natural sciences without having to learn empathy and people in these fields tend to be smart so the two qualities have come to be associated. But there are plenty of dumb people who are bad at empathy too. Just listen to the people who call in with questions on talk shows. They ask whatever it is they're asking in such a roundabout way that the hosts often have to rephrase the question for them.So if hacking works like painting and writing is it as cool After all you only get one life. You might as well spend it working on something great.Unfortunately the question is hard to answer. There is always a big time lag in prestige. It's like light from a distant star. Painting has prestige now because of great work people did five hundred years ago. At the time no one thought these paintings were as important as we do today. It would have seemed very odd to people at the time that Federico da Montefeltro the Duke of Urbino would one day be known mostly as the guy with the strange nose in a painting by Piero della Francesca.So while I admit that hacking doesn't seem as cool as painting now we should remember that painting itself didn't seem as cool in its glory days as it does now.What we can say with some confidence is that these are the glory days of hacking. In most fields the great work is done early on. The paintings made between 1430 and 1500 are still unsurpassed. Shakespeare appeared just as professional theater was being born and pushed the medium so far that every playwright since has had to live in his shadow. Albrecht Durer did the same thing with engraving and Jane Austen with the novel.Over and over we see the same pattern. A new medium appears and people are so excited about it that they explore most of its possibilities in the first couple generations. Hacking seems to be in this phase now.Painting was not in Leonardo's time as cool as his work helped make it. How cool hacking turns out to be will depend on what we can do with this new medium. Notes 1 The greatest damage that photography has done to painting may be the fact that it killed the best day job. Most of the great painters in history supported themselves by painting portraits. 2 I've been told that Microsoft discourages employees from contributing to open source projects even in their spare time. But so many of the best hackers work on open source projects now that the main effect of this policy may be to ensure that they won't be able to hire any first rate programmers. 3 What you learn about programming in college is much like what you learn about books or clothes or dating: what bad taste you had in high school. 4 Here's an example of applied empathy. At Viaweb if we couldn't decide between two alternatives we'd ask what would our competitors hate most At one point a competitor added a feature to their software that was basically useless but since it was one of few they had that we didn't they made much of it in the trade press. We could have tried to explain that the feature was useless but we decided it would annoy our competitor more if we just implemented it ourselves so we hacked together our own version that afternoon. 5 Except text editors and compilers. Hackers don't need empathy to design these because they are themselves typical users. 6 Well almost. They overshot the available RAM somewhat causing much inconvenient disk swapping but this could be fixed within a few months by buying an additional disk drive. 7 The way to make programs easy to read is not to stuff them with comments. I would take Abelson and Sussman's quote a step further. Programming languages should be designed to express algorithms and only incidentally to tell computers how to execute them. A good programming language ought to be better for explaining software than English. You should only need comments when there is some kind of kludge you need to warn readers about just as on a road there are only arrows on parts with unexpectedly sharp curves. Thanks to Trevor Blackwell Robert Morris Dan Giffin and Lisa Randall for reading drafts of this and to Henry Leitner and Larry Finkelstein for inviting me to speak.
(I wrote this talk for a high school. I never actually gave it because the school authorities vetoed the plan to invite me.)When I said I was speaking at a high school my friends were curious. What will you say to high school students So I asked them what do you wish someone had told you in high school Their answers were remarkably similar. So I'm going to tell you what we all wish someone had told us.I'll start by telling you something you don't have to know in high school: what you want to do with your life. People are always asking you this so you think you're supposed to have an answer. But adults ask this mainly as a conversation starter. They want to know what sort of person you are and this question is just to get you talking. They ask it the way you might poke a hermit crab in a tide pool to see what it does.If I were back in high school and someone asked about my plans I'd say that my first priority was to learn what the options were. You don't need to be in a rush to choose your life's work. What you need to do is discover what you like. You have to work on stuff you like if you want to be good at what you do.It might seem that nothing would be easier than deciding what you like but it turns out to be hard partly because it's hard to get an accurate picture of most jobs. Being a doctor is not the way it's portrayed on TV. Fortunately you can also watch real doctors by volunteering in hospitals. 1 But there are other jobs you can't learn about because no one is doing them yet. Most of the work I've done in the last ten years didn't exist when I was in high school. The world changes fast and the rate at which it changes is itself speeding up. In such a world it's not a good idea to have fixed plans.And yet every May speakers all over the country fire up the Standard Graduation Speech the theme of which is: don't give up on your dreams. I know what they mean but this is a bad way to put it because it implies you're supposed to be bound by some plan you made early on. The computer world has a name for this: premature optimization. And it is synonymous with disaster. These speakers would do better to say simply don't give up.What they really mean is don't get demoralized. Don't think that you can't do what other people can. And I agree you shouldn't underestimate your potential. People who've done great things tend to seem as if they were a race apart. And most biographies only exaggerate this illusion partly due to the worshipful attitude biographers inevitably sink into and partly because knowing how the story ends they can't help streamlining the plot till it seems like the subject's life was a matter of destiny the mere unfolding of some innate genius. In fact I suspect if you had the sixteen year old Shakespeare or Einstein in school with you they'd seem impressive but not totally unlike your other friends.Which is an uncomfortable thought. If they were just like us then they had to work very hard to do what they did. And that's one reason we like to believe in genius. It gives us an excuse for being lazy. If these guys were able to do what they did only because of some magic Shakespeareness or Einsteinness then it's not our fault if we can't do something as good.I'm not saying there's no such thing as genius. But if you're trying to choose between two theories and one gives you an excuse for being lazy the other one is probably right.So far we've cut the Standard Graduation Speech down from "don't give up on your dreams" to "what someone else can do you can do." But it needs to be cut still further. There is some variation in natural ability. Most people overestimate its role but it does exist. If I were talking to a guy four feet tall whose ambition was to play in the NBA I'd feel pretty stupid saying you can do anything if you really try. 2 We need to cut the Standard Graduation Speech down to "what someone else with your abilities can do you can do and don't underestimate your abilities." But as so often happens the closer you get to the truth the messier your sentence gets. We've taken a nice neat (but wrong) slogan and churned it up like a mud puddle. It doesn't make a very good speech anymore. But worse still it doesn't tell you what to do anymore. Someone with your abilities What are your abilities UpwindI think the solution is to work in the other direction. Instead of working back from a goal work forward from promising situations. This is what most successful people actually do anyway.In the graduation speech approach you decide where you want to be in twenty years and then ask: what should I do now to get there I propose instead that you don't commit to anything in the future but just look at the options available now and choose those that will give you the most promising range of options afterward.It's not so important what you work on so long as you're not wasting your time. Work on things that interest you and increase your options and worry later about which you'll take.Suppose you're a college freshman deciding whether to major in math or economics. Well math will give you more options: you can go into almost any field from math. If you major in math it will be easy to get into grad school in economics but if you major in economics it will be hard to get into grad school in math.Flying a glider is a good metaphor here. Because a glider doesn't have an engine you can't fly into the wind without losing a lot of altitude. If you let yourself get far downwind of good places to land your options narrow uncomfortably. As a rule you want to stay upwind. So I propose that as a replacement for "don't give up on your dreams." Stay upwind.How do you do that though Even if math is upwind of economics how are you supposed to know that as a high school student Well you don't and that's what you need to find out. Look for smart people and hard problems. Smart people tend to clump together and if you can find such a clump it's probably worthwhile to join it. But it's not straightforward to find these because there is a lot of faking going on.To a newly arrived undergraduate all university departments look much the same. The professors all seem forbiddingly intellectual and publish papers unintelligible to outsiders. But while in some fields the papers are unintelligible because they're full of hard ideas in others they're deliberately written in an obscure way to seem as if they're saying something important. This may seem a scandalous proposition but it has been experimentally verified in the famous Social Text affair. Suspecting that the papers published by literary theorists were often just intellectual sounding nonsense a physicist deliberately wrote a paper full of intellectual sounding nonsense and submitted it to a literary theory journal which published it.The best protection is always to be working on hard problems. Writing novels is hard. Reading novels isn't. Hard means worry: if you're not worrying that something you're making will come out badly or that you won't be able to understand something you're studying then it isn't hard enough. There has to be suspense.Well this seems a grim view of the world you may think. What I'm telling you is that you should worry Yes but it's not as bad as it sounds. It's exhilarating to overcome worries. You don't see faces much happier than people winning gold medals. And you know why they're so happy Relief.I'm not saying this is the only way to be happy. Just that some kinds of worry are not as bad as they sound.AmbitionIn practice "stay upwind" reduces to "work on hard problems." And you can start today. I wish I'd grasped that in high school.Most people like to be good at what they do. In the so called real world this need is a powerful force. But high school students rarely benefit from it because they're given a fake thing to do. When I was in high school I let myself believe that my job was to be a high school student. And so I let my need to be good at what I did be satisfied by merely doing well in school.If you'd asked me in high school what the difference was between high school kids and adults I'd have said it was that adults had to earn a living. Wrong. It's that adults take responsibility for themselves. Making a living is only a small part of it. Far more important is to take intellectual responsibility for oneself.If I had to go through high school again I'd treat it like a day job. I don't mean that I'd slack in school. Working at something as a day job doesn't mean doing it badly. It means not being defined by it. I mean I wouldn't think of myself as a high school student just as a musician with a day job as a waiter doesn't think of himself as a waiter. 3 And when I wasn't working at my day job I'd start trying to do real work.When I ask people what they regret most about high school they nearly all say the same thing: that they wasted so much time. If you're wondering what you're doing now that you'll regret most later that's probably it. 4 Some people say this is inevitable that high school students aren't capable of getting anything done yet. But I don't think this is true. And the proof is that you're bored. You probably weren't bored when you were eight. When you're eight it's called "playing" instead of "hanging out " but it's the same thing. And when I was eight I was rarely bored. Give me a back yard and a few other kids and I could play all day.The reason this got stale in middle school and high school I now realize is that I was ready for something else. Childhood was getting old.I'm not saying you shouldn't hang out with your friends that you should all become humorless little robots who do nothing but work. Hanging out with friends is like chocolate cake. You enjoy it more if you eat it occasionally than if you eat nothing but chocolate cake for every meal. No matter how much you like chocolate cake you'll be pretty queasy after the third meal of it. And that's what the malaise one feels in high school is: mental queasiness. 5 You may be thinking we have to do more than get good grades. We have to have extracurricular activities. But you know perfectly well how bogus most of these are. Collecting donations for a charity is an admirable thing to do but it's not hard. It's not getting something done. What I mean by getting something done is learning how to write well or how to program computers or what life was really like in preindustrial societies or how to draw the human face from life. This sort of thing rarely translates into a line item on a college application.CorruptionIt's dangerous to design your life around getting into college because the people you have to impress to get into college are not a very discerning audience. At most colleges it's not the professors who decide whether you get in but admissions officers and they are nowhere near as smart. They're the NCOs of the intellectual world. They can't tell how smart you are. The mere existence of prep schools is proof of that.Few parents would pay so much for their kids to go to a school that didn't improve their admissions prospects. Prep schools openly say this is one of their aims. But what that means if you stop to think about it is that they can hack the admissions process: that they can take the very same kid and make him seem a more appealing candidate than he would if he went to the local public school. 6 Right now most of you feel your job in life is to be a promising college applicant. But that means you're designing your life to satisfy a process so mindless that there's a whole industry devoted to subverting it. No wonder you become cynical. The malaise you feel is the same that a producer of reality TV shows or a tobacco industry executive feels. And you don't even get paid a lot.So what do you do What you should not do is rebel. That's what I did and it was a mistake. I didn't realize exactly what was happening to us but I smelled a major rat. And so I just gave up. Obviously the world sucked so why bother When I discovered that one of our teachers was herself using Cliff's Notes it seemed par for the course. Surely it meant nothing to get a good grade in such a class.In retrospect this was stupid. It was like someone getting fouled in a soccer game and saying hey you fouled me that's against the rules and walking off the field in indignation. Fouls happen. The thing to do when you get fouled is not to lose your cool. Just keep playing. By putting you in this situation society has fouled you. Yes as you suspect a lot of the stuff you learn in your classes is crap. And yes as you suspect the college admissions process is largely a charade. But like many fouls this one was unintentional. 7 So just keep playing.Rebellion is almost as stupid as obedience. In either case you let yourself be defined by what they tell you to do. The best plan I think is to step onto an orthogonal vector. Don't just do what they tell you and don't just refuse to. Instead treat school as a day job. As day jobs go it's pretty sweet. You're done at 3 o'clock and you can even work on your own stuff while you're there.CuriosityAnd what's your real job supposed to be Unless you're Mozart your first task is to figure that out. What are the great things to work on Where are the imaginative people And most importantly what are you interested in The word "aptitude" is misleading because it implies something innate. The most powerful sort of aptitude is a consuming interest in some question and such interests are often acquired tastes.A distorted version of this idea has filtered into popular culture under the name "passion." I recently saw an ad for waiters saying they wanted people with a "passion for service." The real thing is not something one could have for waiting on tables. And passion is a bad word for it. A better name would be curiosity.Kids are curious but the curiosity I mean has a different shape from kid curiosity. Kid curiosity is broad and shallow they ask why at random about everything. In most adults this curiosity dries up entirely. It has to: you can't get anything done if you're always asking why about everything. But in ambitious adults instead of drying up curiosity becomes narrow and deep. The mud flat morphs into a well.Curiosity turns work into play. For Einstein relativity wasn't a book full of hard stuff he had to learn for an exam. It was a mystery he was trying to solve. So it probably felt like less work to him to invent it than it would seem to someone now to learn it in a class.One of the most dangerous illusions you get from school is the idea that doing great things requires a lot of discipline. Most subjects are taught in such a boring way that it's only by discipline that you can flog yourself through them. So I was surprised when early in college I read a quote by Wittgenstein saying that he had no self discipline and had never been able to deny himself anything not even a cup of coffee.Now I know a number of people who do great work and it's the same with all of them. They have little discipline. They're all terrible procrastinators and find it almost impossible to make themselves do anything they're not interested in. One still hasn't sent out his half of the thank you notes from his wedding four years ago. Another has 26 000 emails in her inbox.I'm not saying you can get away with zero self discipline. You probably need about the amount you need to go running. I'm often reluctant to go running but once I do I enjoy it. And if I don't run for several days I feel ill. It's the same with people who do great things. They know they'll feel bad if they don't work and they have enough discipline to get themselves to their desks to start working. But once they get started interest takes over and discipline is no longer necessary.Do you think Shakespeare was gritting his teeth and diligently trying to write Great Literature Of course not. He was having fun. That's why he's so good.If you want to do good work what you need is a great curiosity about a promising question. The critical moment for Einstein was when he looked at Maxwell's equations and said what the hell is going on here It can take years to zero in on a productive question because it can take years to figure out what a subject is really about. To take an extreme example consider math. Most people think they hate math but the boring stuff you do in school under the name "mathematics" is not at all like what mathematicians do.The great mathematician G. H. Hardy said he didn't like math in high school either. He only took it up because he was better at it than the other students. Only later did he realize math was interesting only later did he start to ask questions instead of merely answering them correctly.When a friend of mine used to grumble because he had to write a paper for school his mother would tell him: find a way to make it interesting. That's what you need to do: find a question that makes the world interesting. People who do great things look at the same world everyone else does but notice some odd detail that's compellingly mysterious.And not only in intellectual matters. Henry Ford's great question was why do cars have to be a luxury item What would happen if you treated them as a commodity Franz Beckenbauer's was in effect why does everyone have to stay in his position Why can't defenders score goals too NowIf it takes years to articulate great questions what do you do now at sixteen Work toward finding one. Great questions don't appear suddenly. They gradually congeal in your head. And what makes them congeal is experience. So the way to find great questions is not to search for them not to wander about thinking what great discovery shall I make You can't answer that if you could you'd have made it.The way to get a big idea to appear in your head is not to hunt for big ideas but to put in a lot of time on work that interests you and in the process keep your mind open enough that a big idea can take roost. Einstein Ford and Beckenbauer all used this recipe. They all knew their work like a piano player knows the keys. So when something seemed amiss to them they had the confidence to notice it.Put in time how and on what Just pick a project that seems interesting: to master some chunk of material or to make something or to answer some question. Choose a project that will take less than a month and make it something you have the means to finish. Do something hard enough to stretch you but only just especially at first. If you're deciding between two projects choose whichever seems most fun. If one blows up in your face start another. Repeat till like an internal combustion engine the process becomes self sustaining and each project generates the next one. (This could take years.)It may be just as well not to do a project "for school " if that will restrict you or make it seem like work. Involve your friends if you want but not too many and only if they're not flakes. Friends offer moral support (few startups are started by one person) but secrecy also has its advantages. There's something pleasing about a secret project. And you can take more risks because no one will know if you fail.Don't worry if a project doesn't seem to be on the path to some goal you're supposed to have. Paths can bend a lot more than you think. So let the path grow out the project. The most important thing is to be excited about it because it's by doing that you learn.Don't disregard unseemly motivations. One of the most powerful is the desire to be better than other people at something. Hardy said that's what got him started and I think the only unusual thing about him is that he admitted it. Another powerful motivator is the desire to do or know things you're not supposed to. Closely related is the desire to do something audacious. Sixteen year olds aren't supposed to write novels. So if you try anything you achieve is on the plus side of the ledger if you fail utterly you're doing no worse than expectations. 8 Beware of bad models. Especially when they excuse laziness. When I was in high school I used to write "existentialist" short stories like ones I'd seen by famous writers. My stories didn't have a lot of plot but they were very deep. And they were less work to write than entertaining ones would have been. I should have known that was a danger sign. And in fact I found my stories pretty boring what excited me was the idea of writing serious intellectual stuff like the famous writers.Now I have enough experience to realize that those famous writers actually sucked. Plenty of famous people do in the short term the quality of one's work is only a small component of fame. I should have been less worried about doing something that seemed cool and just done something I liked. That's the actual road to coolness anyway.A key ingredient in many projects almost a project on its own is to find good books. Most books are bad. Nearly all textbooks are bad. 9 So don't assume a subject is to be learned from whatever book on it happens to be closest. You have to search actively for the tiny number of good books.The important thing is to get out there and do stuff. Instead of waiting to be taught go out and learn.Your life doesn't have to be shaped by admissions officers. It could be shaped by your own curiosity. It is for all ambitious adults. And you don't have to wait to start. In fact you don't have to wait to be an adult. There's no switch inside you that magically flips when you turn a certain age or graduate from some institution. You start being an adult when you decide to take responsibility for your life. You can do that at any age. 10 This may sound like bullshit. I'm just a minor you may think I have no money I have to live at home I have to do what adults tell me all day long. Well most adults labor under restrictions just as cumbersome and they manage to get things done. If you think it's restrictive being a kid imagine having kids.The only real difference between adults and high school kids is that adults realize they need to get things done and high school kids don't. That realization hits most people around 23. But I'm letting you in on the secret early. So get to work. Maybe you can be the first generation whose greatest regret from high school isn't how much time you wasted. Notes 1 A doctor friend warns that even this can give an inaccurate picture. "Who knew how much time it would take up how little autonomy one would have for endless years of training and how unbelievably annoying it is to carry a beeper " 2 His best bet would probably be to become dictator and intimidate the NBA into letting him play. So far the closest anyone has come is Secretary of Labor. 3 A day job is one you take to pay the bills so you can do what you really want like play in a band or invent relativity.Treating high school as a day job might actually make it easier for some students to get good grades. If you treat your classes as a game you won't be demoralized if they seem pointless.However bad your classes you need to get good grades in them to get into a decent college. And that is worth doing because universities are where a lot of the clumps of smart people are these days. 4 The second biggest regret was caring so much about unimportant things. And especially about what other people thought of them.I think what they really mean in the latter case is caring what random people thought of them. Adults care just as much what other people think but they get to be more selective about the other people.I have about thirty friends whose opinions I care about and the opinion of the rest of the world barely affects me. The problem in high school is that your peers are chosen for you by accidents of age and geography rather than by you based on respect for their judgement. 5 The key to wasting time is distraction. Without distractions it's too obvious to your brain that you're not doing anything with it and you start to feel uncomfortable. If you want to measure how dependent you've become on distractions try this experiment: set aside a chunk of time on a weekend and sit alone and think. You can have a notebook to write your thoughts down in but nothing else: no friends TV music phone IM email Web games books newspapers or magazines. Within an hour most people will feel a strong craving for distraction. 6 I don't mean to imply that the only function of prep schools is to trick admissions officers. They also generally provide a better education. But try this thought experiment: suppose prep schools supplied the same superior education but had a tiny (.001) negative effect on college admissions. How many parents would still send their kids to them It might also be argued that kids who went to prep schools because they've learned more are better college candidates. But this seems empirically false. What you learn in even the best high school is rounding error compared to what you learn in college. Public school kids arrive at college with a slight disadvantage but they start to pull ahead in the sophomore year.(I'm not saying public school kids are smarter than preppies just that they are within any given college. That follows necessarily if you agree prep schools improve kids' admissions prospects.) 7 Why does society foul you Indifference mainly. There are simply no outside forces pushing high school to be good. The air traffic control system works because planes would crash otherwise. Businesses have to deliver because otherwise competitors would take their customers. But no planes crash if your school sucks and it has no competitors. High school isn't evil it's random but random is pretty bad. 8 And then of course there is money. It's not a big factor in high school because you can't do much that anyone wants. But a lot of great things were created mainly to make money. Samuel Johnson said "no man but a blockhead ever wrote except for money." (Many hope he was exaggerating.) 9 Even college textbooks are bad. When you get to college you'll find that (with a few stellar exceptions) the textbooks are not written by the leading scholars in the field they describe. Writing college textbooks is unpleasant work done mostly by people who need the money. It's unpleasant because the publishers exert so much control and there are few things worse than close supervision by someone who doesn't understand what you're doing. This phenomenon is apparently even worse in the production of high school textbooks. 10 Your teachers are always telling you to behave like adults. I wonder if they'd like it if you did. You may be loud and disorganized but you're very docile compared to adults. If you actually started acting like adults it would be just as if a bunch of adults had been transposed into your bodies. Imagine the reaction of an FBI agent or taxi driver or reporter to being told they had to ask permission to go the bathroom and only one person could go at a time. To say nothing of the things you're taught. If a bunch of actual adults suddenly found themselves trapped in high school the first thing they'd do is form a union and renegotiate all the rules with the administration.Thanks to Ingrid Bassett Trevor Blackwell Rich Draves Dan Giffin Sarah Harlin Jessica Livingston Jackie McDonough Robert Morris Mark Nitzberg Lisa Randall and Aaron Swartz for reading drafts of this and to many others for talking to me about high school.
(This essay is derived from a keynote talk at PyCon 2003.)It's hard to predict what life will be like in a hundred years. There are only a few things we can say with certainty. We know that everyone will drive flying cars that zoning laws will be relaxed to allow buildings hundreds of stories tall that it will be dark most of the time and that women will all be trained in the martial arts. Here I want to zoom in on one detail of this picture. What kind of programming language will they use to write the software controlling those flying cars This is worth thinking about not so much because we'll actually get to use these languages as because if we're lucky we'll use languages on the path from this point to that.I think that like species languages will form evolutionary trees with dead ends branching off all over. We can see this happening already. Cobol for all its sometime popularity does not seem to have any intellectual descendants. It is an evolutionary dead end a Neanderthal language.I predict a similar fate for Java. People sometimes send me mail saying "How can you say that Java won't turn out to be a successful language It's already a successful language." And I admit that it is if you measure success by shelf space taken up by books on it (particularly individual books on it) or by the number of undergrads who believe they have to learn it to get a job. When I say Java won't turn out to be a successful language I mean something more specific: that Java will turn out to be an evolutionary dead end like Cobol.This is just a guess. I may be wrong. My point here is not to dis Java but to raise the issue of evolutionary trees and get people asking where on the tree is language X The reason to ask this question isn't just so that our ghosts can say in a hundred years I told you so. It's because staying close to the main branches is a useful heuristic for finding languages that will be good to program in now.At any given time you're probably happiest on the main branches of an evolutionary tree. Even when there were still plenty of Neanderthals it must have sucked to be one. The Cro Magnons would have been constantly coming over and beating you up and stealing your food.The reason I want to know what languages will be like in a hundred years is so that I know what branch of the tree to bet on now.The evolution of languages differs from the evolution of species because branches can converge. The Fortran branch for example seems to be merging with the descendants of Algol. In theory this is possible for species too but it's not likely to have happened to any bigger than a cell.Convergence is more likely for languages partly because the space of possibilities is smaller and partly because mutations are not random. Language designers deliberately incorporate ideas from other languages.It's especially useful for language designers to think about where the evolution of programming languages is likely to lead because they can steer accordingly. In that case "stay on a main branch" becomes more than a way to choose a good language. It becomes a heuristic for making the right decisions about language design.Any programming language can be divided into two parts: some set of fundamental operators that play the role of axioms and the rest of the language which could in principle be written in terms of these fundamental operators.I think the fundamental operators are the most important factor in a language's long term survival. The rest you can change. It's like the rule that in buying a house you should consider location first of all. Everything else you can fix later but you can't fix the location.I think it's important not just that the axioms be well chosen but that there be few of them. Mathematicians have always felt this way about axioms the fewer the better and I think they're onto something.At the very least it has to be a useful exercise to look closely at the core of a language to see if there are any axioms that could be weeded out. I've found in my long career as a slob that cruft breeds cruft and I've seen this happen in software as well as under beds and in the corners of rooms.I have a hunch that the main branches of the evolutionary tree pass through the languages that have the smallest cleanest cores. The more of a language you can write in itself the better.Of course I'm making a big assumption in even asking what programming languages will be like in a hundred years. Will we even be writing programs in a hundred years Won't we just tell computers what we want them to do There hasn't been a lot of progress in that department so far. My guess is that a hundred years from now people will still tell computers what to do using programs we would recognize as such. There may be tasks that we solve now by writing programs and which in a hundred years you won't have to write programs to solve but I think there will still be a good deal of programming of the type that we do today.It may seem presumptuous to think anyone can predict what any technology will look like in a hundred years. But remember that we already have almost fifty years of history behind us. Looking forward a hundred years is a graspable idea when we consider how slowly languages have evolved in the past fifty.Languages evolve slowly because they're not really technologies. Languages are notation. A program is a formal description of the problem you want a computer to solve for you. So the rate of evolution in programming languages is more like the rate of evolution in mathematical notation than say transportation or communications. Mathematical notation does evolve but not with the giant leaps you see in technology.Whatever computers are made of in a hundred years it seems safe to predict they will be much faster than they are now. If Moore's Law continues to put out they will be 74 quintillion (73 786 976 294 838 206 464) times faster. That's kind of hard to imagine. And indeed the most likely prediction in the speed department may be that Moore's Law will stop working. Anything that is supposed to double every eighteen months seems likely to run up against some kind of fundamental limit eventually. But I have no trouble believing that computers will be very much faster. Even if they only end up being a paltry million times faster that should change the ground rules for programming languages substantially. Among other things there will be more room for what would now be considered slow languages meaning languages that don't yield very efficient code.And yet some applications will still demand speed. Some of the problems we want to solve with computers are created by computers for example the rate at which you have to process video images depends on the rate at which another computer can generate them. And there is another class of problems which inherently have an unlimited capacity to soak up cycles: image rendering cryptography simulations.If some applications can be increasingly inefficient while others continue to demand all the speed the hardware can deliver faster computers will mean that languages have to cover an ever wider range of efficiencies. We've seen this happening already. Current implementations of some popular new languages are shockingly wasteful by the standards of previous decades.This isn't just something that happens with programming languages. It's a general historical trend. As technologies improve each generation can do things that the previous generation would have considered wasteful. People thirty years ago would be astonished at how casually we make long distance phone calls. People a hundred years ago would be even more astonished that a package would one day travel from Boston to New York via Memphis.I can already tell you what's going to happen to all those extra cycles that faster hardware is going to give us in the next hundred years. They're nearly all going to be wasted.I learned to program when computer power was scarce. I can remember taking all the spaces out of my Basic programs so they would fit into the memory of a 4K TRS 80. The thought of all this stupendously inefficient software burning up cycles doing the same thing over and over seems kind of gross to me. But I think my intuitions here are wrong. I'm like someone who grew up poor and can't bear to spend money even for something important like going to the doctor.Some kinds of waste really are disgusting. SUVs for example would arguably be gross even if they ran on a fuel which would never run out and generated no pollution. SUVs are gross because they're the solution to a gross problem. (How to make minivans look more masculine.) But not all waste is bad. Now that we have the infrastructure to support it counting the minutes of your long distance calls starts to seem niggling. If you have the resources it's more elegant to think of all phone calls as one kind of thing no matter where the other person is.There's good waste and bad waste. I'm interested in good waste the kind where by spending more we can get simpler designs. How will we take advantage of the opportunities to waste cycles that we'll get from new faster hardware The desire for speed is so deeply engrained in us with our puny computers that it will take a conscious effort to overcome it. In language design we should be consciously seeking out situations where we can trade efficiency for even the smallest increase in convenience.Most data structures exist because of speed. For example many languages today have both strings and lists. Semantically strings are more or less a subset of lists in which the elements are characters. So why do you need a separate data type You don't really. Strings only exist for efficiency. But it's lame to clutter up the semantics of the language with hacks to make programs run faster. Having strings in a language seems to be a case of premature optimization.If we think of the core of a language as a set of axioms surely it's gross to have additional axioms that add no expressive power simply for the sake of efficiency. Efficiency is important but I don't think that's the right way to get it.The right way to solve that problem I think is to separate the meaning of a program from the implementation details. Instead of having both lists and strings have just lists with some way to give the compiler optimization advice that will allow it to lay out strings as contiguous bytes if necessary.Since speed doesn't matter in most of a program you won't ordinarily need to bother with this sort of micromanagement. This will be more and more true as computers get faster.Saying less about implementation should also make programs more flexible. Specifications change while a program is being written and this is not only inevitable but desirable.The word "essay" comes from the French verb "essayer" which means "to try". An essay in the original sense is something you write to try to figure something out. This happens in software too. I think some of the best programs were essays in the sense that the authors didn't know when they started exactly what they were trying to write.Lisp hackers already know about the value of being flexible with data structures. We tend to write the first version of a program so that it does everything with lists. These initial versions can be so shockingly inefficient that it takes a conscious effort not to think about what they're doing just as for me at least eating a steak requires a conscious effort not to think where it came from.What programmers in a hundred years will be looking for most of all is a language where you can throw together an unbelievably inefficient version 1 of a program with the least possible effort. At least that's how we'd describe it in present day terms. What they'll say is that they want a language that's easy to program in.Inefficient software isn't gross. What's gross is a language that makes programmers do needless work. Wasting programmer time is the true inefficiency not wasting machine time. This will become ever more clear as computers get faster.I think getting rid of strings is already something we could bear to think about. We did it in Arc and it seems to be a win some operations that would be awkward to describe as regular expressions can be described easily as recursive functions.How far will this flattening of data structures go I can think of possibilities that shock even me with my conscientiously broadened mind. Will we get rid of arrays for example After all they're just a subset of hash tables where the keys are vectors of integers. Will we replace hash tables themselves with lists There are more shocking prospects even than that. The Lisp that McCarthy described in 1960 for example didn't have numbers. Logically you don't need to have a separate notion of numbers because you can represent them as lists: the integer n could be represented as a list of n elements. You can do math this way. It's just unbearably inefficient.No one actually proposed implementing numbers as lists in practice. In fact McCarthy's 1960 paper was not at the time intended to be implemented at all. It was a theoretical exercise an attempt to create a more elegant alternative to the Turing Machine. When someone did unexpectedly take this paper and translate it into a working Lisp interpreter numbers certainly weren't represented as lists they were represented in binary as in every other language.Could a programming language go so far as to get rid of numbers as a fundamental data type I ask this not so much as a serious question as as a way to play chicken with the future. It's like the hypothetical case of an irresistible force meeting an immovable object here an unimaginably inefficient implementation meeting unimaginably great resources. I don't see why not. The future is pretty long. If there's something we can do to decrease the number of axioms in the core language that would seem to be the side to bet on as t approaches infinity. If the idea still seems unbearable in a hundred years maybe it won't in a thousand.Just to be clear about this I'm not proposing that all numerical calculations would actually be carried out using lists. I'm proposing that the core language prior to any additional notations about implementation be defined this way. In practice any program that wanted to do any amount of math would probably represent numbers in binary but this would be an optimization not part of the core language semantics.Another way to burn up cycles is to have many layers of software between the application and the hardware. This too is a trend we see happening already: many recent languages are compiled into byte code. Bill Woods once told me that as a rule of thumb each layer of interpretation costs a factor of 10 in speed. This extra cost buys you flexibility.The very first version of Arc was an extreme case of this sort of multi level slowness with corresponding benefits. It was a classic "metacircular" interpreter written on top of Common Lisp with a definite family resemblance to the eval function defined in McCarthy's original Lisp paper. The whole thing was only a couple hundred lines of code so it was very easy to understand and change. The Common Lisp we used CLisp itself runs on top of a byte code interpreter. So here we had two levels of interpretation one of them (the top one) shockingly inefficient and the language was usable. Barely usable I admit but usable.Writing software as multiple layers is a powerful technique even within applications. Bottom up programming means writing a program as a series of layers each of which serves as a language for the one above. This approach tends to yield smaller more flexible programs. It's also the best route to that holy grail reusability. A language is by definition reusable. The more of your application you can push down into a language for writing that type of application the more of your software will be reusable.Somehow the idea of reusability got attached to object oriented programming in the 1980s and no amount of evidence to the contrary seems to be able to shake it free. But although some object oriented software is reusable what makes it reusable is its bottom upness not its object orientedness. Consider libraries: they're reusable because they're language whether they're written in an object oriented style or not.I don't predict the demise of object oriented programming by the way. Though I don't think it has much to offer good programmers except in certain specialized domains it is irresistible to large organizations. Object oriented programming offers a sustainable way to write spaghetti code. It lets you accrete programs as a series of patches. Large organizations always tend to develop software this way and I expect this to be as true in a hundred years as it is today. As long as we're talking about the future we had better talk about parallel computation because that's where this idea seems to live. That is no matter when you're talking parallel computation seems to be something that is going to happen in the future.Will the future ever catch up with it People have been talking about parallel computation as something imminent for at least 20 years and it hasn't affected programming practice much so far. Or hasn't it Already chip designers have to think about it and so must people trying to write systems software on multi cpu computers.The real question is how far up the ladder of abstraction will parallelism go In a hundred years will it affect even application programmers Or will it be something that compiler writers think about but which is usually invisible in the source code of applications One thing that does seem likely is that most opportunities for parallelism will be wasted. This is a special case of my more general prediction that most of the extra computer power we're given will go to waste. I expect that as with the stupendous speed of the underlying hardware parallelism will be something that is available if you ask for it explicitly but ordinarily not used. This implies that the kind of parallelism we have in a hundred years will not except in special applications be massive parallelism. I expect for ordinary programmers it will be more like being able to fork off processes that all end up running in parallel.And this will like asking for specific implementations of data structures be something that you do fairly late in the life of a program when you try to optimize it. Version 1s will ordinarily ignore any advantages to be got from parallel computation just as they will ignore advantages to be got from specific representations of data.Except in special kinds of applications parallelism won't pervade the programs that are written in a hundred years. It would be premature optimization if it did.How many programming languages will there be in a hundred years There seem to be a huge number of new programming languages lately. Part of the reason is that faster hardware has allowed programmers to make different tradeoffs between speed and convenience depending on the application. If this is a real trend the hardware we'll have in a hundred years should only increase it.And yet there may be only a few widely used languages in a hundred years. Part of the reason I say this is optimism: it seems that if you did a really good job you could make a language that was ideal for writing a slow version 1 and yet with the right optimization advice to the compiler would also yield very fast code when necessary. So since I'm optimistic I'm going to predict that despite the huge gap they'll have between acceptable and maximal efficiency programmers in a hundred years will have languages that can span most of it.As this gap widens profilers will become increasingly important. Little attention is paid to profiling now. Many people still seem to believe that the way to get fast applications is to write compilers that generate fast code. As the gap between acceptable and maximal performance widens it will become increasingly clear that the way to get fast applications is to have a good guide from one to the other.When I say there may only be a few languages I'm not including domain specific "little languages". I think such embedded languages are a great idea and I expect them to proliferate. But I expect them to be written as thin enough skins that users can see the general purpose language underneath.Who will design the languages of the future One of the most exciting trends in the last ten years has been the rise of open source languages like Perl Python and Ruby. Language design is being taken over by hackers. The results so far are messy but encouraging. There are some stunningly novel ideas in Perl for example. Many are stunningly bad but that's always true of ambitious efforts. At its current rate of mutation God knows what Perl might evolve into in a hundred years.It's not true that those who can't do teach (some of the best hackers I know are professors) but it is true that there are a lot of things that those who teach can't do. Research imposes constraining caste restrictions. In any academic field there are topics that are ok to work on and others that aren't. Unfortunately the distinction between acceptable and forbidden topics is usually based on how intellectual the work sounds when described in research papers rather than how important it is for getting good results. The extreme case is probably literature people studying literature rarely say anything that would be of the slightest use to those producing it.Though the situation is better in the sciences the overlap between the kind of work you're allowed to do and the kind of work that yields good languages is distressingly small. (Olin Shivers has grumbled eloquently about this.) For example types seem to be an inexhaustible source of research papers despite the fact that static typing seems to preclude true macros without which in my opinion no language is worth using.The trend is not merely toward languages being developed as open source projects rather than "research" but toward languages being designed by the application programmers who need to use them rather than by compiler writers. This seems a good trend and I expect it to continue. Unlike physics in a hundred years which is almost necessarily impossible to predict I think it may be possible in principle to design a language now that would appeal to users in a hundred years.One way to design a language is to just write down the program you'd like to be able to write regardless of whether there is a compiler that can translate it or hardware that can run it. When you do this you can assume unlimited resources. It seems like we ought to be able to imagine unlimited resources as well today as in a hundred years.What program would one like to write Whatever is least work. Except not quite: whatever would be least work if your ideas about programming weren't already influenced by the languages you're currently used to. Such influence can be so pervasive that it takes a great effort to overcome it. You'd think it would be obvious to creatures as lazy as us how to express a program with the least effort. In fact our ideas about what's possible tend to be so limited by whatever language we think in that easier formulations of programs seem very surprising. They're something you have to discover not something you naturally sink into.One helpful trick here is to use the length of the program as an approximation for how much work it is to write. Not the length in characters of course but the length in distinct syntactic elements basically the size of the parse tree. It may not be quite true that the shortest program is the least work to write but it's close enough that you're better off aiming for the solid target of brevity than the fuzzy nearby one of least work. Then the algorithm for language design becomes: look at a program and ask is there any way to write this that's shorter In practice writing programs in an imaginary hundred year language will work to varying degrees depending on how close you are to the core. Sort routines you can write now. But it would be hard to predict now what kinds of libraries might be needed in a hundred years. Presumably many libraries will be for domains that don't even exist yet. If SETI home works for example we'll need libraries for communicating with aliens. Unless of course they are sufficiently advanced that they already communicate in XML.At the other extreme I think you might be able to design the core language today. In fact some might argue that it was already mostly designed in 1958.If the hundred year language were available today would we want to program in it One way to answer this question is to look back. If present day programming languages had been available in 1960 would anyone have wanted to use them In some ways the answer is no. Languages today assume infrastructure that didn't exist in 1960. For example a language in which indentation is significant like Python would not work very well on printer terminals. But putting such problems aside assuming for example that programs were all just written on paper would programmers of the 1960s have liked writing programs in the languages we use now I think so. Some of the less imaginative ones who had artifacts of early languages built into their ideas of what a program was might have had trouble. (How can you manipulate data without doing pointer arithmetic How can you implement flow charts without gotos ) But I think the smartest programmers would have had no trouble making the most of present day languages if they'd had them.If we had the hundred year language now it would at least make a great pseudocode. What about using it to write software Since the hundred year language will need to generate fast code for some applications presumably it could generate code efficient enough to run acceptably well on our hardware. We might have to give more optimization advice than users in a hundred years but it still might be a net win.Now we have two ideas that if you combine them suggest interesting possibilities: (1) the hundred year language could in principle be designed today and (2) such a language if it existed might be good to program in today. When you see these ideas laid out like that it's hard not to think why not try writing the hundred year language now When you're working on language design I think it is good to have such a target and to keep it consciously in mind. When you learn to drive one of the principles they teach you is to align the car not by lining up the hood with the stripes painted on the road but by aiming at some point in the distance. Even if all you care about is what happens in the next ten feet this is the right answer. I think we can and should do the same thing with programming languages. NotesI believe Lisp Machine Lisp was the first language to embody the principle that declarations (except those of dynamic variables) were merely optimization advice and would not change the meaning of a correct program. Common Lisp seems to have been the first to state this explicitly.Thanks to Trevor Blackwell Robert Morris and Dan Giffin for reading drafts of this and to Guido van Rossum Jeremy Hylton and the rest of the Python crew for inviting me to speak at PyCon.
 "We were after the C programmers. We managed to drag a lot of them about halfway to Lisp." Guy Steele co author of the Java spec 
I finally realized today why politics and religion yield such uniquely useless discussions.As a rule any mention of religion on an online forum degenerates into a religious argument. Why Why does this happen with religion and not with Javascript or baking or other topics people talk about on forums What's different about religion is that people don't feel they need to have any particular expertise to have opinions about it. All they need is strongly held beliefs and anyone can have those. No thread about Javascript will grow as fast as one about religion because people feel they have to be over some threshold of expertise to post comments about that. But on religion everyone's an expert.Then it struck me: this is the problem with politics too. Politics like religion is a topic where there's no threshold of expertise for expressing an opinion. All you need is strong convictions.Do religion and politics have something in common that explains this similarity One possible explanation is that they deal with questions that have no definite answers so there's no back pressure on people's opinions. Since no one can be proven wrong every opinion is equally valid and sensing this everyone lets fly with theirs.But this isn't true. There are certainly some political questions that have definite answers like how much a new government policy will cost. But the more precise political questions suffer the same fate as the vaguer ones.I think what religion and politics have in common is that they become part of people's identity and people can never have a fruitful argument about something that's part of their identity. By definition they're partisan.Which topics engage people's identity depends on the people not the topic. For example a discussion about a battle that included citizens of one or more of the countries involved would probably degenerate into a political argument. But a discussion today about a battle that took place in the Bronze Age probably wouldn't. No one would know what side to be on. So it's not politics that's the source of the trouble but identity. When people say a discussion has degenerated into a religious war what they really mean is that it has started to be driven mostly by people's identities. 1 Because the point at which this happens depends on the people rather than the topic it's a mistake to conclude that because a question tends to provoke religious wars it must have no answer. For example the question of the relative merits of programming languages often degenerates into a religious war because so many programmers identify as X programmers or Y programmers. This sometimes leads people to conclude the question must be unanswerable mdash that all languages are equally good. Obviously that's false: anything else people make can be well or badly designed why should this be uniquely impossible for programming languages And indeed you can have a fruitful discussion about the relative merits of programming languages so long as you exclude people who respond from identity.More generally you can have a fruitful discussion about a topic only if it doesn't engage the identities of any of the participants. What makes politics and religion such minefields is that they engage so many people's identities. But you could in principle have a useful conversation about them with some people. And there are other topics that might seem harmless like the relative merits of Ford and Chevy pickup trucks that you couldn't safely talk about with others.The most intriguing thing about this theory if it's right is that it explains not merely which kinds of discussions to avoid but how to have better ideas. If people can't think clearly about anything that has become part of their identity then all other things being equal the best plan is to let as few things into your identity as possible. 2 Most people reading this will already be fairly tolerant. But there is a step beyond thinking of yourself as x but tolerating y: not even to consider yourself an x. The more labels you have for yourself the dumber they make you.Notes 1 When that happens it tends to happen fast like a core going critical. The threshold for participating goes down to zero which brings in more people. And they tend to say incendiary things which draw more and angrier counterarguments. 2 There may be some things it's a net win to include in your identity. For example being a scientist. But arguably that is more of a placeholder than an actual label mdash like putting NMI on a form that asks for your middle initial mdash because it doesn't commit you to believing anything in particular. A scientist isn't committed to believing in natural selection in the same way a bibilical literalist is committed to rejecting it. All he's committed to is following the evidence wherever it leads.Considering yourself a scientist is equivalent to putting a sign in a cupboard saying "this cupboard must be kept empty." Yes strictly speaking you're putting something in the cupboard but not in the ordinary sense.Thanks to Sam Altman Trevor Blackwell Paul Buchheit and Robert Morris for reading drafts of this.
If Lisp is so great why don't more people use it I was asked this question by a student in the audience at a talk I gave recently. Not for the first time either.In languages as in so many things there's not much correlation between popularity and quality. Why does John Grisham (King of Torts sales rank 44) outsell Jane Austen (Pride and Prejudice sales rank 6191) Would even Grisham claim that it's because he's a better writer Here's the first sentence of Pride and Prejudice: It is a truth universally acknowledged that a single man in possession of a good fortune must be in want of a wife. "It is a truth universally acknowledged " Long words for the first sentence of a love story.Like Jane Austen Lisp looks hard. Its syntax or lack of syntax makes it look completely unlike the languages most people are used to. Before I learned Lisp I was afraid of it too. I recently came across a notebook from 1983 in which I'd written: I suppose I should learn Lisp but it seems so foreign. Fortunately I was 19 at the time and not too resistant to learning new things. I was so ignorant that learning almost anything meant learning new things.People frightened by Lisp make up other reasons for not using it. The standard excuse back when C was the default language was that Lisp was too slow. Now that Lisp dialects are among the faster languages available that excuse has gone away. Now the standard excuse is openly circular: that other languages are more popular.(Beware of such reasoning. It gets you Windows.)Popularity is always self perpetuating but it's especially so in programming languages. More libraries get written for popular languages which makes them still more popular. Programs often have to work with existing programs and this is easier if they're written in the same language so languages spread from program to program like a virus. And managers prefer popular languages because they give them more leverage over developers who can more easily be replaced.Indeed if programming languages were all more or less equivalent there would be little justification for using any but the most popular. But they aren't all equivalent not by a long shot. And that's why less popular languages like Jane Austen's novels continue to survive at all. When everyone else is reading the latest John Grisham novel there will always be a few people reading Jane Austen instead.
(This essay is derived from a talk at Defcon 2005.)Suppose you wanted to get rid of economic inequality. There are two ways to do it: give money to the poor or take it away from the rich. But they amount to the same thing because if you want to give money to the poor you have to get it from somewhere. You can't get it from the poor or they just end up where they started. You have to get it from the rich.There is of course a way to make the poor richer without simply shifting money from the rich. You could help the poor become more productive for example by improving access to education. Instead of taking money from engineers and giving it to checkout clerks you could enable people who would have become checkout clerks to become engineers.This is an excellent strategy for making the poor richer. But the evidence of the last 200 years shows that it doesn't reduce economic inequality because it makes the rich richer too. If there are more engineers then there are more opportunities to hire them and to sell them things. Henry Ford couldn't have made a fortune building cars in a society in which most people were still subsistence farmers he would have had neither workers nor customers.If you want to reduce economic inequality instead of just improving the overall standard of living it's not enough just to raise up the poor. What if one of your newly minted engineers gets ambitious and goes on to become another Bill Gates Economic inequality will be as bad as ever. If you actually want to compress the gap between rich and poor you have to push down on the top as well as pushing up on the bottom.How do you push down on the top You could try to decrease the productivity of the people who make the most money: make the best surgeons operate with their left hands force popular actors to overeat and so on. But this approach is hard to implement. The only practical solution is to let people do the best work they can and then (either by taxation or by limiting what they can charge) to confiscate whatever you deem to be surplus.So let's be clear what reducing economic inequality means. It is identical with taking money from the rich.When you transform a mathematical expression into another form you often notice new things. So it is in this case. Taking money from the rich turns out to have consequences one might not foresee when one phrases the same idea in terms of "reducing inequality."The problem is risk and reward have to be proportionate. A bet with only a 10 chance of winning has to pay more than one with a 50 chance of winning or no one will take it. So if you lop off the top of the possible rewards you thereby decrease people's willingness to take risks.Transposing into our original expression we get: decreasing economic inequality means decreasing the risk people are willing to take.There are whole classes of risks that are no longer worth taking if the maximum return is decreased. One reason high tax rates are disastrous is that this class of risks includes starting new companies.InvestorsStartups are intrinsically risky. A startup is like a small boat in the open sea. One big wave and you're sunk. A competing product a downturn in the economy a delay in getting funding or regulatory approval a patent suit changing technical standards the departure of a key employee the loss of a big account any one of these can destroy you overnight. It seems only about 1 in 10 startups succeeds. 1 Our startup paid its first round of outside investors 36x. Which meant with current US tax rates that it made sense to invest in us if we had better than a 1 in 24 chance of succeeding. That sounds about right. That's probably roughly how we looked when we were a couple of nerds with no business experience operating out of an apartment.If that kind of risk doesn't pay venture investing as we know it doesn't happen.That might be ok if there were other sources of capital for new companies. Why not just have the government or some large almost government organization like Fannie Mae do the venture investing instead of private funds I'll tell you why that wouldn't work. Because then you're asking government or almost government employees to do the one thing they are least able to do: take risks.As anyone who has worked for the government knows the important thing is not to make the right choices but to make choices that can be justified later if they fail. If there is a safe option that's the one a bureaucrat will choose. But that is exactly the wrong way to do venture investing. The nature of the business means that you want to make terribly risky choices if the upside looks good enough.VCs are currently paid in a way that makes them focus on the upside: they get a percentage of the fund's gains. And that helps overcome their understandable fear of investing in a company run by nerds who look like (and perhaps are) college students.If VCs weren't allowed to get rich they'd behave like bureaucrats. Without hope of gain they'd have only fear of loss. And so they'd make the wrong choices. They'd turn down the nerds in favor of the smooth talking MBA in a suit because that investment would be easier to justify later if it failed.FoundersBut even if you could somehow redesign venture funding to work without allowing VCs to become rich there's another kind of investor you simply cannot replace: the startups' founders and early employees.What they invest is their time and ideas. But these are equivalent to money the proof is that investors are willing (if forced) to treat them as interchangeable granting the same status to "sweat equity" and the equity they've purchased with cash.The fact that you're investing time doesn't change the relationship between risk and reward. If you're going to invest your time in something with a small chance of succeeding you'll only do it if there is a proportionately large payoff. 2 If large payoffs aren't allowed you may as well play it safe.Like many startup founders I did it to get rich. But not because I wanted to buy expensive things. What I wanted was security. I wanted to make enough money that I didn't have to worry about money. If I'd been forbidden to make enough from a startup to do this I would have sought security by some other means: for example by going to work for a big stable organization from which it would be hard to get fired. Instead of busting my ass in a startup I would have tried to get a nice low stress job at a big research lab or tenure at a university.That's what everyone does in societies where risk isn't rewarded. If you can't ensure your own security the next best thing is to make a nest for yourself in some large organization where your status depends mostly on seniority. 3 Even if we could somehow replace investors I don't see how we could replace founders. Investors mainly contribute money which in principle is the same no matter what the source. But the founders contribute ideas. You can't replace those.Let's rehearse the chain of argument so far. I'm heading for a conclusion to which many readers will have to be dragged kicking and screaming so I've tried to make each link unbreakable. Decreasing economic inequality means taking money from the rich. Since risk and reward are equivalent decreasing potential rewards automatically decreases people's appetite for risk. Startups are intrinsically risky. Without the prospect of rewards proportionate to the risk founders will not invest their time in a startup. Founders are irreplaceable. So eliminating economic inequality means eliminating startups.Economic inequality is not just a consequence of startups. It's the engine that drives them in the same way a fall of water drives a water mill. People start startups in the hope of becoming much richer than they were before. And if your society tries to prevent anyone from being much richer than anyone else it will also prevent one person from being much richer at t2 than t1.GrowthThis argument applies proportionately. It's not just that if you eliminate economic inequality you get no startups. To the extent you reduce economic inequality you decrease the number of startups. 4 Increase taxes and willingness to take risks decreases in proportion.And that seems bad for everyone. New technology and new jobs both come disproportionately from new companies. Indeed if you don't have startups pretty soon you won't have established companies either just as if you stop having kids pretty soon you won't have any adults.It sounds benevolent to say we ought to reduce economic inequality. When you phrase it that way who can argue with you Inequality has to be bad right It sounds a good deal less benevolent to say we ought to reduce the rate at which new companies are founded. And yet the one implies the other.Indeed it may be that reducing investors' appetite for risk doesn't merely kill off larval startups but kills off the most promising ones especially. Startups yield faster growth at greater risk than established companies. Does this trend also hold among startups That is are the riskiest startups the ones that generate most growth if they succeed I suspect the answer is yes. And that's a chilling thought because it means that if you cut investors' appetite for risk the most beneficial startups are the first to go.Not all rich people got that way from startups of course. What if we let people get rich by starting startups but taxed away all other surplus wealth Wouldn't that at least decrease inequality Less than you might think. If you made it so that people could only get rich by starting startups people who wanted to get rich would all start startups. And that might be a great thing. But I don't think it would have much effect on the distribution of wealth. People who want to get rich will do whatever they have to. If startups are the only way to do it you'll just get far more people starting startups. (If you write the laws very carefully that is. More likely you'll just get a lot of people doing things that can be made to look on paper like startups.)If we're determined to eliminate economic inequality there is still one way out: we could say that we're willing to go ahead and do without startups. What would happen if we did At a minimum we'd have to accept lower rates of technological growth. If you believe that large established companies could somehow be made to develop new technology as fast as startups the ball is in your court to explain how. (If you can come up with a remotely plausible story you can make a fortune writing business books and consulting for large companies.) 5 Ok so we get slower growth. Is that so bad Well one reason it's bad in practice is that other countries might not agree to slow down with us. If you're content to develop new technologies at a slower rate than the rest of the world what happens is that you don't invent anything at all. Anything you might discover has already been invented elsewhere. And the only thing you can offer in return is raw materials and cheap labor. Once you sink that low other countries can do whatever they like with you: install puppet governments siphon off your best workers use your women as prostitutes dump their toxic waste on your territory all the things we do to poor countries now. The only defense is to isolate yourself as communist countries did in the twentieth century. But the problem then is you have to become a police state to enforce it. Wealth and PowerI realize startups are not the main target of those who want to eliminate economic inequality. What they really dislike is the sort of wealth that becomes self perpetuating through an alliance with power. For example construction firms that fund politicians' campaigns in return for government contracts or rich parents who get their children into good colleges by sending them to expensive schools designed for that purpose. But if you try to attack this type of wealth through economic policy it's hard to hit without destroying startups as collateral damage.The problem here is not wealth but corruption. So why not go after corruption We don't need to prevent people from being rich if we can prevent wealth from translating into power. And there has been progress on that front. Before he died of drink in 1925 Commodore Vanderbilt's wastrel grandson Reggie ran down pedestrians on five separate occasions killing two of them. By 1969 when Ted Kennedy drove off the bridge at Chappaquiddick the limit seemed to be down to one. Today it may well be zero. But what's changed is not variation in wealth. What's changed is the ability to translate wealth into power.How do you break the connection between wealth and power Demand transparency. Watch closely how power is exercised and demand an account of how decisions are made. Why aren't all police interrogations videotaped Why did 36 of Princeton's class of 2007 come from prep schools when only 1.7 of American kids attend them Why did the US really invade Iraq Why don't government officials disclose more about their finances and why only during their term of office A friend of mine who knows a lot about computer security says the single most important step is to log everything. Back when he was a kid trying to break into computers what worried him most was the idea of leaving a trail. He was more inconvenienced by the need to avoid that than by any obstacle deliberately put in his path.Like all illicit connections the connection between wealth and power flourishes in secret. Expose all transactions and you will greatly reduce it. Log everything. That's a strategy that already seems to be working and it doesn't have the side effect of making your whole country poor.I don't think many people realize there is a connection between economic inequality and risk. I didn't fully grasp it till recently. I'd known for years of course that if one didn't score in a startup the other alternative was to get a cozy tenured research job. But I didn't understand the equation governing my behavior. Likewise it's obvious empirically that a country that doesn't let people get rich is headed for disaster whether it's Diocletian's Rome or Harold Wilson's Britain. But I did not till recently understand the role risk played.If you try to attack wealth you end up nailing risk as well and with it growth. If we want a fairer world I think we're better off attacking one step downstream where wealth turns into power.Notes 1 Success here is defined from the initial investors' point of view: either an IPO or an acquisition for more than the valuation at the last round of funding. The conventional 1 in 10 success rate is suspiciously neat but conversations with VCs suggest it's roughly correct for startups overall. Top VC firms expect to do better. 2 I'm not claiming founders sit down and calculate the expected after tax return from a startup. They're motivated by examples of other people who did it. And those examples do reflect after tax returns. 3 Conjecture: The variation in wealth in a (non corrupt) country or organization will be inversely proportional to the prevalence of systems of seniority. So if you suppress variation in wealth seniority will become correspondingly more important. So far I know of no counterexamples though in very corrupt countries you may get both simultaneously. (Thanks to Daniel Sobral for pointing this out.) 4 In a country with a truly feudal economy you might be able to redistribute wealth successfully because there are no startups to kill. 5 The speed at which startups develop new techology is the other reason they pay so well. As I explained in "How to Make Wealth" (in Hackers Painters) what you do in a startup is compress a lifetime's worth of work into a few years. It seems as dumb to discourage that as to discourage risk taking. Thanks to Chris Anderson Trevor Blackwell Dan Giffin Jessica Livingston and Evan Williams for reading drafts of this essay and to Langley Steinert Sangam Pant and Mike Moritz for information about venture investing.
(This talk was written for an audience of investors.)Y Combinator has now funded 564 startups including the current batch which has 53. The total valuation of the 287 that have valuations (either by raising an equity round getting acquired or dying) is about 11.7 billion and the 511 prior to the current batch have collectively raised about 1.7 billion. 1 As usual those numbers are dominated by a few big winners. The top 10 startups account for 8.6 of that 11.7 billion. But there is a peloton of younger startups behind them. There are about 40 more that have a shot at being really big.Things got a little out of hand last summer when we had 84 companies in the batch so we tightened up our filter to decrease the batch size. 2 Several journalists have tried to interpret that as evidence for some macro story they were telling but the reason had nothing to do with any external trend. The reason was that we discovered we were using an n sup2 algorithm and we needed to buy time to fix it. Fortunately we've come up with several techniques for sharding YC and the problem now seems to be fixed. With a new more scaleable model and only 53 companies the current batch feels like a walk in the park. I'd guess we can grow another 2 or 3x before hitting the next bottleneck. 3 One consequence of funding such a large number of startups is that we see trends early. And since fundraising is one of the main things we help startups with we're in a good position to notice trends in investing.I'm going to take a shot at describing where these trends are leading. Let's start with the most basic question: will the future be better or worse than the past Will investors in the aggregate make more money or less I think more. There are multiple forces at work some of which will decrease returns and some of which will increase them. I can't predict for sure which forces will prevail but I'll describe them and you can decide for yourself.There are two big forces driving change in startup funding: it's becoming cheaper to start a startup and startups are becoming a more normal thing to do.When I graduated from college in 1986 there were essentially two options: get a job or go to grad school. Now there's a third: start your own company. That's a big change. In principle it was possible to start your own company in 1986 too but it didn't seem like a real possibility. It seemed possible to start a consulting company or a niche product company but it didn't seem possible to start a company that would become big. 4 That kind of change from 2 paths to 3 is the sort of big social shift that only happens once every few generations. I think we're still at the beginning of this one. It's hard to predict how big a deal it will be. As big a deal as the Industrial Revolution Maybe. Probably not. But it will be a big enough deal that it takes almost everyone by surprise because those big social shifts always do.One thing we can say for sure is that there will be a lot more startups. The monolithic hierarchical companies of the mid 20th century are being replaced by networks of smaller companies. This process is not just something happening now in Silicon Valley. It started decades ago and it's happening as far afield as the car industry. It has a long way to run. 5 The other big driver of change is that startups are becoming cheaper to start. And in fact the two forces are related: the decreasing cost of starting a startup is one of the reasons startups are becoming a more normal thing to do.The fact that startups need less money means founders will increasingly have the upper hand over investors. You still need just as much of their energy and imagination but they don't need as much of your money. Because founders have the upper hand they'll retain an increasingly large share of the stock in and control of their companies. Which means investors will get less stock and less control.Does that mean investors will make less money Not necessarily because there will be more good startups. The total amount of desirable startup stock available to investors will probably increase because the number of desirable startups will probably grow faster than the percentage they sell to investors shrinks.There's a rule of thumb in the VC business that there are about 15 companies a year that will be really successful. Although a lot of investors unconsciously treat this number as if it were some sort of cosmological constant I'm certain it isn't. There are probably limits on the rate at which technology can develop but that's not the limiting factor now. If it were each successful startup would be founded the month it became possible and that is not the case. Right now the limiting factor on the number of big hits is the number of sufficiently good founders starting companies and that number can and will increase. There are still a lot of people who'd make great founders who never end up starting a company. You can see that from how randomly some of the most successful startups got started. So many of the biggest startups almost didn't happen that there must be a lot of equally good startups that actually didn't happen.There might be 10x or even 50x more good founders out there. As more of them go ahead and start startups those 15 big hits a year could easily become 50 or even 100. 6 What about returns though Are we heading for a world in which returns will be pinched by increasingly high valuations I think the top firms will actually make more money than they have in the past. High returns don't come from investing at low valuations. They come from investing in the companies that do really well. So if there are more of those to be had each year the best pickers should have more hits.This means there should be more variability in the VC business. The firms that can recognize and attract the best startups will do even better because there will be more of them to recognize and attract. Whereas the bad firms will get the leftovers as they do now and yet pay a higher price for them.Nor do I think it will be a problem that founders keep control of their companies for longer. The empirical evidence on that is already clear: investors make more money as founders' bitches than their bosses. Though somewhat humiliating this is actually good news for investors because it takes less time to serve founders than to micromanage them.What about angels I think there is a lot of opportunity there. It used to suck to be an angel investor. You couldn't get access to the best deals unless you got lucky like Andy Bechtolsheim and when you did invest in a startup VCs might try to strip you of your stock when they arrived later. Now an angel can go to something like Demo Day or AngelList and have access to the same deals VCs do. And the days when VCs could wash angels out of the cap table are long gone.I think one of the biggest unexploited opportunities in startup investing right now is angel sized investments made quickly. Few investors understand the cost that raising money from them imposes on startups. When the company consists only of the founders everything grinds to a halt during fundraising which can easily take 6 weeks. The current high cost of fundraising means there is room for low cost investors to undercut the rest. And in this context low cost means deciding quickly. If there were a reputable investor who invested 100k on good terms and promised to decide yes or no within 24 hours they'd get access to almost all the best deals because every good startup would approach them first. It would be up to them to pick because every bad startup would approach them first too but at least they'd see everything. Whereas if an investor is notorious for taking a long time to make up their mind or negotiating a lot about valuation founders will save them for last. And in the case of the most promising startups which tend to have an easy time raising money last can easily become never.Will the number of big hits grow linearly with the total number of new startups Probably not for two reasons. One is that the scariness of starting a startup in the old days was a pretty effective filter. Now that the cost of failing is becoming lower we should expect founders to do it more. That's not a bad thing. It's common in technology for an innovation that decreases the cost of failure to increase the number of failures and yet leave you net ahead.The other reason the number of big hits won't grow proportionately to the number of startups is that there will start to be an increasing number of idea clashes. Although the finiteness of the number of good ideas is not the reason there are only 15 big hits a year the number has to be finite and the more startups there are the more we'll see multiple companies doing the same thing at the same time. It will be interesting in a bad way if idea clashes become a lot more common. 7 Mostly because of the increasing number of early failures the startup business of the future won't simply be the same shape scaled up. What used to be an obelisk will become a pyramid. It will be a little wider at the top but a lot wider at the bottom.What does that mean for investors One thing it means is that there will be more opportunities for investors at the earliest stage because that's where the volume of our imaginary solid is growing fastest. Imagine the obelisk of investors that corresponds to the obelisk of startups. As it widens out into a pyramid to match the startup pyramid all the contents are adhering to the top leaving a vacuum at the bottom.That opportunity for investors mostly means an opportunity for new investors because the degree of risk an existing investor or firm is comfortable taking is one of the hardest things for them to change. Different types of investors are adapted to different degrees of risk but each has its specific degree of risk deeply imprinted on it not just in the procedures they follow but in the personalities of the people who work there.I think the biggest danger for VCs and also the biggest opportunity is at the series A stage. Or rather what used to be the series A stage before series As turned into de facto series B rounds.Right now VCs often knowingly invest too much money at the series A stage. They do it because they feel they need to get a big chunk of each series A company to compensate for the opportunity cost of the board seat it consumes. Which means when there is a lot of competition for a deal the number that moves is the valuation (and thus amount invested) rather than the percentage of the company being sold. Which means especially in the case of more promising startups that series A investors often make companies take more money than they want.Some VCs lie and claim the company really needs that much. Others are more candid and admit their financial models require them to own a certain percentage of each company. But we all know the amounts being raised in series A rounds are not determined by asking what would be best for the companies. They're determined by VCs starting from the amount of the company they want to own and the market setting the valuation and thus the amount invested.Like a lot of bad things this didn't happen intentionally. The VC business backed into it as their initial assumptions gradually became obsolete. The traditions and financial models of the VC business were established when founders needed investors more. In those days it was natural for founders to sell VCs a big chunk of their company in the series A round. Now founders would prefer to sell less and VCs are digging in their heels because they're not sure if they can make money buying less than 20 of each series A company.The reason I describe this as a danger is that series A investors are increasingly at odds with the startups they supposedly serve and that tends to come back to bite you eventually. The reason I describe it as an opportunity is that there is now a lot of potential energy built up as the market has moved away from VCs's traditional business model. Which means the first VC to break ranks and start to do series A rounds for as much equity as founders want to sell (and with no "option pool" that comes only from the founders' shares) stands to reap huge benefits.What will happen to the VC business when that happens Hell if I know. But I bet that particular firm will end up ahead. If one top tier VC firm started to do series A rounds that started from the amount the company needed to raise and let the percentage acquired vary with the market instead of the other way around they'd instantly get almost all the best startups. And that's where the money is.You can't fight market forces forever. Over the last decade we've seen the percentage of the company sold in series A rounds creep inexorably downward. 40 used to be common. Now VCs are fighting to hold the line at 20 . But I am daily waiting for the line to collapse. It's going to happen. You may as well anticipate it and look bold.Who knows maybe VCs will make more money by doing the right thing. It wouldn't be the first time that happened. Venture capital is a business where occasional big successes generate hundredfold returns. How much confidence can you really have in financial models for something like that anyway The big successes only have to get a tiny bit less occasional to compensate for a 2x decrease in the stock sold in series A rounds.If you want to find new opportunities for investing look for things founders complain about. Founders are your customers and the things they complain about are unsatisfied demand. I've given two examples of things founders complain about most mdash investors who take too long to make up their minds and excessive dilution in series A rounds mdash so those are good places to look now. But the more general recipe is: do something founders want. Notes 1 I realize revenue and not fundraising is the proper test of success for a startup. The reason we quote statistics about fundraising is because those are the numbers we have. We couldn't talk meaningfully about revenues without including the numbers from the most successful startups and we don't have those. We often discuss revenue growth with the earlier stage startups because that's how we gauge their progress but when companies reach a certain size it gets presumptuous for a seed investor to do that.In any case companies' market caps do eventually become a function of revenues and post money valuations of funding rounds are at least guesses by pros about where those market caps will end up.The reason only 287 have valuations is that the rest have mostly raised money on convertible notes and although convertible notes often have valuation caps a valuation cap is merely an upper bound on a valuation. 2 We didn't try to accept a particular number. We have no way of doing that even if we wanted to. We just tried to be significantly pickier. 3 Though you never know with bottlenecks I'm guessing the next one will be coordinating efforts among partners. 4 I realize starting a company doesn't have to mean starting a startup. There will be lots of people starting normal companies too. But that's not relevant to an audience of investors.Geoff Ralston reports that in Silicon Valley it seemed thinkable to start a startup in the mid 1980s. It would have started there. But I know it didn't to undergraduates on the East Coast. 5 This trend is one of the main causes of the increase in economic inequality in the US since the mid twentieth century. The person who would in 1950 have been the general manager of the x division of Megacorp is now the founder of the x company and owns significant equity in it. 6 If Congress passes the founder visa in a non broken form that alone could in principle get us up to 20x since 95 of the world's population lives outside the US. 7 If idea clashes got bad enough it could change what it means to be a startup. We currently advise startups mostly to ignore competitors. We tell them startups are competitive like running not like soccer you don't have to go and steal the ball away from the other team. But if idea clashes became common enough maybe you'd start to have to. That would be unfortunate.Thanks to Sam Altman Paul Buchheit Dalton Caldwell Patrick Collison Jessica Livingston Andrew Mason Geoff Ralston and Garry Tan for reading drafts of this.
I've discovered a handy test for figuring out what you're addicted to. Imagine you were going to spend the weekend at a friend's house on a little island off the coast of Maine. There are no shops on the island and you won't be able to leave while you're there. Also you've never been to this house before so you can't assume it will have more than any house might.What besides clothes and toiletries do you make a point of packing That's what you're addicted to. For example if you find yourself packing a bottle of vodka (just in case) you may want to stop and think about that.For me the list is four things: books earplugs a notebook and a pen.There are other things I might bring if I thought of it like music or tea but I can live without them. I'm not so addicted to caffeine that I wouldn't risk the house not having any tea just for a weekend.Quiet is another matter. I realize it seems a bit eccentric to take earplugs on a trip to an island off the coast of Maine. If anywhere should be quiet that should. But what if the person in the next room snored What if there was a kid playing basketball (Thump thump thump... thump.) Why risk it Earplugs are small.Sometimes I can think with noise. If I already have momentum on some project I can work in noisy places. I can edit an essay or debug code in an airport. But airports are not so bad: most of the noise is whitish. I couldn't work with the sound of a sitcom coming through the wall or a car in the street playing thump thump music.And of course there's another kind of thinking when you're starting something new that requires complete quiet. You never know when this will strike. It's just as well to carry plugs.The notebook and pen are professional equipment as it were. Though actually there is something druglike about them in the sense that their main purpose is to make me feel better. I hardly ever go back and read stuff I write down in notebooks. It's just that if I can't write things down worrying about remembering one idea gets in the way of having the next. Pen and paper wick ideas.The best notebooks I've found are made by a company called Miquelrius. I use their smallest size which is about 2.5 x 4 in. The secret to writing on such narrow pages is to break words only when you run out of space like a Latin inscription. I use the cheapest plastic Bic ballpoints partly because their gluey ink doesn't seep through pages and partly so I don't worry about losing them.I only started carrying a notebook about three years ago. Before that I used whatever scraps of paper I could find. But the problem with scraps of paper is that they're not ordered. In a notebook you can guess what a scribble means by looking at the pages around it. In the scrap era I was constantly finding notes I'd written years before that might say something I needed to remember if I could only figure out what.As for books I know the house would probably have something to read. On the average trip I bring four books and only read one of them because I find new books to read en route. Really bringing books is insurance.I realize this dependence on books is not entirely good mdash that what I need them for is distraction. The books I bring on trips are often quite virtuous the sort of stuff that might be assigned reading in a college class. But I know my motives aren't virtuous. I bring books because if the world gets boring I need to be able to slip into another distilled by some writer. It's like eating jam when you know you should be eating fruit.There is a point where I'll do without books. I was walking in some steep mountains once and decided I'd rather just think if I was bored rather than carry a single unnecessary ounce. It wasn't so bad. I found I could entertain myself by having ideas instead of reading other people's. If you stop eating jam fruit starts to taste better.So maybe I'll try not bringing books on some future trip. They're going to have to pry the plugs out of my cold dead ears however.
This essay developed out of conversations I've had with several other programmers about why Java smelled suspicious. It's not a critique of Java It is a case study of hacker's radar.Over time hackers develop a nose for good (and bad) technology. I thought it might be interesting to try and write down what made Java seem suspect to me.Some people who've read this think it's an interesting attempt to write about something that hasn't been written about before. Others say I will get in trouble for appearing to be writing about things I don't understand. So just in case it does any good let me clarify that I'm not writing here about Java (which I have never used) but about hacker's radar (which I have thought about a lot).The aphorism "you can't tell a book by its cover" originated in the times when books were sold in plain cardboard covers to be bound by each purchaser according to his own taste. In those days you couldn't tell a book by its cover. But publishing has advanced since then: present day publishers work hard to make the cover something you can tell a book by.I spend a lot of time in bookshops and I feel as if I have by now learned to understand everything publishers mean to tell me about a book and perhaps a bit more. The time I haven't spent in bookshops I've spent mostly in front of computers and I feel as if I've learned to some degree to judge technology by its cover as well. It may be just luck but I've saved myself from a few technologies that turned out to be real stinkers.So far Java seems like a stinker to me. I've never written a Java program never more than glanced over reference books about it but I have a hunch that it won't be a very successful language. I may turn out to be mistaken making predictions about technology is a dangerous business. But for what it's worth as a sort of time capsule here's why I don't like the look of Java: 1. It has been so energetically hyped. Real standards don't have to be promoted. No one had to promote C or Unix or HTML. A real standard tends to be already established by the time most people hear about it. On the hacker radar screen Perl is as big as Java or bigger just on the strength of its own merits.2. It's aimed low. In the original Java white paper Gosling explicitly says Java was designed not to be too difficult for programmers used to C. It was designed to be another C : C plus a few ideas taken from more advanced languages. Like the creators of sitcoms or junk food or package tours Java's designers were consciously designing a product for people not as smart as them. Historically languages designed for other people to use have been bad: Cobol PL I Pascal Ada C . The good languages have been those that were designed for their own creators: C Perl Smalltalk Lisp.3. It has ulterior motives. Someone once said that the world would be a better place if people only wrote books because they had something to say rather than because they wanted to write a book. Likewise the reason we hear about Java all the time is not because it has something to say about programming languages. We hear about Java as part of a plan by Sun to undermine Microsoft.4. No one loves it. C Perl Python Smalltalk and Lisp programmers love their languages. I've never heard anyone say that they loved Java.5. People are forced to use it. A lot of the people I know using Java are using it because they feel they have to. Either it's something they felt they had to do to get funded or something they thought customers would want or something they were told to do by management. These are smart people if the technology was good they'd have used it voluntarily.6. It has too many cooks. The best programming languages have been developed by small groups. Java seems to be run by a committee. If it turns out to be a good language it will be the first time in history that a committee has designed a good language.7. It's bureaucratic. From what little I know about Java there seem to be a lot of protocols for doing things. Really good languages aren't like that. They let you do what you want and get out of the way.8. It's pseudo hip. Sun now pretends that Java is a grassroots open source language effort like Perl or Python. This one just happens to be controlled by a giant company. So the language is likely to have the same drab clunkiness as anything else that comes out of a big company.9. It's designed for large organizations. Large organizations have different aims from hackers. They want languages that are (believed to be) suitable for use by large teams of mediocre programmers languages with features that like the speed limiters in U Haul trucks prevent fools from doing too much damage. Hackers don't like a language that talks down to them. Hackers just want power. Historically languages designed for large organizations (PL I Ada) have lost while hacker languages (C Perl) have won. The reason: today's teenage hacker is tomorrow's CTO.10. The wrong people like it. The programmers I admire most are not on the whole captivated by Java. Who does like Java Suits who don't know one language from another but know that they keep hearing about Java in the press programmers at big companies who are amazed to find that there is something even better than C and plug and chug undergrads who are ready to like anything that might get them a job (will this be on the test ). These people's opinions change with every wind.11. Its daddy is in a pinch. Sun's business model is being undermined on two fronts. Cheap Intel processors of the same type used in desktop machines are now more than fast enough for servers. And FreeBSD seems to be at least as good an OS for servers as Solaris. Sun's advertising implies that you need Sun servers for industrial strength applications. If this were true Yahoo would be first in line to buy Suns but when I worked there the servers were all Intel boxes running FreeBSD. This bodes ill for Sun's future. If Sun runs into trouble they could drag Java down with them.12. The DoD likes it. The Defense Department is encouraging developers to use Java. This seems to me the most damning sign of all. The Defense Department does a fine (though expensive) job of defending the country but they love plans and procedures and protocols. Their culture is the opposite of hacker culture on questions of software they will tend to bet wrong. The last time the DoD really liked a programming language it was Ada. Bear in mind this is not a critique of Java but a critique of its cover. I don't know Java well enough to like it or dislike it. This is just an explanation of why I don't find that I'm eager to learn it.It may seem cavalier to dismiss a language before you've even tried writing programs in it. But this is something all programmers have to do. There are too many technologies out there to learn them all. You have to learn to judge by outward signs which will be worth your time. I have likewise cavalierly dismissed Cobol Ada Visual Basic the IBM AS400 VRML ISO 9000 the SET protocol VMS Novell Netware and CORBA among others. They just smelled wrong.It could be that in Java's case I'm mistaken. It could be that a language promoted by one big company to undermine another designed by a committee for a "mainstream" audience hyped to the skies and beloved of the DoD happens nonetheless to be a clean beautiful powerful language that I would love programming in. It could be but it seems very unlikely.
There are two different ways people judge you. Sometimes judging you correctly is the end goal. But there's a second much more common type of judgement where it isn't. We tend to regard all judgements of us as the first type. We'd probably be happier if we realized which are and which aren't.The first type of judgement the type where judging you is the end goal include court cases grades in classes and most competitions. Such judgements can of course be mistaken but because the goal is to judge you correctly there's usually some kind of appeals process. If you feel you've been misjudged you can protest that you've been treated unfairly.Nearly all the judgements made on children are of this type so we get into the habit early in life of thinking that all judgements are.But in fact there is a second much larger class of judgements where judging you is only a means to something else. These include college admissions hiring and investment decisions and of course the judgements made in dating. This kind of judgement is not really about you.Put yourself in the position of someone selecting players for a national team. Suppose for the sake of simplicity that this is a game with no positions and that you have to select 20 players. There will be a few stars who clearly should make the team and many players who clearly shouldn't. The only place your judgement makes a difference is in the borderline cases. Suppose you screw up and underestimate the 20th best player causing him not to make the team and his place to be taken by the 21st best. You've still picked a good team. If the players have the usual distribution of ability the 21st best player will be only slightly worse than the 20th best. Probably the difference between them will be less than the measurement error.The 20th best player may feel he has been misjudged. But your goal here wasn't to provide a service estimating people's ability. It was to pick a team and if the difference between the 20th and 21st best players is less than the measurement error you've still done that optimally.It's a false analogy even to use the word unfair to describe this kind of misjudgement. It's not aimed at producing a correct estimate of any given individual but at selecting a reasonably optimal set.One thing that leads us astray here is that the selector seems to be in a position of power. That makes him seem like a judge. If you regard someone judging you as a customer instead of a judge the expectation of fairness goes away. The author of a good novel wouldn't complain that readers were unfair for preferring a potboiler with a racy cover. Stupid perhaps but not unfair.Our early training and our self centeredness combine to make us believe that every judgement of us is about us. In fact most aren't. This is a rare case where being less self centered will make people more confident. Once you realize how little most people judging you care about judging you accurately mdash once you realize that because of the normal distribution of most applicant pools it matters least to judge accurately in precisely the cases where judgement has the most effect mdash you won't take rejection so personally.And curiously enough taking rejection less personally may help you to get rejected less often. If you think someone judging you will work hard to judge you correctly you can afford to be passive. But the more you realize that most judgements are greatly influenced by random extraneous factors mdash that most people judging you are more like a fickle novel buyer than a wise and perceptive magistrate mdash the more you realize you can do things to influence the outcome.One good place to apply this principle is in college applications. Most high school students applying to college do it with the usual child's mix of inferiority and self centeredness: inferiority in that they assume that admissions committees must be all seeing self centeredness in that they assume admissions committees care enough about them to dig down into their application and figure out whether they're good or not. These combine to make applicants passive in applying and hurt when they're rejected. If college applicants realized how quick and impersonal most selection processes are they'd make more effort to sell themselves and take the outcome less personally.
Kate Courteau is the architect who designed Y Combinator's office. Recently we managed to recruit her to help us run YC when she's not busy with architectural projects. Though she'd heard a lot about YC since the beginning the last 9 months have been a total immersion.I've been around the startup world for so long that it seems normal to me so I was curious to hear what had surprised her most about it. This was her list:1. How many startups fail. Kate knew in principle that startups were very risky but she was surprised to see how constant the threat of failure was mdash not just for the minnows but even for the famous startups whose founders came to speak at YC dinners. 2. How much startups' ideas change. As usual by Demo Day about half the startups were doing something significantly different than they started with. We encourage that. Starting a startup is like science in that you have to follow the truth wherever it leads. In the rest of the world people don't start things till they're sure what they want to do and once started they tend continue on their initial path even if it's mistaken. 3. How little money it can take to start a startup. In Kate's world everything is still physical and expensive. You can barely renovate a bathroom for the cost of starting a startup. 4. How scrappy founders are. That was her actual word. I agree with her but till she mentioned this it never occurred to me how little this quality is appreciated in most of the rest of the world. It wouldn't be a compliment in most organizations to call someone scrappy.What does it mean exactly It's basically the diminutive form of belligerent. Someone who's scrappy manages to be both threatening and undignified at the same time. Which seems to me exactly what one would want to be in any kind of work. If you're not threatening you're probably not doing anything new and dignity is merely a sort of plaque. 5. How tech saturated Silicon Valley is. "It seems like everybody here is in the industry." That isn't literally true but there is a qualitative difference between Silicon Valley and other places. You tend to keep your voice down because there's a good chance the person at the next table would know some of the people you're talking about. I never felt that in Boston. The good news is there's also a good chance the person at the next table could help you in some way. 6. That the speakers at YC were so consistent in their advice. Actually I've noticed this too. I always worry the speakers will put us in an embarrassing position by contradicting what we tell the startups but it happens surprisingly rarely.When I asked her what specific things she remembered speakers always saying she mentioned: that the way to succeed was to launch something fast listen to users and then iterate that startups required resilience because they were always an emotional rollercoaster and that most VCs were sheep.I've been impressed by how consistently the speakers advocate launching fast and iterating. That was contrarian advice 10 years ago but it's clearly now the established practice. 7. How casual successful startup founders are. Most of the famous founders in Silicon Valley are people you'd overlook on the street. It's not merely that they don't dress up. They don't project any kind of aura of power either. "They're not trying to impress anyone."Interestingly while Kate said that she could never pick out successful founders she could recognize VCs both by the way they dressed and the way they carried themselves. 8. How important it is for founders to have people to ask for advice. (I swear I didn't prompt this one.) Without advice "they'd just be sort of lost." Fortunately there are a lot of people to help them. There's a strong tradition within YC of helping other YC funded startups. But we didn't invent that idea: it's just a slightly more concentrated form of existing Valley culture. 9. What a solitary task startups are. Architects are constantly interacting face to face with other people whereas doing a technology startup at least tends to require long stretches of uninterrupted time to work. "You could do it in a box."By inverting this list we can get a portrait of the "normal" world. It's populated by people who talk a lot with one another as they work slowly but harmoniously on conservative expensive projects whose destinations are decided in advance and who carefully adjust their manner to reflect their position in the hierarchy.That's also a fairly accurate description of the past. So startup culture may not merely be different in the way you'd expect any subculture to be but a leading indicator.
I've read Villehardouin's chronicle of the Fourth Crusade at least two times maybe three. And yet if I had to write down everything I remember from it I doubt it would amount to much more than a page. Multiply this times several hundred and I get an uneasy feeling when I look at my bookshelves. What use is it to read all these books if I remember so little from them A few months ago as I was reading Constance Reid's excellent biography of Hilbert I figured out if not the answer to this question at least something that made me feel better about it. She writes: Hilbert had no patience with mathematical lectures which filled the students with facts but did not teach them how to frame a problem and solve it. He often used to tell them that "a perfect formulation of a problem is already half its solution." That has always seemed to me an important point and I was even more convinced of it after hearing it confirmed by Hilbert.But how had I come to believe in this idea in the first place A combination of my own experience and other things I'd read. None of which I could at that moment remember And eventually I'd forget that Hilbert had confirmed it too. But my increased belief in the importance of this idea would remain something I'd learned from this book even after I'd forgotten I'd learned it.Reading and experience train your model of the world. And even if you forget the experience or what you read its effect on your model of the world persists. Your mind is like a compiled program you've lost the source of. It works but you don't know why.The place to look for what I learned from Villehardouin's chronicle is not what I remember from it but my mental models of the crusades Venice medieval culture siege warfare and so on. Which doesn't mean I couldn't have read more attentively but at least the harvest of reading is not so miserably small as it might seem.This is one of those things that seem obvious in retrospect. But it was a surprise to me and presumably would be to anyone else who felt uneasy about (apparently) forgetting so much they'd read.Realizing it does more than make you feel a little better about forgetting though. There are specific implications.For example reading and experience are usually "compiled" at the time they happen using the state of your brain at that time. The same book would get compiled differently at different points in your life. Which means it is very much worth reading important books multiple times. I always used to feel some misgivings about rereading books. I unconsciously lumped reading together with work like carpentry where having to do something again is a sign you did it wrong the first time. Whereas now the phrase "already read" seems almost ill formed.Intriguingly this implication isn't limited to books. Technology will increasingly make it possible to relive our experiences. When people do that today it's usually to enjoy them again (e.g. when looking at pictures of a trip) or to find the origin of some bug in their compiled code (e.g. when Stephen Fry succeeded in remembering the childhood trauma that prevented him from singing). But as technologies for recording and playing back your life improve it may become common for people to relive experiences without any goal in mind simply to learn from them again as one might when rereading a book.Eventually we may be able not just to play back experiences but also to index and even edit them. So although not knowing how you know things may seem part of being human it may not be. Thanks to Sam Altman Jessica Livingston and Robert Morris for reading drafts of this.
Thirty years ago one was supposed to work one's way up the corporate ladder. That's less the rule now. Our generation wants to get paid up front. Instead of developing a product for some big company in the expectation of getting job security in return we develop the product ourselves in a startup and sell it to the big company. At the very least we want options.Among other things this shift has created the appearance of a rapid increase in economic inequality. But really the two cases are not as different as they look in economic statistics.Economic statistics are misleading because they ignore the value of safe jobs. An easy job from which one can't be fired is worth money exchanging the two is one of the commonest forms of corruption. A sinecure is in effect an annuity. Except sinecures don't appear in economic statistics. If they did it would be clear that in practice socialist countries have nontrivial disparities of wealth because they usually have a class of powerful bureaucrats who are paid mostly by seniority and can never be fired.While not a sinecure a position on the corporate ladder was genuinely valuable because big companies tried not to fire people and promoted from within based largely on seniority. A position on the corporate ladder had a value analogous to the "goodwill" that is a very real element in the valuation of companies. It meant one could expect future high paying jobs.One of main causes of the decay of the corporate ladder is the trend for takeovers that began in the 1980s. Why waste your time climbing a ladder that might disappear before you reach the top And by no coincidence the corporate ladder was one of the reasons the early corporate raiders were so successful. It's not only economic statistics that ignore the value of safe jobs. Corporate balance sheets do too. One reason it was profitable to carve up 1980s companies and sell them for parts was that they hadn't formally acknowledged their implicit debt to employees who had done good work and expected to be rewarded with high paying executive jobs when their time came.In the movie Wall Street Gordon Gekko ridicules a company overloaded with vice presidents. But the company may not be as corrupt as it seems those VPs' cushy jobs were probably payment for work done earlier.I like the new model better. For one thing it seems a bad plan to treat jobs as rewards. Plenty of good engineers got made into bad managers that way. And the old system meant people had to deal with a lot more corporate politics in order to protect the work they'd invested in a position on the ladder.The big disadvantage of the new system is that it involves more risk. If you develop ideas in a startup instead of within a big company any number of random factors could sink you before you can finish. But maybe the older generation would laugh at me for saying that the way we do things is riskier. After all projects within big companies were always getting cancelled as a result of arbitrary decisions from higher up. My father's entire industry (breeder reactors) disappeared that way.For better or worse the idea of the corporate ladder is probably gone for good. The new model seems more liquid and more efficient. But it is less of a change financially than one might think. Our fathers weren't that stupid.
 (These are some notes I made for a panel discussion on programming language design at MIT on May 10 2001.)1. Programming Languages Are for People.Programming languages are how people talk to computers. The computer would be just as happy speaking any language that was unambiguous. The reason we have high level languages is because people can't deal with machine language. The point of programming languages is to prevent our poor frail human brains from being overwhelmed by a mass of detail.Architects know that some kinds of design problems are more personal than others. One of the cleanest most abstract design problems is designing bridges. There your job is largely a matter of spanning a given distance with the least material. The other end of the spectrum is designing chairs. Chair designers have to spend their time thinking about human butts.Software varies in the same way. Designing algorithms for routing data through a network is a nice abstract problem like designing bridges. Whereas designing programming languages is like designing chairs: it's all about dealing with human weaknesses.Most of us hate to acknowledge this. Designing systems of great mathematical elegance sounds a lot more appealing to most of us than pandering to human weaknesses. And there is a role for mathematical elegance: some kinds of elegance make programs easier to understand. But elegance is not an end in itself.And when I say languages have to be designed to suit human weaknesses I don't mean that languages have to be designed for bad programmers. In fact I think you ought to design for the best programmers but even the best programmers have limitations. I don't think anyone would like programming in a language where all the variables were the letter x with integer subscripts.2. Design for Yourself and Your Friends.If you look at the history of programming languages a lot of the best ones were languages designed for their own authors to use and a lot of the worst ones were designed for other people to use.When languages are designed for other people it's always a specific group of other people: people not as smart as the language designer. So you get a language that talks down to you. Cobol is the most extreme case but a lot of languages are pervaded by this spirit.It has nothing to do with how abstract the language is. C is pretty low level but it was designed for its authors to use and that's why hackers like it.The argument for designing languages for bad programmers is that there are more bad programmers than good programmers. That may be so. But those few good programmers write a disproportionately large percentage of the software.I'm interested in the question how do you design a language that the very best hackers will like I happen to think this is identical to the question how do you design a good programming language but even if it isn't it is at least an interesting question.3. Give the Programmer as Much Control as Possible.Many languages (especially the ones designed for other people) have the attitude of a governess: they try to prevent you from doing things that they think aren't good for you. I like the opposite approach: give the programmer as much control as you can.When I first learned Lisp what I liked most about it was that it considered me an equal partner. In the other languages I had learned up till then there was the language and there was my program written in the language and the two were very separate. But in Lisp the functions and macros I wrote were just like those that made up the language itself. I could rewrite the language if I wanted. It had the same appeal as open source software.4. Aim for Brevity.Brevity is underestimated and even scorned. But if you look into the hearts of hackers you'll see that they really love it. How many times have you heard hackers speak fondly of how in say APL they could do amazing things with just a couple lines of code I think anything that really smart people really love is worth paying attention to.I think almost anything you can do to make programs shorter is good. There should be lots of library functions anything that can be implicit should be the syntax should be terse to a fault even the names of things should be short.And it's not only programs that should be short. The manual should be thin as well. A good part of manuals is taken up with clarifications and reservations and warnings and special cases. If you force yourself to shorten the manual in the best case you do it by fixing the things in the language that required so much explanation.5. Admit What Hacking Is.A lot of people wish that hacking was mathematics or at least something like a natural science. I think hacking is more like architecture. Architecture is related to physics in the sense that architects have to design buildings that don't fall down but the actual goal of architects is to make great buildings not to make discoveries about statics.What hackers like to do is make great programs. And I think at least in our own minds we have to remember that it's an admirable thing to write great programs even when this work doesn't translate easily into the conventional intellectual currency of research papers. Intellectually it is just as worthwhile to design a language programmers will love as it is to design a horrible one that embodies some idea you can publish a paper about.1. How to Organize Big Libraries Libraries are becoming an increasingly important component of programming languages. They're also getting bigger and this can be dangerous. If it takes longer to find the library function that will do what you want than it would take to write it yourself then all that code is doing nothing but make your manual thick. (The Symbolics manuals were a case in point.) So I think we will have to work on ways to organize libraries. The ideal would be to design them so that the programmer could guess what library call would do the right thing.2. Are People Really Scared of Prefix Syntax This is an open problem in the sense that I have wondered about it for years and still don't know the answer. Prefix syntax seems perfectly natural to me except possibly for math. But it could be that a lot of Lisp's unpopularity is simply due to having an unfamiliar syntax. Whether to do anything about it if it is true is another question. 3. What Do You Need for Server Based Software I think a lot of the most exciting new applications that get written in the next twenty years will be Web based applications meaning programs that sit on the server and talk to you through a Web browser. And to write these kinds of programs we may need some new things.One thing we'll need is support for the new way that server based apps get released. Instead of having one or two big releases a year like desktop software server based apps get released as a series of small changes. You may have as many as five or ten releases a day. And as a rule everyone will always use the latest version.You know how you can design programs to be debuggable Well server based software likewise has to be designed to be changeable. You have to be able to change it easily or at least to know what is a small change and what is a momentous one.Another thing that might turn out to be useful for server based software surprisingly is continuations. In Web based software you can use something like continuation passing style to get the effect of subroutines in the inherently stateless world of a Web session. Maybe it would be worthwhile having actual continuations if it was not too expensive.4. What New Abstractions Are Left to Discover I'm not sure how reasonable a hope this is but one thing I would really love to do personally is discover a new abstraction something that would make as much of a difference as having first class functions or recursion or even keyword parameters. This may be an impossible dream. These things don't get discovered that often. But I am always looking.1. You Can Use Whatever Language You Want.Writing application programs used to mean writing desktop software. And in desktop software there is a big bias toward writing the application in the same language as the operating system. And so ten years ago writing software pretty much meant writing software in C. Eventually a tradition evolved: application programs must not be written in unusual languages. And this tradition had so long to develop that nontechnical people like managers and venture capitalists also learned it.Server based software blows away this whole model. With server based software you can use any language you want. Almost nobody understands this yet (especially not managers and venture capitalists). A few hackers understand it and that's why we even hear about new indy languages like Perl and Python. We're not hearing about Perl and Python because people are using them to write Windows apps.What this means for us as people interested in designing programming languages is that there is now potentially an actual audience for our work.2. Speed Comes from Profilers.Language designers or at least language implementors like to write compilers that generate fast code. But I don't think this is what makes languages fast for users. Knuth pointed out long ago that speed only matters in a few critical bottlenecks. And anyone who's tried it knows that you can't guess where these bottlenecks are. Profilers are the answer.Language designers are solving the wrong problem. Users don't need benchmarks to run fast. What they need is a language that can show them what parts of their own programs need to be rewritten. That's where speed comes from in practice. So maybe it would be a net win if language implementors took half the time they would have spent doing compiler optimizations and spent it writing a good profiler instead.3. You Need an Application to Drive the Design of a Language.This may not be an absolute rule but it seems like the best languages all evolved together with some application they were being used to write. C was written by people who needed it for systems programming. Lisp was developed partly to do symbolic differentiation and McCarthy was so eager to get started that he was writing differentiation programs even in the first paper on Lisp in 1960.It's especially good if your application solves some new problem. That will tend to drive your language to have new features that programmers need. I personally am interested in writing a language that will be good for writing server based applications. During the panel Guy Steele also made this point with the additional suggestion that the application should not consist of writing the compiler for your language unless your language happens to be intended for writing compilers. 4. A Language Has to Be Good for Writing Throwaway Programs.You know what a throwaway program is: something you write quickly for some limited task. I think if you looked around you'd find that a lot of big serious programs started as throwaway programs. I would not be surprised if most programs started as throwaway programs. And so if you want to make a language that's good for writing software in general it has to be good for writing throwaway programs because that is the larval stage of most software.5. Syntax Is Connected to Semantics.It's traditional to think of syntax and semantics as being completely separate. This will sound shocking but it may be that they aren't. I think that what you want in your language may be related to how you express it.I was talking recently to Robert Morris and he pointed out that operator overloading is a bigger win in languages with infix syntax. In a language with prefix syntax any function you define is effectively an operator. If you want to define a plus for a new type of number you've made up you can just define a new function to add them. If you do that in a language with infix syntax there's a big difference in appearance between the use of an overloaded operator and a function call.1. New Programming Languages.Back in the 1970s it was fashionable to design new programming languages. Recently it hasn't been. But I think server based software will make new languages fashionable again. With server based software you can use any language you want so if someone does design a language that actually seems better than others that are available there will be people who take a risk and use it.2. Time Sharing.Richard Kelsey gave this as an idea whose time has come again in the last panel and I completely agree with him. My guess (and Microsoft's guess it seems) is that much computing will move from the desktop onto remote servers. In other words time sharing is back. And I think there will need to be support for it at the language level. For example I know that Richard and Jonathan Rees have done a lot of work implementing process scheduling within Scheme 48.3. Efficiency.Recently it was starting to seem that computers were finally fast enough. More and more we were starting to hear about byte code which implies to me at least that we feel we have cycles to spare. But I don't think we will with server based software. Someone is going to have to pay for the servers that the software runs on and the number of users they can support per machine will be the divisor of their capital cost.So I think efficiency will matter at least in computational bottlenecks. It will be especially important to do i o fast because server based applications do a lot of i o.It may turn out that byte code is not a win in the end. Sun and Microsoft seem to be facing off in a kind of a battle of the byte codes at the moment. But they're doing it because byte code is a convenient place to insert themselves into the process not because byte code is in itself a good idea. It may turn out that this whole battleground gets bypassed. That would be kind of amusing.1. Clients.This is just a guess but my guess is that the winning model for most applications will be purely server based. Designing software that works on the assumption that everyone will have your client is like designing a society on the assumption that everyone will just be honest. It would certainly be convenient but you have to assume it will never happen.I think there will be a proliferation of devices that have some kind of Web access and all you'll be able to assume about them is that they can support simple html and forms. Will you have a browser on your cell phone Will there be a phone in your palm pilot Will your blackberry get a bigger screen Will you be able to browse the Web on your gameboy Your watch I don't know. And I don't have to know if I bet on everything just being on the server. It's just so much more robust to have all the brains on the server.2. Object Oriented Programming.I realize this is a controversial one but I don't think object oriented programming is such a big deal. I think it is a fine model for certain kinds of applications that need that specific kind of data structure like window systems simulations and cad programs. But I don't see why it ought to be the model for all programming.I think part of the reason people in big companies like object oriented programming is because it yields a lot of what looks like work. Something that might naturally be represented as say a list of integers can now be represented as a class with all kinds of scaffolding and hustle and bustle.Another attraction of object oriented programming is that methods give you some of the effect of first class functions. But this is old news to Lisp programmers. When you have actual first class functions you can just use them in whatever way is appropriate to the task at hand instead of forcing everything into a mold of classes and methods.What this means for language design I think is that you shouldn't build object oriented programming in too deeply. Maybe the answer is to offer more general underlying stuff and let people design whatever object systems they want as libraries.3. Design by Committee.Having your language designed by a committee is a big pitfall and not just for the reasons everyone knows about. Everyone knows that committees tend to yield lumpy inconsistent designs. But I think a greater danger is that they won't take risks. When one person is in charge he can take risks that a committee would never agree on.Is it necessary to take risks to design a good language though Many people might suspect that language design is something where you should stick fairly close to the conventional wisdom. I bet this isn't true. In everything else people do reward is proportionate to risk. Why should language design be any different 
 As E. B. White said "good writing is rewriting." I didn't realize this when I was in school. In writing as in math and science they only show you the finished product. You don't see all the false starts. This gives students a misleading view of how things get made.Part of the reason it happens is that writers don't want people to see their mistakes. But I'm willing to let people see an early draft if it will show how much you have to rewrite to beat an essay into shape.Below is the oldest version I can find of The Age of the Essay (probably the second or third day) with text that ultimately survived in red and text that later got deleted in gray. There seem to be several categories of cuts: things I got wrong things that seem like bragging flames digressions stretches of awkward prose and unnecessary words.I discarded more from the beginning. That's not surprising it takes a while to hit your stride. There are more digressions at the start because I'm not sure where I'm heading.The amount of cutting is about average. I probably write three to four words for every one that appears in the final version of an essay.(Before anyone gets mad at me for opinions expressed here remember that anything you see here that's not in the final version is obviously something I chose not to publish often because I disagree with it.) Recently a friend said that what he liked about my essays was that they weren't written the way we'd been taught to write essays in school. You remember: topic sentence introductory paragraph supporting paragraphs conclusion. It hadn't occurred to me till then that those horrible things we had to write in school were even connected to what I was doing now. But sure enough I thought they did call them "essays " didn't they Well they're not. Those things you have to write in school are not only not essays they're one of the most pointless of all the pointless hoops you have to jump through in school. And I worry that they not only teach students the wrong things about writing but put them off writing entirely.So I'm going to give the other side of the story: what an essay really is and how you write one. Or at least how I write one. Students be forewarned: if you actually write the kind of essay I describe you'll probably get bad grades. But knowing how it's really done should at least help you to understand the feeling of futility you have when you're writing the things they tell you to. The most obvious difference between real essays and the things one has to write in school is that real essays are not exclusively about English literature. It's a fine thing for schools to teach students how to write. But for some bizarre reason (actually a very specific bizarre reason that I'll explain in a moment) the teaching of writing has gotten mixed together with the study of literature. And so all over the country students are writing not about how a baseball team with a small budget might compete with the Yankees or the role of color in fashion or what constitutes a good dessert but about symbolism in Dickens.With obvious results. Only a few people really care about symbolism in Dickens. The teacher doesn't. The students don't. Most of the people who've had to write PhD disserations about Dickens don't. And certainly Dickens himself would be more interested in an essay about color or baseball.How did things get this way To answer that we have to go back almost a thousand years. Between about 500 and 1000 life was not very good in Europe. The term "dark ages" is presently out of fashion as too judgemental (the period wasn't dark it was just different) but if this label didn't already exist it would seem an inspired metaphor. What little original thought there was took place in lulls between constant wars and had something of the character of the thoughts of parents with a new baby. The most amusing thing written during this period Liudprand of Cremona's Embassy to Constantinople is I suspect mostly inadvertantly so.Around 1000 Europe began to catch its breath. And once they had the luxury of curiosity one of the first things they discovered was what we call "the classics." Imagine if we were visited by aliens. If they could even get here they'd presumably know a few things we don't. Immediately Alien Studies would become the most dynamic field of scholarship: instead of painstakingly discovering things for ourselves we could simply suck up everything they'd discovered. So it was in Europe in 1200. When classical texts began to circulate in Europe they contained not just new answers but new questions. (If anyone proved a theorem in christian Europe before 1200 for example there is no record of it.)For a couple centuries some of the most important work being done was intellectual archaelogy. Those were also the centuries during which schools were first established. And since reading ancient texts was the essence of what scholars did then it became the basis of the curriculum.By 1700 someone who wanted to learn about physics didn't need to start by mastering Greek in order to read Aristotle. But schools change slower than scholarship: the study of ancient texts had such prestige that it remained the backbone of education until the late 19th century. By then it was merely a tradition. It did serve some purposes: reading a foreign language was difficult and thus taught discipline or at least kept students busy it introduced students to cultures quite different from their own and its very uselessness made it function (like white gloves) as a social bulwark. But it certainly wasn't true and hadn't been true for centuries that students were serving apprenticeships in the hottest area of scholarship.Classical scholarship had also changed. In the early era philology actually mattered. The texts that filtered into Europe were all corrupted to some degree by the errors of translators and copyists. Scholars had to figure out what Aristotle said before they could figure out what he meant. But by the modern era such questions were answered as well as they were ever going to be. And so the study of ancient texts became less about ancientness and more about texts.The time was then ripe for the question: if the study of ancient texts is a valid field for scholarship why not modern texts The answer of course is that the raison d'etre of classical scholarship was a kind of intellectual archaelogy that does not need to be done in the case of contemporary authors. But for obvious reasons no one wanted to give that answer. The archaeological work being mostly done it implied that the people studying the classics were if not wasting their time at least working on problems of minor importance.And so began the study of modern literature. There was some initial resistance but it didn't last long. The limiting reagent in the growth of university departments is what parents will let undergraduates study. If parents will let their children major in x the rest follows straightforwardly. There will be jobs teaching x and professors to fill them. The professors will establish scholarly journals and publish one another's papers. Universities with x departments will subscribe to the journals. Graduate students who want jobs as professors of x will write dissertations about it. It may take a good long while for the more prestigious universities to cave in and establish departments in cheesier xes but at the other end of the scale there are so many universities competing to attract students that the mere establishment of a discipline requires little more than the desire to do it.High schools imitate universities. And so once university English departments were established in the late nineteenth century the 'riting component of the 3 Rs was morphed into English. With the bizarre consequence that high school students now had to write about English literature to write without even realizing it imitations of whatever English professors had been publishing in their journals a few decades before. It's no wonder if this seems to the student a pointless exercise because we're now three steps removed from real work: the students are imitating English professors who are imitating classical scholars who are merely the inheritors of a tradition growing out of what was 700 years ago fascinating and urgently needed work.Perhaps high schools should drop English and just teach writing. The valuable part of English classes is learning to write and that could be taught better by itself. Students learn better when they're interested in what they're doing and it's hard to imagine a topic less interesting than symbolism in Dickens. Most of the people who write about that sort of thing professionally are not really interested in it. (Though indeed it's been a while since they were writing about symbolism now they're writing about gender.)I have no illusions about how eagerly this suggestion will be adopted. Public schools probably couldn't stop teaching English even if they wanted to they're probably required to by law. But here's a related suggestion that goes with the grain instead of against it: that universities establish a writing major. Many of the students who now major in English would major in writing if they could and most would be better off.It will be argued that it is a good thing for students to be exposed to their literary heritage. Certainly. But is that more important than that they learn to write well And are English classes even the place to do it After all the average public high school student gets zero exposure to his artistic heritage. No disaster results. The people who are interested in art learn about it for themselves and those who aren't don't. I find that American adults are no better or worse informed about literature than art despite the fact that they spent years studying literature in high school and no time at all studying art. Which presumably means that what they're taught in school is rounding error compared to what they pick up on their own.Indeed English classes may even be harmful. In my case they were effectively aversion therapy. Want to make someone dislike a book Force him to read it and write an essay about it. And make the topic so intellectually bogus that you could not if asked explain why one ought to write about it. I love to read more than anything but by the end of high school I never read the books we were assigned. I was so disgusted with what we were doing that it became a point of honor with me to write nonsense at least as good at the other students' without having more than glanced over the book to learn the names of the characters and a few random events in it.I hoped this might be fixed in college but I found the same problem there. It was not the teachers. It was English. We were supposed to read novels and write essays about them. About what and why That no one seemed to be able to explain. Eventually by trial and error I found that what the teacher wanted us to do was pretend that the story had really taken place and to analyze based on what the characters said and did (the subtler clues the better) what their motives must have been. One got extra credit for motives having to do with class as I suspect one must now for those involving gender and sexuality. I learned how to churn out such stuff well enough to get an A but I never took another English class.And the books we did these disgusting things to like those we mishandled in high school I find still have black marks against them in my mind. The one saving grace was that English courses tend to favor pompous dull writers like Henry James who deserve black marks against their names anyway. One of the principles the IRS uses in deciding whether to allow deductions is that if something is fun it isn't work. Fields that are intellectually unsure of themselves rely on a similar principle. Reading P.G. Wodehouse or Evelyn Waugh or Raymond Chandler is too obviously pleasing to seem like serious work as reading Shakespeare would have been before English evolved enough to make it an effort to understand him. sh And so good writers (just you wait and see who's still in print in 300 years) are less likely to have readers turned against them by clumsy self appointed tour guides. The other big difference between a real essay and the things they make you write in school is that a real essay doesn't take a position and then defend it. That principle like the idea that we ought to be writing about literature turns out to be another intellectual hangover of long forgotten origins. It's often mistakenly believed that medieval universities were mostly seminaries. In fact they were more law schools. And at least in our tradition lawyers are advocates: they are trained to be able to take either side of an argument and make as good a case for it as they can. Whether or not this is a good idea (in the case of prosecutors it probably isn't) it tended to pervade the atmosphere of early universities. After the lecture the most common form of discussion was the disputation. This idea is at least nominally preserved in our present day thesis defense indeed in the very word thesis. Most people treat the words thesis and dissertation as interchangeable but originally at least a thesis was a position one took and the dissertation was the argument by which one defended it.I'm not complaining that we blur these two words together. As far as I'm concerned the sooner we lose the original sense of the word thesis the better. For many perhaps most graduate students it is stuffing a square peg into a round hole to try to recast one's work as a single thesis. And as for the disputation that seems clearly a net lose. Arguing two sides of a case may be a necessary evil in a legal dispute but it's not the best way to get at the truth as I think lawyers would be the first to admit. And yet this principle is built into the very structure of the essays they teach you to write in high school. The topic sentence is your thesis chosen in advance the supporting paragraphs the blows you strike in the conflict and the conclusion uh what it the conclusion I was never sure about that in high school. If your thesis was well expressed what need was there to restate it In theory it seemed that the conclusion of a really good essay ought not to need to say any more than QED. But when you understand the origins of this sort of "essay" you can see where the conclusion comes from. It's the concluding remarks to the jury. What other alternative is there To answer that we have to reach back into history again though this time not so far. To Michel de Montaigne inventor of the essay. He was doing something quite different from what a lawyer does and the difference is embodied in the name. Essayer is the French verb meaning "to try" (the cousin of our word assay) and an "essai" is an effort. An essay is something you write in order to figure something out.Figure out what You don't know yet. And so you can't begin with a thesis because you don't have one and may never have one. An essay doesn't begin with a statement but with a question. In a real essay you don't take a position and defend it. You see a door that's ajar and you open it and walk in to see what's inside.If all you want to do is figure things out why do you need to write anything though Why not just sit and think Well there precisely is Montaigne's great discovery. Expressing ideas helps to form them. Indeed helps is far too weak a word. 90 of what ends up in my essays was stuff I only thought of when I sat down to write them. That's why I write them.So there's another difference between essays and the things you have to write in school. In school you are in theory explaining yourself to someone else. In the best case if you're really organized you're just writing it down. In a real essay you're writing for yourself. You're thinking out loud.But not quite. Just as inviting people over forces you to clean up your apartment writing something that you know other people will read forces you to think well. So it does matter to have an audience. The things I've written just for myself are no good. Indeed they're bad in a particular way: they tend to peter out. When I run into difficulties I notice that I tend to conclude with a few vague questions and then drift off to get a cup of tea.This seems a common problem. It's practically the standard ending in blog entries with the addition of a "heh" or an emoticon prompted by the all too accurate sense that something is missing.And indeed a lot of published essays peter out in this same way. Particularly the sort written by the staff writers of newsmagazines. Outside writers tend to supply editorials of the defend a position variety which make a beeline toward a rousing (and foreordained) conclusion. But the staff writers feel obliged to write something more balanced which in practice ends up meaning blurry. Since they're writing for a popular magazine they start with the most radioactively controversial questions from which (because they're writing for a popular magazine) they then proceed to recoil from in terror. Gay marriage for or against This group says one thing. That group says another. One thing is certain: the question is a complex one. (But don't get mad at us. We didn't draw any conclusions.)Questions aren't enough. An essay has to come up with answers. They don't always of course. Sometimes you start with a promising question and get nowhere. But those you don't publish. Those are like experiments that get inconclusive results. Something you publish ought to tell the reader something he didn't already know. But what you tell him doesn't matter so long as it's interesting. I'm sometimes accused of meandering. In defend a position writing that would be a flaw. There you're not concerned with truth. You already know where you're going and you want to go straight there blustering through obstacles and hand waving your way across swampy ground. But that's not what you're trying to do in an essay. An essay is supposed to be a search for truth. It would be suspicious if it didn't meander.The Meander is a river in Asia Minor (aka Turkey). As you might expect it winds all over the place. But does it do this out of frivolity Quite the opposite. Like all rivers it's rigorously following the laws of physics. The path it has discovered winding as it is represents the most economical route to the sea.The river's algorithm is simple. At each step flow down. For the essayist this translates to: flow interesting. Of all the places to go next choose whichever seems most interesting.I'm pushing this metaphor a bit. An essayist can't have quite as little foresight as a river. In fact what you do (or what I do) is somewhere between a river and a roman road builder. I have a general idea of the direction I want to go in and I choose the next topic with that in mind. This essay is about writing so I do occasionally yank it back in that direction but it is not all the sort of essay I thought I was going to write about writing.Note too that hill climbing (which is what this algorithm is called) can get you in trouble. Sometimes just like a river you run up against a blank wall. What I do then is just what the river does: backtrack. At one point in this essay I found that after following a certain thread I ran out of ideas. I had to go back n paragraphs and start over in another direction. For illustrative purposes I've left the abandoned branch as a footnote. Err on the side of the river. An essay is not a reference work. It's not something you read looking for a specific answer and feel cheated if you don't find it. I'd much rather read an essay that went off in an unexpected but interesting direction than one that plodded dutifully along a prescribed course.So what's interesting For me interesting means surprise. Design as Matz has said should follow the principle of least surprise. A button that looks like it will make a machine stop should make it stop not speed up. Essays should do the opposite. Essays should aim for maximum surprise.I was afraid of flying for a long time and could only travel vicariously. When friends came back from faraway places it wasn't just out of politeness that I asked them about their trip. I really wanted to know. And I found that the best way to get information out of them was to ask what surprised them. How was the place different from what they expected This is an extremely useful question. You can ask it of even the most unobservant people and it will extract information they didn't even know they were recording. Indeed you can ask it in real time. Now when I go somewhere new I make a note of what surprises me about it. Sometimes I even make a conscious effort to visualize the place beforehand so I'll have a detailed image to diff with reality. Surprises are facts you didn't already know. But they're more than that. They're facts that contradict things you thought you knew. And so they're the most valuable sort of fact you can get. They're like a food that's not merely healthy but counteracts the unhealthy effects of things you've already eaten. How do you find surprises Well therein lies half the work of essay writing. (The other half is expressing yourself well.) You can at least use yourself as a proxy for the reader. You should only write about things you've thought about a lot. And anything you come across that surprises you who've thought about the topic a lot will probably surprise most readers.For example in a recent essay I pointed out that because you can only judge computer programmers by working with them no one knows in programming who the heroes should be. I certainly didn't realize this when I started writing the essay and even now I find it kind of weird. That's what you're looking for.So if you want to write essays you need two ingredients: you need a few topics that you think about a lot and you need some ability to ferret out the unexpected.What should you think about My guess is that it doesn't matter. Almost everything is interesting if you get deeply enough into it. The one possible exception are things like working in fast food which have deliberately had all the variation sucked out of them. In retrospect was there anything interesting about working in Baskin Robbins Well it was interesting to notice how important color was to the customers. Kids a certain age would point into the case and say that they wanted yellow. Did they want French Vanilla or Lemon They would just look at you blankly. They wanted yellow. And then there was the mystery of why the perennial favorite Pralines n' Cream was so appealing. I'm inclined now to think it was the salt. And the mystery of why Passion Fruit tasted so disgusting. People would order it because of the name and were always disappointed. It should have been called In sink erator Fruit. And there was the difference in the way fathers and mothers bought ice cream for their kids. Fathers tended to adopt the attitude of benevolent kings bestowing largesse and mothers that of harried bureaucrats giving in to pressure against their better judgement. So yes there does seem to be material even in fast food.What about the other half ferreting out the unexpected That may require some natural ability. I've noticed for a long time that I'm pathologically observant. .... That was as far as I'd gotten at the time. Notes sh In Shakespeare's own time serious writing meant theological discourses not the bawdy plays acted over on the other side of the river among the bear gardens and whorehouses.The other extreme the work that seems formidable from the moment it's created (indeed is deliberately intended to be) is represented by Milton. Like the Aeneid Paradise Lost is a rock imitating a butterfly that happened to get fossilized. Even Samuel Johnson seems to have balked at this on the one hand paying Milton the compliment of an extensive biography and on the other writing of Paradise Lost that "none who read it ever wished it longer." That was as far as I'd gotten at the time. The rest is a kind of midden that always accumulates at the end of the file consisting of notes to myself and chunks of deleted text that I might (but never do) re use later.These are the notes about what to work on the next morning. (The percent sign is the LaTex comment character.) Except for the beginning I didn't write about what I expected to: I didn't consciously notice the BR stuff at the time. I'm noticing it now from raw memories. naturalistic and weird: breugel not allowed to write about painting like nothing more than to be wrong because surprise called opinionated because I express opinions in ways that violate the usual social conventions much as surgeons do things to your body that violate the usual social conventions. but not opinionated in the sense that I won't change my opinions. I love to be surprised and to be surprised is always to have been at least implicitly mistaken This is the part I had to discard when I backtracked. It used to follow the paragraph that ended with "prescribed course."Because you're after answers instead of just trying to convince people of something it's important to qualify your conclusions precisely. No scientist will be satisfied to hear that you measured something and it was 12.7. 12.7 plus or minus what What's your experimental error This is just as important for questions whose answers aren't numbers. And yet people rarely bother in ordinary conversation most scientists included. Once people switch over to talking about matters that aren't "scientific" mere matters of opinion they pay comparatively little attention to qualifying what they say.Oh they use qualifiers. Once kids arrive in college they learn pretty quickly that proper intellectuals qualify every statement with "perhaps" or "almost." But this kind of qualification is nothing more than grammatical. Sometimes these automatically inserted qualifications end up at odds with the statements they're attached to yielding comic results. You find people saying that a certain writer is "perhaps the greatest writer of the twentieth century." That's a rather strong way to put something you're not sure about. Wouldn't it be better just to say "one of the best writers of the twentieth century "One of the only people I've ever met who really pays attention to qualification is my friend Robert Morris. His great fear in life is to say something that's mistaken. So whenever he says something he pays as much attention to expressing how sure he is of it as he does to what he's saying. He is a connoisseur of his own certainty and has as many words for expressing it as Eskimos have for snow. This is how we all ought to be. Sticking a perfunctory perhaps onto every statement may shield us from blame but it tells the reader nothing. That's like the manufacturers of Q Tips who to cover themselves print "do not insert in ear canal" on the boxes when they know damned well that that's how Q Tips are used.One of the most important things to know about painting is that darks make the light. This is particularly obvious in watercolor. Suppose you want to make a painting that seems glowing with light. Well you can't get any brighter than the white of the paper. So the only way to make the make the painting bright is to add darks that make the lights seem brighter by contrast. Without darks the painting won't seem bright it will just seem washed out.Some books about writing say that you shouldn't begin sentences with "I think." If you're saying something the argument does then obviously you think it so why bother telling people This is nonsense. The heavily qualified statements in an essay play the role of darks. When you reach a point you're really sure of you can just state it with no qualifications and it will have all the more force by contrast.People aren't used to unqualified statements. Without the automatic "perhaps" they're used to seeing many realize with a shock that what they're reading are opinions. Well of course. And what essay consists of anything else An essay is not a theorem. You don't have to say only things you can prove irrefutably. Don't be afraid of expressing your opinions. Just make sure you're right. Miscellaneous smaller cuts:The downside is that essays may contain mistakes (though so can theorems). The upside is that you can talk aboutmore things.The world is not divided into the "scientific" and the "subjective." Scientific is a matter of degree. And there are plenty of questions that would be impractical to answer by a controlled experiment and yet which are worth discussing. Indeed some of the most interesting questions are of this type.To mathematicians the work of physicists seems rather speculative.But if they're less precise they can talk about a broader range of subjects.Sometimes I feel tempted to add a disclaimer to the beginning of my essays saying if you're bothered by unqualified statements just stick the "perhaps" that you're used to seeing before each one. I mean the same thing.Don't expect people to thank you for delivering these valuable facts to them though any more than they would thank you for giving them steamed vegetables for dinner. More notes about topics I intended to cover: people will get angry accuse you of making unsupported statements mere opinions as if problem was structure not content whole question of qualification support all the good writers seem to be english practically the algorithm for life: look for anomalies actually start the one about the role of color in fashion try to write sound bites length kind of arbitrary based on human reader not needs of topic And more cut text:I don't know O'Reilly's street address but it's probably not going to surprise me. Surprises areWhat's so important about surprises They're the truth you didn't already know.An essay must at least explore conclusions even if this offends people. And the disconcerting thing is merely exploring ideas does offend people. Readers used to defend a position writing tend to get as angry with you for saying "let's explore the possibility that x" as if you had said "I believe x." Indeed some writers use the former as nothing more than a learned sounding replacement for the latter. But in a proper essay But when I want to say x I just say it.That sort of thing isn't really an essay either though it begins like one.I'm too afraid of real live readers to pull that sort of thing.fuzzy treatments of controversial topics that begin with interesting questions retreat in terror from thenature of newsmagazines means that such essays always start with the most controversial questions.Real live readers won't stand for this. In fact they're often made to stand for it. I've noticed plenty of "essays" that peter out in this way.Their resistance gives the essay half its shape.Writing well is an extremely valuable skill. In part because to do it you have to think well.By the late 19th century the era in which the study of ancient texts had been the hottest area of scholarship was a distant memory. But the classics still had enormous prestige. The problems posed by the ancientness part had been mostly solved or solved as well as they were going to be. And so what was leftthe people doing it hardly remembered why it had originally been done.We think of the classics as tidy little red and green volumes from the Loeb Library.From Islamic civilizations which were at that time far ahead in matters of scholarship they got Plato Aristotle Euclid Ptolemy. different Europe: what entered in 500 was the rump of the western Roman empire and what emerged in 1000 was a civilization centered as much in northern Europe as in Italy.misleading to talk about "Europe"From this period date the oldest surviving institutionsbecause university admissions were limited to children whose parents were willing to pay for them to spend ten years studying ancient languages.(I'm not saying that new disciplines have no content. I'm just saying that that isn't necessary.) These appear to the the original notes I started with. I don't usually write more than this before I start. I never got to half the topics I meant to cover because the focus switched from prose to ideas. friend liked why about novels imagine if aliens showed up. If you feel like what you're doing is pointless you're right. took an english course in college and was so disgusted I never took another Big diff is essays are about figuring things out not choosing a position and arguing it like a lawyer. don't learn hardest thing which is to cut waugh test read aloud mark uncomfortable bits stitch sentences together rhythm 
Adults lie constantly to kids. I'm not saying we should stop but I think we should at least examine which lies we tell and why.There may also be a benefit to us. We were all lied to as kids and some of the lies we were told still affect us. So by studying the ways adults lie to kids we may be able to clear our heads of lies we were told.I'm using the word "lie" in a very general sense: not just overt falsehoods but also all the more subtle ways we mislead kids. Though "lie" has negative connotations I don't mean to suggest we should never do this mdash just that we should pay attention when we do. 1 One of the most remarkable things about the way we lie to kids is how broad the conspiracy is. All adults know what their culture lies to kids about: they're the questions you answer "Ask your parents." If a kid asked who won the World Series in 1982 or what the atomic weight of carbon was you could just tell him. But if a kid asks you "Is there a God " or "What's a prostitute " you'll probably say "Ask your parents."Since we all agree kids see few cracks in the view of the world presented to them. The biggest disagreements are between parents and schools but even those are small. Schools are careful what they say about controversial topics and if they do contradict what parents want their kids to believe parents either pressure the school into keeping quiet or move their kids to a new school.The conspiracy is so thorough that most kids who discover it do so only by discovering internal contradictions in what they're told. It can be traumatic for the ones who wake up during the operation. Here's what happened to Einstein: Through the reading of popular scientific books I soon reached the conviction that much in the stories of the Bible could not be true. The consequence was a positively fanatic freethinking coupled with the impression that youth is intentionally being deceived by the state through lies: it was a crushing impression. 2 I remember that feeling. By 15 I was convinced the world was corrupt from end to end. That's why movies like The Matrix have such resonance. Every kid grows up in a fake world. In a way it would be easier if the forces behind it were as clearly differentiated as a bunch of evil machines and one could make a clean break just by taking a pill. ProtectionIf you ask adults why they lie to kids the most common reason they give is to protect them. And kids do need protecting. The environment you want to create for a newborn child will be quite unlike the streets of a big city.That seems so obvious it seems wrong to call it a lie. It's certainly not a bad lie to tell to give a baby the impression the world is quiet and warm and safe. But this harmless type of lie can turn sour if left unexamined.Imagine if you tried to keep someone in as protected an environment as a newborn till age 18. To mislead someone so grossly about the world would seem not protection but abuse. That's an extreme example of course when parents do that sort of thing it becomes national news. But you see the same problem on a smaller scale in the malaise teenagers feel in suburbia.The main purpose of suburbia is to provide a protected environment for children to grow up in. And it seems great for 10 year olds. I liked living in suburbia when I was 10. I didn't notice how sterile it was. My whole world was no bigger than a few friends' houses I bicycled to and some woods I ran around in. On a log scale I was midway between crib and globe. A suburban street was just the right size. But as I grew older suburbia started to feel suffocatingly fake.Life can be pretty good at 10 or 20 but it's often frustrating at 15. This is too big a problem to solve here but certainly one reason life sucks at 15 is that kids are trapped in a world designed for 10 year olds.What do parents hope to protect their children from by raising them in suburbia A friend who moved out of Manhattan said merely that her 3 year old daughter "saw too much." Off the top of my head that might include: people who are high or drunk poverty madness gruesome medical conditions sexual behavior of various degrees of oddness and violent anger.I think it's the anger that would worry me most if I had a 3 year old. I was 29 when I moved to New York and I was surprised even then. I wouldn't want a 3 year old to see some of the disputes I saw. It would be too frightening. A lot of the things adults conceal from smaller children they conceal because they'd be frightening not because they want to conceal the existence of such things. Misleading the child is just a byproduct.This seems one of the most justifiable types of lying adults do to kids. But because the lies are indirect we don't keep a very strict accounting of them. Parents know they've concealed the facts about sex and many at some point sit their kids down and explain more. But few tell their kids about the differences between the real world and the cocoon they grew up in. Combine this with the confidence parents try to instill in their kids and every year you get a new crop of 18 year olds who think they know how to run the world.Don't all 18 year olds think they know how to run the world Actually this seems to be a recent innovation no more than about 100 years old. In preindustrial times teenage kids were junior members of the adult world and comparatively well aware of their shortcomings. They could see they weren't as strong or skillful as the village smith. In past times people lied to kids about some things more than we do now but the lies implicit in an artificial protected environment are a recent invention. Like a lot of new inventions the rich got this first. Children of kings and great magnates were the first to grow up out of touch with the world. Suburbia means half the population can live like kings in that respect. Sex (and Drugs)I'd have different worries about raising teenage kids in New York. I'd worry less about what they'd see and more about what they'd do. I went to college with a lot of kids who grew up in Manhattan and as a rule they seemed pretty jaded. They seemed to have lost their virginity at an average of about 14 and by college had tried more drugs than I'd even heard of.The reasons parents don't want their teenage kids having sex are complex. There are some obvious dangers: pregnancy and sexually transmitted diseases. But those aren't the only reasons parents don't want their kids having sex. The average parents of a 14 year old girl would hate the idea of her having sex even if there were zero risk of pregnancy or sexually transmitted diseases.Kids can probably sense they aren't being told the whole story. After all pregnancy and sexually transmitted diseases are just as much a problem for adults and they have sex.What really bothers parents about their teenage kids having sex Their dislike of the idea is so visceral it's probably inborn. But if it's inborn it should be universal and there are plenty of societies where parents don't mind if their teenage kids have sex mdash indeed where it's normal for 14 year olds to become mothers. So what's going on There does seem to be a universal taboo against sex with prepubescent children. One can imagine evolutionary reasons for that. And I think this is the main reason parents in industrialized societies dislike teenage kids having sex. They still think of them as children even though biologically they're not so the taboo against child sex still has force.One thing adults conceal about sex they also conceal about drugs: that it can cause great pleasure. That's what makes sex and drugs so dangerous. The desire for them can cloud one's judgement mdash which is especially frightening when the judgement being clouded is the already wretched judgement of a teenage kid.Here parents' desires conflict. Older societies told kids they had bad judgement but modern parents want their children to be confident. This may well be a better plan than the old one of putting them in their place but it has the side effect that after having implicitly lied to kids about how good their judgement is we then have to lie again about all the things they might get into trouble with if they believed us.If parents told their kids the truth about sex and drugs it would be: the reason you should avoid these things is that you have lousy judgement. People with twice your experience still get burned by them. But this may be one of those cases where the truth wouldn't be convincing because one of the symptoms of bad judgement is believing you have good judgement. When you're too weak to lift something you can tell but when you're making a decision impetuously you're all the more sure of it. InnocenceAnother reason parents don't want their kids having sex is that they want to keep them innocent. Adults have a certain model of how kids are supposed to behave and it's different from what they expect of other adults.One of the most obvious differences is the words kids are allowed to use. Most parents use words when talking to other adults that they wouldn't want their kids using. They try to hide even the existence of these words for as long as they can. And this is another of those conspiracies everyone participates in: everyone knows you're not supposed to swear in front of kids.I've never heard more different explanations for anything parents tell kids than why they shouldn't swear. Every parent I know forbids their children to swear and yet no two of them have the same justification. It's clear most start with not wanting kids to swear then make up the reason afterward.So my theory about what's going on is that the function of swearwords is to mark the speaker as an adult. There's no difference in the meaning of "shit" and "poopoo." So why should one be ok for kids to say and one forbidden The only explanation is: by definition. 3 Why does it bother adults so much when kids do things reserved for adults The idea of a foul mouthed cynical 10 year old leaning against a lamppost with a cigarette hanging out of the corner of his mouth is very disconcerting. But why One reason we want kids to be innocent is that we're programmed to like certain kinds of helplessness. I've several times heard mothers say they deliberately refrained from correcting their young children's mispronunciations because they were so cute. And if you think about it cuteness is helplessness. Toys and cartoon characters meant to be cute always have clueless expressions and stubby ineffectual limbs.It's not surprising we'd have an inborn desire to love and protect helpless creatures considering human offspring are so helpless for so long. Without the helplessness that makes kids cute they'd be very annoying. They'd merely seem like incompetent adults. But there's more to it than that. The reason our hypothetical jaded 10 year old bothers me so much is not just that he'd be annoying but that he'd have cut off his prospects for growth so early. To be jaded you have to think you know how the world works and any theory a 10 year old had about that would probably be a pretty narrow one.Innocence is also open mindedness. We want kids to be innocent so they can continue to learn. Paradoxical as it sounds there are some kinds of knowledge that get in the way of other kinds of knowledge. If you're going to learn that the world is a brutal place full of people trying to take advantage of one another you're better off learning it last. Otherwise you won't bother learning much more.Very smart adults often seem unusually innocent and I don't think this is a coincidence. I think they've deliberately avoided learning about certain things. Certainly I do. I used to think I wanted to know everything. Now I know I don't. DeathAfter sex death is the topic adults lie most conspicuously about to kids. Sex I believe they conceal because of deep taboos. But why do we conceal death from kids Probably because small children are particularly horrified by it. They want to feel safe and death is the ultimate threat.One of the most spectacular lies our parents told us was about the death of our first cat. Over the years as we asked for more details they were compelled to invent more so the story grew quite elaborate. The cat had died at the vet's office. Of what Of the anaesthesia itself. Why was the cat at the vet's office To be fixed. And why had such a routine operation killed it It wasn't the vet's fault the cat had a congenitally weak heart the anaesthesia was too much for it but there was no way anyone could have known this in advance. It was not till we were in our twenties that the truth came out: my sister then about three had accidentally stepped on the cat and broken its back.They didn't feel the need to tell us the cat was now happily in cat heaven. My parents never claimed that people or animals who died had "gone to a better place " or that we'd meet them again. It didn't seem to harm us.My grandmother told us an edited version of the death of my grandfather. She said they'd been sitting reading one day and when she said something to him he didn't answer. He seemed to be asleep but when she tried to rouse him she couldn't. "He was gone." Having a heart attack sounded like falling asleep. Later I learned it hadn't been so neat and the heart attack had taken most of a day to kill him.Along with such outright lies there must have been a lot of changing the subject when death came up. I can't remember that of course but I can infer it from the fact that I didn't really grasp I was going to die till I was about 19. How could I have missed something so obvious for so long Now that I've seen parents managing the subject I can see how: questions about death are gently but firmly turned aside.On this topic especially they're met half way by kids. Kids often want to be lied to. They want to believe they're living in a comfortable safe world as much as their parents want them to believe it. 4 IdentitySome parents feel a strong adherence to an ethnic or religious group and want their kids to feel it too. This usually requires two different kinds of lying: the first is to tell the child that he or she is an X and the second is whatever specific lies Xes differentiate themselves by believing. 5 Telling a child they have a particular ethnic or religious identity is one of the stickiest things you can tell them. Almost anything else you tell a kid they can change their mind about later when they start to think for themselves. But if you tell a kid they're a member of a certain group that seems nearly impossible to shake.This despite the fact that it can be one of the most premeditated lies parents tell. When parents are of different religions they'll often agree between themselves that their children will be "raised as Xes." And it works. The kids obligingly grow up considering themselves as Xes despite the fact that if their parents had chosen the other way they'd have grown up considering themselves as Ys.One reason this works so well is the second kind of lie involved. The truth is common property. You can't distinguish your group by doing things that are rational and believing things that are true. If you want to set yourself apart from other people you have to do things that are arbitrary and believe things that are false. And after having spent their whole lives doing things that are arbitrary and believing things that are false and being regarded as odd by "outsiders" on that account the cognitive dissonance pushing children to regard themselves as Xes must be enormous. If they aren't an X why are they attached to all these arbitrary beliefs and customs If they aren't an X why do all the non Xes call them one This form of lie is not without its uses. You can use it to carry a payload of beneficial beliefs and they will also become part of the child's identity. You can tell the child that in addition to never wearing the color yellow believing the world was created by a giant rabbit and always snapping their fingers before eating fish Xes are also particularly honest and industrious. Then X children will grow up feeling it's part of their identity to be honest and industrious.This probably accounts for a lot of the spread of modern religions and explains why their doctrines are a combination of the useful and the bizarre. The bizarre half is what makes the religion stick and the useful half is the payload. 6 AuthorityOne of the least excusable reasons adults lie to kids is to maintain power over them. Sometimes these lies are truly sinister like a child molester telling his victims they'll get in trouble if they tell anyone what happened to them. Others seem more innocent it depends how badly adults lie to maintain their power and what they use it for.Most adults make some effort to conceal their flaws from children. Usually their motives are mixed. For example a father who has an affair generally conceals it from his children. His motive is partly that it would worry them partly that this would introduce the topic of sex and partly (a larger part than he would admit) that he doesn't want to tarnish himself in their eyes.If you want to learn what lies are told to kids read almost any book written to teach them about "issues." 7 Peter Mayle wrote one called Why Are We Getting a Divorce It begins with the three most important things to remember about divorce one of which is: You shouldn't put the blame on one parent because divorce is never only one person's fault. 8 Really When a man runs off with his secretary is it always partly his wife's fault But I can see why Mayle might have said this. Maybe it's more important for kids to respect their parents than to know the truth about them.But because adults conceal their flaws and at the same time insist on high standards of behavior for kids a lot of kids grow up feeling they fall hopelessly short. They walk around feeling horribly evil for having used a swearword while in fact most of the adults around them are doing much worse things.This happens in intellectual as well as moral questions. The more confident people are the more willing they seem to be to answer a question "I don't know." Less confident people feel they have to have an answer or they'll look bad. My parents were pretty good about admitting when they didn't know things but I must have been told a lot of lies of this type by teachers because I rarely heard a teacher say "I don't know" till I got to college. I remember because it was so surprising to hear someone say that in front of a class.The first hint I had that teachers weren't omniscient came in sixth grade after my father contradicted something I'd learned in school. When I protested that the teacher had said the opposite my father replied that the guy had no idea what he was talking about mdash that he was just an elementary school teacher after all.Just a teacher The phrase seemed almost grammatically ill formed. Didn't teachers know everything about the subjects they taught And if not why were they the ones teaching us The sad fact is US public school teachers don't generally understand the stuff they're teaching very well. There are some sterling exceptions but as a rule people planning to go into teaching rank academically near the bottom of the college population. So the fact that I still thought at age 11 that teachers were infallible shows what a job the system must have done on my brain. SchoolWhat kids get taught in school is a complex mix of lies. The most excusable are those told to simplify ideas to make them easy to learn. The problem is a lot of propaganda gets slipped into the curriculum in the name of simplification.Public school textbooks represent a compromise between what various powerful groups want kids to be told. The lies are rarely overt. Usually they consist either of omissions or of over emphasizing certain topics at the expense of others. The view of history we got in elementary school was a crude hagiography with at least one representative of each powerful group.The famous scientists I remember were Einstein Marie Curie and George Washington Carver. Einstein was a big deal because his work led to the atom bomb. Marie Curie was involved with X rays. But I was mystified about Carver. He seemed to have done stuff with peanuts.It's obvious now that he was on the list because he was black (and for that matter that Marie Curie was on it because she was a woman) but as a kid I was confused for years about him. I wonder if it wouldn't have been better just to tell us the truth: that there weren't any famous black scientists. Ranking George Washington Carver with Einstein misled us not only about science but about the obstacles blacks faced in his time.As subjects got softer the lies got more frequent. By the time you got to politics and recent history what we were taught was pretty much pure propaganda. For example we were taught to regard political leaders as saints mdash especially the recently martyred Kennedy and King. It was astonishing to learn later that they'd both been serial womanizers and that Kennedy was a speed freak to boot. (By the time King's plagiarism emerged I'd lost the ability to be surprised by the misdeeds of famous people.)I doubt you could teach kids recent history without teaching them lies because practically everyone who has anything to say about it has some kind of spin to put on it. Much recent history consists of spin. It would probably be better just to teach them metafacts like that.Probably the biggest lie told in schools though is that the way to succeed is through following "the rules." In fact most such rules are just hacks to manage large groups efficiently. PeaceOf all the reasons we lie to kids the most powerful is probably the same mundane reason they lie to us.Often when we lie to people it's not part of any conscious strategy but because they'd react violently to the truth. Kids almost by definition lack self control. They react violently to things mdash and so they get lied to a lot. 9 A few Thanksgivings ago a friend of mine found himself in a situation that perfectly illustrates the complex motives we have when we lie to kids. As the roast turkey appeared on the table his alarmingly perceptive 5 year old son suddenly asked if the turkey had wanted to die. Foreseeing disaster my friend and his wife rapidly improvised: yes the turkey had wanted to die and in fact had lived its whole life with the aim of being their Thanksgiving dinner. And that (phew) was the end of that.Whenever we lie to kids to protect them we're usually also lying to keep the peace.One consequence of this sort of calming lie is that we grow up thinking horrible things are normal. It's hard for us to feel a sense of urgency as adults over something we've literally been trained not to worry about. When I was about 10 I saw a documentary on pollution that put me into a panic. It seemed the planet was being irretrievably ruined. I went to my mother afterward to ask if this was so. I don't remember what she said but she made me feel better so I stopped worrying about it.That was probably the best way to handle a frightened 10 year old. But we should understand the price. This sort of lie is one of the main reasons bad things persist: we're all trained to ignore them. DetoxA sprinter in a race almost immediately enters a state called "oxygen debt." His body switches to an emergency source of energy that's faster than regular aerobic respiration. But this process builds up waste products that ultimately require extra oxygen to break down so at the end of the race he has to stop and pant for a while to recover.We arrive at adulthood with a kind of truth debt. We were told a lot of lies to get us (and our parents) through our childhood. Some may have been necessary. Some probably weren't. But we all arrive at adulthood with heads full of lies.There's never a point where the adults sit you down and explain all the lies they told you. They've forgotten most of them. So if you're going to clear these lies out of your head you're going to have to do it yourself.Few do. Most people go through life with bits of packing material adhering to their minds and never know it. You probably never can completely undo the effects of lies you were told as a kid but it's worth trying. I've found that whenever I've been able to undo a lie I was told a lot of other things fell into place.Fortunately once you arrive at adulthood you get a valuable new resource you can use to figure out what lies you were told. You're now one of the liars. You get to watch behind the scenes as adults spin the world for the next generation of kids.The first step in clearing your head is to realize how far you are from a neutral observer. When I left high school I was I thought a complete skeptic. I'd realized high school was crap. I thought I was ready to question everything I knew. But among the many other things I was ignorant of was how much debris there already was in my head. It's not enough to consider your mind a blank slate. You have to consciously erase it. Notes 1 One reason I stuck with such a brutally simple word is that the lies we tell kids are probably not quite as harmless as we think. If you look at what adults told children in the past it's shocking how much they lied to them. Like us they did it with the best intentions. So if we think we're as open as one could reasonably be with children we're probably fooling ourselves. Odds are people in 100 years will be as shocked at some of the lies we tell as we are at some of the lies people told 100 years ago.I can't predict which these will be and I don't want to write an essay that will seem dumb in 100 years. So instead of using special euphemisms for lies that seem excusable according to present fashions I'm just going to call all our lies lies.(I have omitted one type: lies told to play games with kids' credulity. These range from "make believe " which is not really a lie because it's told with a wink to the frightening lies told by older siblings. There's not much to say about these: I wouldn't want the first type to go away and wouldn't expect the second type to.) 2 Calaprice Alice (ed.) The Quotable Einstein Princeton University Press 1996. 3 If you ask parents why kids shouldn't swear the less educated ones usually reply with some question begging answer like "it's inappropriate " while the more educated ones come up with elaborate rationalizations. In fact the less educated parents seem closer to the truth. 4 As a friend with small children pointed out it's easy for small children to consider themselves immortal because time seems to pass so slowly for them. To a 3 year old a day feels like a month might to an adult. So 80 years sounds to him like 2400 years would to us. 5 I realize I'm going to get endless grief for classifying religion as a type of lie. Usually people skirt that issue with some equivocation implying that lies believed for a sufficiently long time by sufficiently large numbers of people are immune to the usual standards for truth. But because I can't predict which lies future generations will consider inexcusable I can't safely omit any type we tell. Yes it seems unlikely that religion will be out of fashion in 100 years but no more unlikely than it would have seemed to someone in 1880 that schoolchildren in 1980 would be taught that masturbation was perfectly normal and not to feel guilty about it. 6 Unfortunately the payload can consist of bad customs as well as good ones. For example there are certain qualities that some groups in America consider "acting white." In fact most of them could as accurately be called "acting Japanese." There's nothing specifically white about such customs. They're common to all cultures with long traditions of living in cities. So it is probably a losing bet for a group to consider behaving the opposite way as part of its identity. 7 In this context "issues" basically means "things we're going to lie to them about." That's why there's a special name for these topics. 8 Mayle Peter Why Are We Getting a Divorce Harmony 1988. 9 The ironic thing is this is also the main reason kids lie to adults. If you freak out when people tell you alarming things they won't tell you them. Teenagers don't tell their parents what happened that night they were supposed to be staying at a friend's house for the same reason parents don't tell 5 year olds the truth about the Thanksgiving turkey. They'd freak if they knew. Thanks to Sam Altman Marc Andreessen Trevor Blackwell Patrick Collison Jessica Livingston Jackie McDonough Robert Morris and David Sloo for reading drafts of this. And since there are some controversial ideas here I should add that none of them agreed with everything in it.
 After a link to Beating the Averages was posted on slashdot some readers wanted to hear in more detail about the specific technical advantages we got from using Lisp in Viaweb. For those who are interested here are some excerpts from a talk I gave in April 2001 at BBN Labs in Cambridge MA.
All the best hackers I know are gradually switching to Macs. My friend Robert said his whole research group at MIT recently bought themselves Powerbooks. These guys are not the graphic designers and grandmas who were buying Macs at Apple's low point in the mid 1990s. They're about as hardcore OS hackers as you can get.The reason of course is OS X. Powerbooks are beautifully designed and run FreeBSD. What more do you need to know I got a Powerbook at the end of last year. When my IBM Thinkpad's hard disk died soon after it became my only laptop. And when my friend Trevor showed up at my house recently he was carrying a Powerbook identical to mine.For most of us it's not a switch to Apple but a return. Hard as this was to believe in the mid 90s the Mac was in its time the canonical hacker's computer.In the fall of 1983 the professor in one of my college CS classes got up and announced like a prophet that there would soon be a computer with half a MIPS of processing power that would fit under an airline seat and cost so little that we could save enough to buy one from a summer job. The whole room gasped. And when the Mac appeared it was even better than we'd hoped. It was small and powerful and cheap as promised. But it was also something we'd never considered a computer could be: fabulously well designed.I had to have one. And I wasn't alone. In the mid to late 1980s all the hackers I knew were either writing software for the Mac or wanted to. Every futon sofa in Cambridge seemed to have the same fat white book lying open on it. If you turned it over it said "Inside Macintosh." Then came Linux and FreeBSD and hackers who follow the most powerful OS wherever it leads found themselves switching to Intel boxes. If you cared about design you could buy a Thinkpad which was at least not actively repellent if you could get the Intel and Microsoft stickers off the front. 1 With OS X the hackers are back. When I walked into the Apple store in Cambridge it was like coming home. Much was changed but there was still that Apple coolness in the air that feeling that the show was being run by someone who really cared instead of random corporate deal makers.So what the business world may say. Who cares if hackers like Apple again How big is the hacker market after all Quite small but important out of proportion to its size. When it comes to computers what hackers are doing now everyone will be doing in ten years. Almost all technology from Unix to bitmapped displays to the Web became popular first within CS departments and research labs and gradually spread to the rest of the world.I remember telling my father back in 1986 that there was a new kind of computer called a Sun that was a serious Unix machine but so small and cheap that you could have one of your own to sit in front of instead of sitting in front of a VT100 connected to a single central Vax. Maybe I suggested he should buy some stock in this company. I think he really wishes he'd listened.In 1994 my friend Koling wanted to talk to his girlfriend in Taiwan and to save long distance bills he wrote some software that would convert sound to data packets that could be sent over the Internet. We weren't sure at the time whether this was a proper use of the Internet which was still then a quasi government entity. What he was doing is now called VoIP and it is a huge and rapidly growing business.If you want to know what ordinary people will be doing with computers in ten years just walk around the CS department at a good university. Whatever they're doing you'll be doing.In the matter of "platforms" this tendency is even more pronounced because novel software originates with great hackers and they tend to write it first for whatever computer they personally use. And software sells hardware. Many if not most of the initial sales of the Apple II came from people who bought one to run VisiCalc. And why did Bricklin and Frankston write VisiCalc for the Apple II Because they personally liked it. They could have chosen any machine to make into a star.If you want to attract hackers to write software that will sell your hardware you have to make it something that they themselves use. It's not enough to make it "open." It has to be open and good.And open and good is what Macs are again finally. The intervening years have created a situation that is as far as I know without precedent: Apple is popular at the low end and the high end but not in the middle. My seventy year old mother has a Mac laptop. My friends with PhDs in computer science have Mac laptops. 2 And yet Apple's overall market share is still small.Though unprecedented I predict this situation is also temporary.So Dad there's this company called Apple. They make a new kind of computer that's as well designed as a Bang Olufsen stereo system and underneath is the best Unix machine you can buy. Yes the price to earnings ratio is kind of high but I think a lot of people are going to want these. Notes 1 These horrible stickers are much like the intrusive ads popular on pre Google search engines. They say to the customer: you are unimportant. We care about Intel and Microsoft not you. 2 Y Combinator is (we hope) visited mostly by hackers. The proportions of OSes are: Windows 66.4 Macintosh 18.8 Linux 11.4 and FreeBSD 1.5 . The Mac number is a big change from what it would have been five years ago.
A lot of cities look at Silicon Valley and ask "How could we make something like that happen here " The organic way to do it is to establish a first rate university in a place where rich people want to live. That's how Silicon Valley happened. But could you shortcut the process by funding startups Possibly. Let's consider what it would take.The first thing to understand is that encouraging startups is a different problem from encouraging startups in a particular city. The latter is much more expensive.People sometimes think they could improve the startup scene in their town by starting something like Y Combinator there but in fact it will have near zero effect. I know because Y Combinator itself had near zero effect on Boston when we were based there half the year. The people we funded came from all over the country (indeed the world) and afterward they went wherever they could get more funding mdash which generally meant Silicon Valley.The seed funding business is not a regional business because at that stage startups are mobile. They're just a couple founders with laptops. 1 If you want to encourage startups in a particular city you have to fund startups that won't leave. There are two ways to do that: have rules preventing them from leaving or fund them at the point in their life when they naturally take root. The first approach is a mistake because it becomes a filter for selecting bad startups. If your terms force startups to do things they don't want to only the desperate ones will take your money.Good startups will move to another city as a condition of funding. What they won't do is agree not to move the next time they need funding. So the only way to get them to stay is to give them enough that they never need to leave. How much would that take If you want to keep startups from leaving your town you have to give them enough that they're not tempted by an offer from Silicon Valley VCs that requires them to move. A startup would be able to refuse such an offer if they had grown to the point where they were (a) rooted in your town and or (b) so successful that VCs would fund them even if they didn't move.How much would it cost to grow a startup to that point A minimum of several hundred thousand dollars. Wufoo seem to have rooted themselves in Tampa on 118k but they're an extreme case. On average it would take at least half a million.So if it seems too good to be true to think you could grow a local silicon valley by giving startups 15 20k each like Y Combinator that's because it is. To make them stick around you'd have to give them at least 20 times that much.However even that is an interesting prospect. Suppose to be on the safe side it would cost a million dollars per startup. If you could get startups to stick to your town for a million apiece then for a billion dollars you could bring in a thousand startups. That probably wouldn't push you past Silicon Valley itself but it might get you second place.For the price of a football stadium any town that was decent to live in could make itself one of the biggest startup hubs in the world.What's more it wouldn't take very long. You could probably do it in five years. During the term of one mayor. And it would get easier over time because the more startups you had in town the less it would take to get new ones to move there. By the time you had a thousand startups in town the VCs wouldn't be trying so hard to get them to move to Silicon Valley instead they'd be opening local offices. Then you'd really be in good shape. You'd have started a self sustaining chain reaction like the one that drives the Valley. But now comes the hard part. You have to pick the startups. How do you do that Picking startups is a rare and valuable skill and the handful of people who have it are not readily hireable. And this skill is so hard to measure that if a government did try to hire people with it they'd almost certainly get the wrong ones.For example a city could give money to a VC fund to establish a local branch and let them make the choices. But only a bad VC fund would take that deal. They wouldn't seem bad to the city officials. They'd seem very impressive. But they'd be bad at picking startups. That's the characteristic failure mode of VCs. All VCs look impressive to limited partners. The difference between the good ones and the bad ones only becomes visible in the other half of their jobs: choosing and advising startups. 2 What you really want is a pool of local angel investors mdash people investing money they made from their own startups. But unfortunately you run into a chicken and egg problem here. If your city isn't already a startup hub there won't be people there who got rich from startups. And there is no way I can think of that a city could attract angels from outside. By definition they're rich. There's no incentive that would make them move. 3 However a city could select startups by piggybacking on the expertise of investors who weren't local. It would be pretty straightforward to make a list of the most eminent Silicon Valley angels and from that to generate a list of all the startups they'd invested in. If a city offered these companies a million dollars each to move a lot of the earlier stage ones would probably take it.Preposterous as this plan sounds it's probably the most efficient way a city could select good startups.It would hurt the startups somewhat to be separated from their original investors. On the other hand the extra million dollars would give them a lot more runway. Would the transplanted startups survive Quite possibly. The only way to find out would be to try it. It would be a pretty cheap experiment as civil expenditures go. Pick 30 startups that eminent angels have recently invested in give them each a million dollars if they'll relocate to your city and see what happens after a year. If they seem to be thriving you can try importing startups on a larger scale.Don't be too legalistic about the conditions under which they're allowed to leave. Just have a gentlemen's agreement.Don't try to do it on the cheap and pick only 10 for the initial experiment. If you do this on too small a scale you'll just guarantee failure. Startups need to be around other startups. 30 would be enough to feel like a community.Don't try to make them all work in some renovated warehouse you've made into an "incubator." Real startups prefer to work in their own spaces.In fact don't impose any restrictions on the startups at all. Startup founders are mostly hackers and hackers are much more constrained by gentlemen's agreements than regulations. If they shake your hand on a promise they'll keep it. But show them a lock and their first thought is how to pick it.Interestingly the 30 startup experiment could be done by any sufficiently rich private citizen. And what pressure it would put on the city if it worked. 4 Should the city take stock in return for the money In principle they're entitled to but how would they choose valuations for the startups You couldn't just give them all the same valuation: that would be too low for some (who'd turn you down) and too high for others (because it might make their next round a "down round"). And since we're assuming we're doing this without being able to pick startups we also have to assume we can't value them since that's practically the same thing.Another reason not to take stock in the startups is that startups are often involved in disreputable things. So are established companies but they don't get blamed for it. If someone gets murdered by someone they met on Facebook the press will treat the story as if it were about Facebook. If someone gets murdered by someone they met at a supermarket the press will just treat it as a story about a murder. So understand that if you invest in startups they might build things that get used for pornography or file sharing or the expression of unfashionable opinions. You should probably sponsor this project jointly with your political opponents so they can't use whatever the startups do as a club to beat you with.It would be too much of a political liability just to give the startups the money though. So the best plan would be to make it convertible debt but which didn't convert except in a really big round like 20 million. How well this scheme worked would depend on the city. There are some towns like Portland that would be easy to turn into startup hubs and others like Detroit where it would really be an uphill battle. So be honest with yourself about the sort of town you have before you try this.It will be easier in proportion to how much your town resembles San Francisco. Do you have good weather Do people live downtown or have they abandoned the center for the suburbs Would the city be described as "hip" and "tolerant " or as reflecting "traditional values " Are there good universities nearby Are there walkable neighborhoods Would nerds feel at home If you answered yes to all these questions you might be able not only to pull off this scheme but to do it for less than a million per startup.I realize the chance of any city having the political will to carry out this plan is microscopically small. I just wanted to explore what it would take if one did. How hard would it be to jumpstart a silicon valley It's fascinating to think this prize might be within the reach of so many cities. So even though they'll all still spend the money on the stadium at least now someone can ask them: why did you choose to do that instead of becoming a serious rival to Silicon Valley Notes 1 What people who start these supposedly local seed firms always find is that (a) their applicants come from all over not just the local area and (b) the local startups also apply to the other seed firms. So what ends up happening is that the applicant pool gets partitioned by quality rather than geography. 2 Interestingly the bad VCs fail by choosing startups run by people like them mdash people who are good presenters but have no real substance. It's a case of the fake leading the fake. And since everyone involved is so plausible the LPs who invest in these funds have no idea what's happening till they measure their returns. 3 Not even being a tax haven I suspect. That makes some rich people move but not the type who would make good angel investors in startups. 4 Thanks to Michael Keenan for pointing this out.Thanks to Trevor Blackwell Jessica Livingston Robert Morris and Fred Wilson for reading drafts of this.
It struck me recently how few of the most successful people I know are mean. There are exceptions but remarkably few.Meanness isn't rare. In fact one of the things the internet has shown us is how mean people can be. A few decades ago only famous people and professional writers got to publish their opinions. Now everyone can and we can all see the long tail of meanness that had previously been hidden.And yet while there are clearly a lot of mean people out there there are next to none among the most successful people I know. What's going on here Are meanness and success inversely correlated Part of what's going on of course is selection bias. I only know people who work in certain fields: startup founders programmers professors. I'm willing to believe that successful people in other fields are mean. Maybe successful hedge fund managers are mean I don't know enough to say. It seems quite likely that most successful drug lords are mean. But there are at least big chunks of the world that mean people don't rule and that territory seems to be growing.My wife and Y Combinator cofounder Jessica is one of those rare people who have x ray vision for character. Being married to her is like standing next to an airport baggage scanner. She came to the startup world from investment banking she has always been struck both by how consistently successful startup founders turn out to be good people and how consistently bad people fail as startup founders.Why I think there are several reasons. One is that being mean makes you stupid. That's why I hate fights. You never do your best work in a fight because fights are not sufficiently general. Winning is always a function of the situation and the people involved. You don't win fights by thinking of big ideas but by thinking of tricks that work in one particular case. And yet fighting is just as much work as thinking about real problems. Which is particularly painful to someone who cares how their brain is used: your brain goes fast but you get nowhere like a car spinning its wheels.Startups don't win by attacking. They win by transcending. There are exceptions of course but usually the way to win is to race ahead not to stop and fight.Another reason mean founders lose is that they can't get the best people to work for them. They can hire people who will put up with them because they need a job. But the best people have other options. A mean person can't convince the best people to work for him unless he is super convincing. And while having the best people helps any organization it's critical for startups.There is also a complementary force at work: if you want to build great things it helps to be driven by a spirit of benevolence. The startup founders who end up richest are not the ones driven by money. The ones driven by money take the big acquisition offer that nearly every successful startup gets en route. 1 The ones who keep going are driven by something else. They may not say so explicitly but they're usually trying to improve the world. Which means people with a desire to improve the world have a natural advantage. 2 The exciting thing is that startups are not just one random type of work in which meanness and success are inversely correlated. This kind of work is the future.For most of history success meant control of scarce resources. One got that by fighting whether literally in the case of pastoral nomads driving hunter gatherers into marginal lands or metaphorically in the case of Gilded Age financiers contending with one another to assemble railroad monopolies. For most of history success meant success at zero sum games. And in most of them meanness was not a handicap but probably an advantage.That is changing. Increasingly the games that matter are not zero sum. Increasingly you win not by fighting to get control of a scarce resource but by having new ideas and building new things. 3 There have long been games where you won by having new ideas. In the third century BC Archimedes won by doing that. At least until an invading Roman army killed him. Which illustrates why this change is happening: for new ideas to matter you need a certain degree of civil order. And not just not being at war. You also need to prevent the sort of economic violence that nineteenth century magnates practiced against one another and communist countries practiced against their citizens. People need to feel that what they create can't be stolen. 4 That has always been the case for thinkers which is why this trend began with them. When you think of successful people from history who weren't ruthless you get mathematicians and writers and artists. The exciting thing is that their m.o. seems to be spreading. The games played by intellectuals are leaking into the real world and this is reversing the historical polarity of the relationship between meanness and success.So I'm really glad I stopped to think about this. Jessica and I have always worked hard to teach our kids not to be mean. We tolerate noise and mess and junk food but not meanness. And now I have both an additional reason to crack down on it and an additional argument to use when I do: that being mean makes you fail. Notes 1 I'm not saying all founders who take big acquisition offers are driven only by money but rather that those who don't aren't. Plus one can have benevolent motives for being driven by money mdash for example to take care of one's family or to be free to work on projects that improve the world. 2 It's unlikely that every successful startup improves the world. But their founders like parents truly believe they do. Successful founders are in love with their companies. And while this sort of love is as blind as the love people have for one another it is genuine. 3 Peter Thiel would point out that successful founders still get rich from controlling monopolies just monopolies they create rather than ones they capture. And while this is largely true it means a big change in the sort of person who wins. 4 To be fair the Romans didn't mean to kill Archimedes. The Roman commander specifically ordered that he be spared. But he got killed in the chaos anyway.In sufficiently disordered times even thinking requires control of scarce resources because living at all is a scarce resource.Thanks to Sam Altman Ron Conway Daniel Gackle Jessica Livingston Robert Morris Geoff Ralston and Fred Wilson for reading drafts of this.
A few days ago I suddenly realized Microsoft was dead. I was talking to a young startup founder about how Google was different from Yahoo. I said that Yahoo had been warped from the start by their fear of Microsoft. That was why they'd positioned themselves as a "media company" instead of a technology company. Then I looked at his face and realized he didn't understand. It was as if I'd told him how much girls liked Barry Manilow in the mid 80s. Barry who Microsoft He didn't say anything but I could tell he didn't quite believe anyone would be frightened of them.Microsoft cast a shadow over the software world for almost 20 years starting in the late 80s. I can remember when it was IBM before them. I mostly ignored this shadow. I never used Microsoft software so it only affected me indirectly mdash for example in the spam I got from botnets. And because I wasn't paying attention I didn't notice when the shadow disappeared.But it's gone now. I can sense that. No one is even afraid of Microsoft anymore. They still make a lot of money mdash so does IBM for that matter. But they're not dangerous.When did Microsoft die and of what I know they seemed dangerous as late as 2001 because I wrote an essay then about how they were less dangerous than they seemed. I'd guess they were dead by 2005. I know when we started Y Combinator we didn't worry about Microsoft as competition for the startups we funded. In fact we've never even invited them to the demo days we organize for startups to present to investors. We invite Yahoo and Google and some other Internet companies but we've never bothered to invite Microsoft. Nor has anyone there ever even sent us an email. They're in a different world.What killed them Four things I think all of them occurring simultaneously in the mid 2000s.The most obvious is Google. There can only be one big man in town and they're clearly it. Google is the most dangerous company now by far in both the good and bad senses of the word. Microsoft can at best limp along afterward.When did Google take the lead There will be a tendency to push it back to their IPO in August 2004 but they weren't setting the terms of the debate then. I'd say they took the lead in 2005. Gmail was one of the things that put them over the edge. Gmail showed they could do more than search.Gmail also showed how much you could do with web based software if you took advantage of what later came to be called "Ajax." And that was the second cause of Microsoft's death: everyone can see the desktop is over. It now seems inevitable that applications will live on the web mdash not just email but everything right up to Photoshop. Even Microsoft sees that now.Ironically Microsoft unintentionally helped create Ajax. The x in Ajax is from the XMLHttpRequest object which lets the browser communicate with the server in the background while displaying a page. (Originally the only way to communicate with the server was to ask for a new page.) XMLHttpRequest was created by Microsoft in the late 90s because they needed it for Outlook. What they didn't realize was that it would be useful to a lot of other people too mdash in fact to anyone who wanted to make web apps work like desktop ones.The other critical component of Ajax is Javascript the programming language that runs in the browser. Microsoft saw the danger of Javascript and tried to keep it broken for as long as they could. 1 But eventually the open source world won by producing Javascript libraries that grew over the brokenness of Explorer the way a tree grows over barbed wire.The third cause of Microsoft's death was broadband Internet. Anyone who cares can have fast Internet access now. And the bigger the pipe to the server the less you need the desktop.The last nail in the coffin came of all places from Apple. Thanks to OS X Apple has come back from the dead in a way that is extremely rare in technology. 2 Their victory is so complete that I'm now surprised when I come across a computer running Windows. Nearly all the people we fund at Y Combinator use Apple laptops. It was the same in the audience at startup school. All the computer people use Macs or Linux now. Windows is for grandmas like Macs used to be in the 90s. So not only does the desktop no longer matter no one who cares about computers uses Microsoft's anyway.And of course Apple has Microsoft on the run in music too with TV and phones on the way.I'm glad Microsoft is dead. They were like Nero or Commodus mdash evil in the way only inherited power can make you. Because remember the Microsoft monopoly didn't begin with Microsoft. They got it from IBM. The software business was overhung by a monopoly from about the mid 1950s to about 2005. For practically its whole existence that is. One of the reasons "Web 2.0" has such an air of euphoria about it is the feeling conscious or not that this era of monopoly may finally be over.Of course as a hacker I can't help thinking about how something broken could be fixed. Is there some way Microsoft could come back In principle yes. To see how envision two things: (a) the amount of cash Microsoft now has on hand and (b) Larry and Sergey making the rounds of all the search engines ten years ago trying to sell the idea for Google for a million dollars and being turned down by everyone.The surprising fact is brilliant hackers mdash dangerously brilliant hackers mdash can be had very cheaply by the standards of a company as rich as Microsoft. They can't hire smart people anymore but they could buy as many as they wanted for only an order of magnitude more. So if they wanted to be a contender again this is how they could do it: Buy all the good "Web 2.0" startups. They could get substantially all of them for less than they'd have to pay for Facebook. Put them all in a building in Silicon Valley surrounded by lead shielding to protect them from any contact with Redmond. I feel safe suggesting this because they'd never do it. Microsoft's biggest weakness is that they still don't realize how much they suck. They still think they can write software in house. Maybe they can by the standards of the desktop world. But that world ended a few years ago.I already know what the reaction to this essay will be. Half the readers will say that Microsoft is still an enormously profitable company and that I should be more careful about drawing conclusions based on what a few people think in our insular little "Web 2.0" bubble. The other half the younger half will complain that this is old news.See also: Microsoft is Dead: the Cliffs NotesNotes 1 It doesn't take a conscious effort to make software incompatible. All you have to do is not work too hard at fixing bugs mdash which if you're a big company you produce in copious quantities. The situation is analogous to the writing of "literary theorists." Most don't try to be obscure they just don't make an effort to be clear. It wouldn't pay. 2 In part because Steve Jobs got pushed out by John Sculley in a way that's rare among technology companies. If Apple's board hadn't made that blunder they wouldn't have had to bounce back.
If you have a US startup called X and you don't have x.com you should probably change your name.The reason is not just that people can't find you. For companies with mobile apps especially having the right domain name is not as critical as it used to be for getting users. The problem with not having the .com of your name is that it signals weakness. Unless you're so big that your reputation precedes you a marginal domain suggests you're a marginal company. Whereas (as Stripe shows) having x.com signals strength even if it has no relation to what you do.Even good founders can be in denial about this. Their denial derives from two very powerful forces: identity and lack of imagination.X is what we are founders think. There's no other name as good. Both of which are false.You can fix the first by stepping back from the problem. Imagine you'd called your company something else. If you had surely you'd be just as attached to that name as you are to your current one. The idea of switching to your current name would seem repellent. 1 There's nothing intrinsically great about your current name. Nearly all your attachment to it comes from it being attached to you. 2 The way to neutralize the second source of denial your inability to think of other potential names is to acknowledge that you're bad at naming. Naming is a completely separate skill from those you need to be a good founder. You can be a great startup founder but hopeless at thinking of names for your company.Once you acknowledge that you stop believing there is nothing else you could be called. There are lots of other potential names that are as good or better you just can't think of them.How do you find them One answer is the default way to solve problems you're bad at: find someone else who can think of names. But with company names there is another possible approach. It turns out almost any word or word pair that is not an obviously bad name is a sufficiently good one and the number of such domains is so large that you can find plenty that are cheap or even untaken. So make a list and try to buy some. That's what Stripe did. (Their search also turned up parse.com which their friends at Parse took.)The reason I know that naming companies is a distinct skill orthogonal to the others you need in a startup is that I happen to have it. Back when I was running YC and did more office hours with startups I would often help them find new names. 80 of the time we could find at least one good name in a 20 minute office hour slot.Now when I do office hours I have to focus on more important questions like what the company is doing. I tell them when they need to change their name. But I know the power of the forces that have them in their grip so I know most won't listen. 3 There are of course examples of startups that have succeeded without having the .com of their name. There are startups that have succeeded despite any number of different mistakes. But this mistake is less excusable than most. It's something that can be fixed in a couple days if you have sufficient discipline to acknowledge the problem.100 of the top 20 YC companies by valuation have the .com of their name. 94 of the top 50 do. But only 66 of companies in the current batch have the .com of their name. Which suggests there are lessons ahead for most of the rest one way or another. Notes 1 Incidentally this thought experiment works for nationality and religion too. 2 The liking you have for a name that has become part of your identity manifests itself not directly which would be easy to discount but as a collection of specious beliefs about its intrinsic qualities. (This too is true of nationality and religion as well.) 3 Sometimes founders know it's a problem that they don't have the .com of their name but delusion strikes a step later in the belief that they'll be able to buy it despite having no evidence it's for sale. Don't believe a domain is for sale unless the owner has already told you an asking price. Thanks to Sam Altman Jessica Livingston and Geoff Ralston for reading drafts of this.
When we were in junior high school my friend Rich and I made a map of the school lunch tables according to popularity. This was easy to do because kids only ate lunch with others of about the same popularity. We graded them from A to E. A tables were full of football players and cheerleaders and so on. E tables contained the kids with mild cases of Down's Syndrome what in the language of the time we called "retards."We sat at a D table as low as you could get without looking physically different. We were not being especially candid to grade ourselves as D. It would have taken a deliberate lie to say otherwise. Everyone in the school knew exactly how popular everyone else was including us.My stock gradually rose during high school. Puberty finally arrived I became a decent soccer player I started a scandalous underground newspaper. So I've seen a good part of the popularity landscape.I know a lot of people who were nerds in school and they all tell the same story: there is a strong correlation between being smart and being a nerd and an even stronger inverse correlation between being a nerd and being popular. Being smart seems to make you unpopular.Why To someone in school now that may seem an odd question to ask. The mere fact is so overwhelming that it may seem strange to imagine that it could be any other way. But it could. Being smart doesn't make you an outcast in elementary school. Nor does it harm you in the real world. Nor as far as I can tell is the problem so bad in most other countries. But in a typical American secondary school being smart is likely to make your life difficult. Why The key to this mystery is to rephrase the question slightly. Why don't smart kids make themselves popular If they're so smart why don't they figure out how popularity works and beat the system just as they do for standardized tests One argument says that this would be impossible that the smart kids are unpopular because the other kids envy them for being smart and nothing they could do could make them popular. I wish. If the other kids in junior high school envied me they did a great job of concealing it. And in any case if being smart were really an enviable quality the girls would have broken ranks. The guys that guys envy girls like.In the schools I went to being smart just didn't matter much. Kids didn't admire it or despise it. All other things being equal they would have preferred to be on the smart side of average rather than the dumb side but intelligence counted far less than say physical appearance charisma or athletic ability.So if intelligence in itself is not a factor in popularity why are smart kids so consistently unpopular The answer I think is that they don't really want to be popular.If someone had told me that at the time I would have laughed at him. Being unpopular in school makes kids miserable some of them so miserable that they commit suicide. Telling me that I didn't want to be popular would have seemed like telling someone dying of thirst in a desert that he didn't want a glass of water. Of course I wanted to be popular.But in fact I didn't not enough. There was something else I wanted more: to be smart. Not simply to do well in school though that counted for something but to design beautiful rockets or to write well or to understand how to program computers. In general to make great things.At the time I never tried to separate my wants and weigh them against one another. If I had I would have seen that being smart was more important. If someone had offered me the chance to be the most popular kid in school but only at the price of being of average intelligence (humor me here) I wouldn't have taken it.Much as they suffer from their unpopularity I don't think many nerds would. To them the thought of average intelligence is unbearable. But most kids would take that deal. For half of them it would be a step up. Even for someone in the eightieth percentile (assuming as everyone seemed to then that intelligence is a scalar) who wouldn't drop thirty points in exchange for being loved and admired by everyone And that I think is the root of the problem. Nerds serve two masters. They want to be popular certainly but they want even more to be smart. And popularity is not something you can do in your spare time not in the fiercely competitive environment of an American secondary school. Alberti arguably the archetype of the Renaissance Man writes that "no art however minor demands less than total dedication if you want to excel in it." I wonder if anyone in the world works harder at anything than American school kids work at popularity. Navy SEALs and neurosurgery residents seem slackers by comparison. They occasionally take vacations some even have hobbies. An American teenager may work at being popular every waking hour 365 days a year.I don't mean to suggest they do this consciously. Some of them truly are little Machiavellis but what I really mean here is that teenagers are always on duty as conformists.For example teenage kids pay a great deal of attention to clothes. They don't consciously dress to be popular. They dress to look good. But to who To the other kids. Other kids' opinions become their definition of right not just for clothes but for almost everything they do right down to the way they walk. And so every effort they make to do things "right" is also consciously or not an effort to be more popular.Nerds don't realize this. They don't realize that it takes work to be popular. In general people outside some very demanding field don't realize the extent to which success depends on constant (though often unconscious) effort. For example most people seem to consider the ability to draw as some kind of innate quality like being tall. In fact most people who "can draw" like drawing and have spent many hours doing it that's why they're good at it. Likewise popular isn't just something you are or you aren't but something you make yourself.The main reason nerds are unpopular is that they have other things to think about. Their attention is drawn to books or the natural world not fashions and parties. They're like someone trying to play soccer while balancing a glass of water on his head. Other players who can focus their whole attention on the game beat them effortlessly and wonder why they seem so incapable.Even if nerds cared as much as other kids about popularity being popular would be more work for them. The popular kids learned to be popular and to want to be popular the same way the nerds learned to be smart and to want to be smart: from their parents. While the nerds were being trained to get the right answers the popular kids were being trained to please. So far I've been finessing the relationship between smart and nerd using them as if they were interchangeable. In fact it's only the context that makes them so. A nerd is someone who isn't socially adept enough. But "enough" depends on where you are. In a typical American school standards for coolness are so high (or at least so specific) that you don't have to be especially awkward to look awkward by comparison.Few smart kids can spare the attention that popularity requires. Unless they also happen to be good looking natural athletes or siblings of popular kids they'll tend to become nerds. And that's why smart people's lives are worst between say the ages of eleven and seventeen. Life at that age revolves far more around popularity than before or after.Before that kids' lives are dominated by their parents not by other kids. Kids do care what their peers think in elementary school but this isn't their whole life as it later becomes.Around the age of eleven though kids seem to start treating their family as a day job. They create a new world among themselves and standing in this world is what matters not standing in their family. Indeed being in trouble in their family can win them points in the world they care about.The problem is the world these kids create for themselves is at first a very crude one. If you leave a bunch of eleven year olds to their own devices what you get is Lord of the Flies. Like a lot of American kids I read this book in school. Presumably it was not a coincidence. Presumably someone wanted to point out to us that we were savages and that we had made ourselves a cruel and stupid world. This was too subtle for me. While the book seemed entirely believable I didn't get the additional message. I wish they had just told us outright that we were savages and our world was stupid. Nerds would find their unpopularity more bearable if it merely caused them to be ignored. Unfortunately to be unpopular in school is to be actively persecuted.Why Once again anyone currently in school might think this a strange question to ask. How could things be any other way But they could be. Adults don't normally persecute nerds. Why do teenage kids do it Partly because teenagers are still half children and many children are just intrinsically cruel. Some torture nerds for the same reason they pull the legs off spiders. Before you develop a conscience torture is amusing.Another reason kids persecute nerds is to make themselves feel better. When you tread water you lift yourself up by pushing water down. Likewise in any social hierarchy people unsure of their own position will try to emphasize it by maltreating those they think rank below. I've read that this is why poor whites in the United States are the group most hostile to blacks.But I think the main reason other kids persecute nerds is that it's part of the mechanism of popularity. Popularity is only partially about individual attractiveness. It's much more about alliances. To become more popular you need to be constantly doing things that bring you close to other popular people and nothing brings people closer than a common enemy.Like a politician who wants to distract voters from bad times at home you can create an enemy if there isn't a real one. By singling out and persecuting a nerd a group of kids from higher in the hierarchy create bonds between themselves. Attacking an outsider makes them all insiders. This is why the worst cases of bullying happen with groups. Ask any nerd: you get much worse treatment from a group of kids than from any individual bully however sadistic.If it's any consolation to the nerds it's nothing personal. The group of kids who band together to pick on you are doing the same thing and for the same reason as a bunch of guys who get together to go hunting. They don't actually hate you. They just need something to chase.Because they're at the bottom of the scale nerds are a safe target for the entire school. If I remember correctly the most popular kids don't persecute nerds they don't need to stoop to such things. Most of the persecution comes from kids lower down the nervous middle classes.The trouble is there are a lot of them. The distribution of popularity is not a pyramid but tapers at the bottom like a pear. The least popular group is quite small. (I believe we were the only D table in our cafeteria map.) So there are more people who want to pick on nerds than there are nerds.As well as gaining points by distancing oneself from unpopular kids one loses points by being close to them. A woman I know says that in high school she liked nerds but was afraid to be seen talking to them because the other girls would make fun of her. Unpopularity is a communicable disease kids too nice to pick on nerds will still ostracize them in self defense.It's no wonder then that smart kids tend to be unhappy in middle school and high school. Their other interests leave them little attention to spare for popularity and since popularity resembles a zero sum game this in turn makes them targets for the whole school. And the strange thing is this nightmare scenario happens without any conscious malice merely because of the shape of the situation. For me the worst stretch was junior high when kid culture was new and harsh and the specialization that would later gradually separate the smarter kids had barely begun. Nearly everyone I've talked to agrees: the nadir is somewhere between eleven and fourteen.In our school it was eighth grade which was ages twelve and thirteen for me. There was a brief sensation that year when one of our teachers overheard a group of girls waiting for the school bus and was so shocked that the next day she devoted the whole class to an eloquent plea not to be so cruel to one another.It didn't have any noticeable effect. What struck me at the time was that she was surprised. You mean she doesn't know the kind of things they say to one another You mean this isn't normal It's important to realize that no the adults don't know what the kids are doing to one another. They know in the abstract that kids are monstrously cruel to one another just as we know in the abstract that people get tortured in poorer countries. But like us they don't like to dwell on this depressing fact and they don't see evidence of specific abuses unless they go looking for it.Public school teachers are in much the same position as prison wardens. Wardens' main concern is to keep the prisoners on the premises. They also need to keep them fed and as far as possible prevent them from killing one another. Beyond that they want to have as little to do with the prisoners as possible so they leave them to create whatever social organization they want. From what I've read the society that the prisoners create is warped savage and pervasive and it is no fun to be at the bottom of it.In outline it was the same at the schools I went to. The most important thing was to stay on the premises. While there the authorities fed you prevented overt violence and made some effort to teach you something. But beyond that they didn't want to have too much to do with the kids. Like prison wardens the teachers mostly left us to ourselves. And like prisoners the culture we created was barbaric. Why is the real world more hospitable to nerds It might seem that the answer is simply that it's populated by adults who are too mature to pick on one another. But I don't think this is true. Adults in prison certainly pick on one another. And so apparently do society wives in some parts of Manhattan life for women sounds like a continuation of high school with all the same petty intrigues.I think the important thing about the real world is not that it's populated by adults but that it's very large and the things you do have real effects. That's what school prison and ladies who lunch all lack. The inhabitants of all those worlds are trapped in little bubbles where nothing they do can have more than a local effect. Naturally these societies degenerate into savagery. They have no function for their form to follow.When the things you do have real effects it's no longer enough just to be pleasing. It starts to be important to get the right answers and that's where nerds show to advantage. Bill Gates will of course come to mind. Though notoriously lacking in social skills he gets the right answers at least as measured in revenue.The other thing that's different about the real world is that it's much larger. In a large enough pool even the smallest minorities can achieve a critical mass if they clump together. Out in the real world nerds collect in certain places and form their own societies where intelligence is the most important thing. Sometimes the current even starts to flow in the other direction: sometimes particularly in university math and science departments nerds deliberately exaggerate their awkwardness in order to seem smarter. John Nash so admired Norbert Wiener that he adopted his habit of touching the wall as he walked down a corridor. As a thirteen year old kid I didn't have much more experience of the world than what I saw immediately around me. The warped little world we lived in was I thought the world. The world seemed cruel and boring and I'm not sure which was worse.Because I didn't fit into this world I thought that something must be wrong with me. I didn't realize that the reason we nerds didn't fit in was that in some ways we were a step ahead. We were already thinking about the kind of things that matter in the real world instead of spending all our time playing an exacting but mostly pointless game like the others.We were a bit like an adult would be if he were thrust back into middle school. He wouldn't know the right clothes to wear the right music to like the right slang to use. He'd seem to the kids a complete alien. The thing is he'd know enough not to care what they thought. We had no such confidence.A lot of people seem to think it's good for smart kids to be thrown together with "normal" kids at this stage of their lives. Perhaps. But in at least some cases the reason the nerds don't fit in really is that everyone else is crazy. I remember sitting in the audience at a "pep rally" at my high school watching as the cheerleaders threw an effigy of an opposing player into the audience to be torn to pieces. I felt like an explorer witnessing some bizarre tribal ritual. If I could go back and give my thirteen year old self some advice the main thing I'd tell him would be to stick his head up and look around. I didn't really grasp it at the time but the whole world we lived in was as fake as a Twinkie. Not just school but the entire town. Why do people move to suburbia To have kids So no wonder it seemed boring and sterile. The whole place was a giant nursery an artificial town created explicitly for the purpose of breeding children.Where I grew up it felt as if there was nowhere to go and nothing to do. This was no accident. Suburbs are deliberately designed to exclude the outside world because it contains things that could endanger children.And as for the schools they were just holding pens within this fake world. Officially the purpose of schools is to teach kids. In fact their primary purpose is to keep kids locked up in one place for a big chunk of the day so adults can get things done. And I have no problem with this: in a specialized industrial society it would be a disaster to have kids running around loose.What bothers me is not that the kids are kept in prisons but that (a) they aren't told about it and (b) the prisons are run mostly by the inmates. Kids are sent off to spend six years memorizing meaningless facts in a world ruled by a caste of giants who run after an oblong brown ball as if this were the most natural thing in the world. And if they balk at this surreal cocktail they're called misfits. Life in this twisted world is stressful for the kids. And not just for the nerds. Like any war it's damaging even to the winners.Adults can't avoid seeing that teenage kids are tormented. So why don't they do something about it Because they blame it on puberty. The reason kids are so unhappy adults tell themselves is that monstrous new chemicals hormones are now coursing through their bloodstream and messing up everything. There's nothing wrong with the system it's just inevitable that kids will be miserable at that age.This idea is so pervasive that even the kids believe it which probably doesn't help. Someone who thinks his feet naturally hurt is not going to stop to consider the possibility that he is wearing the wrong size shoes.I'm suspicious of this theory that thirteen year old kids are intrinsically messed up. If it's physiological it should be universal. Are Mongol nomads all nihilists at thirteen I've read a lot of history and I have not seen a single reference to this supposedly universal fact before the twentieth century. Teenage apprentices in the Renaissance seem to have been cheerful and eager. They got in fights and played tricks on one another of course (Michelangelo had his nose broken by a bully) but they weren't crazy.As far as I can tell the concept of the hormone crazed teenager is coeval with suburbia. I don't think this is a coincidence. I think teenagers are driven crazy by the life they're made to lead. Teenage apprentices in the Renaissance were working dogs. Teenagers now are neurotic lapdogs. Their craziness is the craziness of the idle everywhere. When I was in school suicide was a constant topic among the smarter kids. No one I knew did it but several planned to and some may have tried. Mostly this was just a pose. Like other teenagers we loved the dramatic and suicide seemed very dramatic. But partly it was because our lives were at times genuinely miserable.Bullying was only part of the problem. Another problem and possibly an even worse one was that we never had anything real to work on. Humans like to work in most of the world your work is your identity. And all the work we did was pointless or seemed so at the time.At best it was practice for real work we might do far in the future so far that we didn't even know at the time what we were practicing for. More often it was just an arbitrary series of hoops to jump through words without content designed mainly for testability. (The three main causes of the Civil War were.... Test: List the three main causes of the Civil War.)And there was no way to opt out. The adults had agreed among themselves that this was to be the route to college. The only way to escape this empty life was to submit to it. Teenage kids used to have a more active role in society. In pre industrial times they were all apprentices of one sort or another whether in shops or on farms or even on warships. They weren't left to create their own societies. They were junior members of adult societies.Teenagers seem to have respected adults more then because the adults were the visible experts in the skills they were trying to learn. Now most kids have little idea what their parents do in their distant offices and see no connection (indeed there is precious little) between schoolwork and the work they'll do as adults.And if teenagers respected adults more adults also had more use for teenagers. After a couple years' training an apprentice could be a real help. Even the newest apprentice could be made to carry messages or sweep the workshop.Now adults have no immediate use for teenagers. They would be in the way in an office. So they drop them off at school on their way to work much as they might drop the dog off at a kennel if they were going away for the weekend.What happened We're up against a hard one here. The cause of this problem is the same as the cause of so many present ills: specialization. As jobs become more specialized we have to train longer for them. Kids in pre industrial times started working at about 14 at the latest kids on farms where most people lived began far earlier. Now kids who go to college don't start working full time till 21 or 22. With some degrees like MDs and PhDs you may not finish your training till 30.Teenagers now are useless except as cheap labor in industries like fast food which evolved to exploit precisely this fact. In almost any other kind of work they'd be a net loss. But they're also too young to be left unsupervised. Someone has to watch over them and the most efficient way to do this is to collect them together in one place. Then a few adults can watch all of them.If you stop there what you're describing is literally a prison albeit a part time one. The problem is many schools practically do stop there. The stated purpose of schools is to educate the kids. But there is no external pressure to do this well. And so most schools do such a bad job of teaching that the kids don't really take it seriously not even the smart kids. Much of the time we were all students and teachers both just going through the motions.In my high school French class we were supposed to read Hugo's Les Miserables. I don't think any of us knew French well enough to make our way through this enormous book. Like the rest of the class I just skimmed the Cliff's Notes. When we were given a test on the book I noticed that the questions sounded odd. They were full of long words that our teacher wouldn't have used. Where had these questions come from From the Cliff's Notes it turned out. The teacher was using them too. We were all just pretending.There are certainly great public school teachers. The energy and imagination of my fourth grade teacher Mr. Mihalko made that year something his students still talk about thirty years later. But teachers like him were individuals swimming upstream. They couldn't fix the system. In almost any group of people you'll find hierarchy. When groups of adults form in the real world it's generally for some common purpose and the leaders end up being those who are best at it. The problem with most schools is they have no purpose. But hierarchy there must be. And so the kids make one out of nothing.We have a phrase to describe what happens when rankings have to be created without any meaningful criteria. We say that the situation degenerates into a popularity contest. And that's exactly what happens in most American schools. Instead of depending on some real test one's rank depends mostly on one's ability to increase one's rank. It's like the court of Louis XIV. There is no external opponent so the kids become one another's opponents.When there is some real external test of skill it isn't painful to be at the bottom of the hierarchy. A rookie on a football team doesn't resent the skill of the veteran he hopes to be like him one day and is happy to have the chance to learn from him. The veteran may in turn feel a sense of noblesse oblige. And most importantly their status depends on how well they do against opponents not on whether they can push the other down.Court hierarchies are another thing entirely. This type of society debases anyone who enters it. There is neither admiration at the bottom nor noblesse oblige at the top. It's kill or be killed.This is the sort of society that gets created in American secondary schools. And it happens because these schools have no real purpose beyond keeping the kids all in one place for a certain number of hours each day. What I didn't realize at the time and in fact didn't realize till very recently is that the twin horrors of school life the cruelty and the boredom both have the same cause. The mediocrity of American public schools has worse consequences than just making kids unhappy for six years. It breeds a rebelliousness that actively drives kids away from the things they're supposed to be learning.Like many nerds probably it was years after high school before I could bring myself to read anything we'd been assigned then. And I lost more than books. I mistrusted words like "character" and "integrity" because they had been so debased by adults. As they were used then these words all seemed to mean the same thing: obedience. The kids who got praised for these qualities tended to be at best dull witted prize bulls and at worst facile schmoozers. If that was what character and integrity were I wanted no part of them.The word I most misunderstood was "tact." As used by adults it seemed to mean keeping your mouth shut. I assumed it was derived from the same root as "tacit" and "taciturn " and that it literally meant being quiet. I vowed that I would never be tactful they were never going to shut me up. In fact it's derived from the same root as "tactile " and what it means is to have a deft touch. Tactful is the opposite of clumsy. I don't think I learned this until college.Nerds aren't the only losers in the popularity rat race. Nerds are unpopular because they're distracted. There are other kids who deliberately opt out because they're so disgusted with the whole process.Teenage kids even rebels don't like to be alone so when kids opt out of the system they tend to do it as a group. At the schools I went to the focus of rebellion was drug use specifically marijuana. The kids in this tribe wore black concert t shirts and were called "freaks."Freaks and nerds were allies and there was a good deal of overlap between them. Freaks were on the whole smarter than other kids though never studying (or at least never appearing to) was an important tribal value. I was more in the nerd camp but I was friends with a lot of freaks.They used drugs at least at first for the social bonds they created. It was something to do together and because the drugs were illegal it was a shared badge of rebellion.I'm not claiming that bad schools are the whole reason kids get into trouble with drugs. After a while drugs have their own momentum. No doubt some of the freaks ultimately used drugs to escape from other problems trouble at home for example. But in my school at least the reason most kids started using drugs was rebellion. Fourteen year olds didn't start smoking pot because they'd heard it would help them forget their problems. They started because they wanted to join a different tribe.Misrule breeds rebellion this is not a new idea. And yet the authorities still for the most part act as if drugs were themselves the cause of the problem. The real problem is the emptiness of school life. We won't see solutions till adults realize that. The adults who may realize it first are the ones who were themselves nerds in school. Do you want your kids to be as unhappy in eighth grade as you were I wouldn't. Well then is there anything we can do to fix things Almost certainly. There is nothing inevitable about the current system. It has come about mostly by default.Adults though are busy. Showing up for school plays is one thing. Taking on the educational bureaucracy is another. Perhaps a few will have the energy to try to change things. I suspect the hardest part is realizing that you can.Nerds still in school should not hold their breath. Maybe one day a heavily armed force of adults will show up in helicopters to rescue you but they probably won't be coming this month. Any immediate improvement in nerds' lives is probably going to have to come from the nerds themselves.Merely understanding the situation they're in should make it less painful. Nerds aren't losers. They're just playing a different game and a game much closer to the one played in the real world. Adults know this. It's hard to find successful adults now who don't claim to have been nerds in high school.It's important for nerds to realize too that school is not life. School is a strange artificial thing half sterile and half feral. It's all encompassing like life but it isn't the real thing. It's only temporary and if you look you can see beyond it even while you're still in it.If life seems awful to kids it's neither because hormones are turning you all into monsters (as your parents believe) nor because life actually is awful (as you believe). It's because the adults who no longer have any economic use for you have abandoned you to spend years cooped up together with nothing real to do. Any society of that type is awful to live in. You don't have to look any further to explain why teenage kids are unhappy.I've said some harsh things in this essay but really the thesis is an optimistic one that several problems we take for granted are in fact not insoluble after all. Teenage kids are not inherently unhappy monsters. That should be encouraging news to kids and adults both. Thanks to Sarah Harlin Trevor Blackwell Robert Morris Eric Raymond and Jackie Weicker for reading drafts of this essay and Maria Daniels for scanning photos.
The fiery reaction to the release of Arc had an unexpected consequence: it made me realize I had a design philosophy. The main complaint of the more articulate critics was that Arc seemed so flimsy. After years of working on it all I had to show for myself were a few thousand lines of macros Why hadn't I worked on more substantial problems As I was mulling over these remarks it struck me how familiar they seemed. This was exactly the kind of thing people said at first about Viaweb and Y Combinator and most of my essays.When we launched Viaweb it seemed laughable to VCs and e commerce "experts." We were just a couple guys in an apartment which did not seem cool in 1995 the way it does now. And the thing we'd built as far as they could tell wasn't even software. Software to them equalled big honking Windows apps. Since Viaweb was the first web based app they'd seen it seemed to be nothing more than a website. They were even more contemptuous when they discovered that Viaweb didn't process credit card transactions (we didn't for the whole first year). Transaction processing seemed to them what e commerce was all about. It sounded serious and difficult.And yet mysteriously Viaweb ended up crushing all its competitors.The initial reaction to Y Combinator was almost identical. It seemed laughably lightweight. Startup funding meant series A rounds: millions of dollars given to a small number of startups founded by people with established credentials after months of serious businesslike meetings on terms described in a document a foot thick. Y Combinator seemed inconsequential. It's too early to say yet whether Y Combinator will turn out like Viaweb but judging from the number of imitations a lot of people seem to think we're on to something.I can't measure whether my essays are successful except in page views but the reaction to them is at least different from when I started. At first the default reaction of the Slashdot trolls was (translated into articulate terms): "Who is this guy and what authority does he have to write about these topics I haven't read the essay but there's no way anything so short and written in such an informal style could have anything useful to say about such and such topic when people with degrees in the subject have already written many thick books about it." Now there's a new generation of trolls on a new generation of sites but they have at least started to omit the initial "Who is this guy "Now people are saying the same things about Arc that they said at first about Viaweb and Y Combinator and most of my essays. Why the pattern The answer I realized is that my m.o. for all four has been the same.Here it is: I like to find (a) simple solutions (b) to overlooked problems (c) that actually need to be solved and (d) deliver them as informally as possible (e) starting with a very crude version 1 then (f) iterating rapidly.When I first laid out these principles explicitly I noticed something striking: this is practically a recipe for generating a contemptuous initial reaction. Though simple solutions are better they don't seem as impressive as complex ones. Overlooked problems are by definition problems that most people think don't matter. Delivering solutions in an informal way means that instead of judging something by the way it's presented people have to actually understand it which is more work. And starting with a crude version 1 means your initial effort is always small and incomplete.I'd noticed of course that people never seemed to grasp new ideas at first. I thought it was just because most people were stupid. Now I see there's more to it than that. Like a contrarian investment fund someone following this strategy will almost always be doing things that seem wrong to the average person.As with contrarian investment strategies that's exactly the point. This technique is successful (in the long term) because it gives you all the advantages other people forgo by trying to seem legit. If you work on overlooked problems you're more likely to discover new things because you have less competition. If you deliver solutions informally you (a) save all the effort you would have had to expend to make them look impressive and (b) avoid the danger of fooling yourself as well as your audience. And if you release a crude version 1 then iterate your solution can benefit from the imagination of nature which as Feynman pointed out is more powerful than your own.In the case of Viaweb the simple solution was to make the software run on the server. The overlooked problem was to generate web sites automatically in 1995 online stores were all made by hand by human designers but we knew this wouldn't scale. The part that actually mattered was graphic design not transaction processing. The informal delivery mechanism was me showing up in jeans and a t shirt at some retailer's office. And the crude version 1 was if I remember correctly less than 10 000 lines of code when we launched.The power of this technique extends beyond startups and programming languages and essays. It probably extends to any kind of creative work. Certainly it can be used in painting: this is exactly what Cezanne and Klee did.At Y Combinator we bet money on it in the sense that we encourage the startups we fund to work this way. There are always new ideas right under your nose. So look for simple things that other people have overlooked mdash things people will later claim were "obvious" mdash especially when they've been led astray by obsolete conventions or by trying to do things that are superficially impressive. Figure out what the real problem is and make sure you solve that. Don't worry about trying to look corporate the product is what wins in the long term. And launch as soon as you can so you start learning from users what you should have been making.Reddit is a classic example of this approach. When Reddit first launched it seemed like there was nothing to it. To the graphically unsophisticated its deliberately minimal design seemed like no design at all. But Reddit solved the real problem which was to tell people what was new and otherwise stay out of the way. As a result it became massively successful. Now that conventional ideas have caught up with it it seems obvious. People look at Reddit and think the founders were lucky. Like all such things it was harder than it looked. The Reddits pushed so hard against the current that they reversed it now it looks like they're merely floating downstream.So when you look at something like Reddit and think "I wish I could think of an idea like that " remember: ideas like that are all around you. But you ignore them because they look wrong.
 There is a kind of mania for object oriented programming at the moment but some of the smartest programmers I know are some of the least excited about it.My own feeling is that object oriented programming is a useful technique in some cases but it isn't something that has to pervade every program you write. You should be able to define new types but you shouldn't have to express every program as the definition of new types.I think there are five reasons people like object oriented programming and three and a half of them are bad: Object oriented programming is exciting if you have a statically typed language without lexical closures or macros. To some degree it offers a way around these limitations. (See Greenspun's Tenth Rule.) Object oriented programming is popular in big companies because it suits the way they write software. At big companies software tends to be written by large (and frequently changing) teams of mediocre programmers. Object oriented programming imposes a discipline on these programmers that prevents any one of them from doing too much damage. The price is that the resulting code is bloated with protocols and full of duplication. This is not too high a price for big companies because their software is probably going to be bloated and full of duplication anyway. Object oriented programming generates a lot of what looks like work. Back in the days of fanfold there was a type of programmer who would only put five or ten lines of code on a page preceded by twenty lines of elaborately formatted comments. Object oriented programming is like crack for these people: it lets you incorporate all this scaffolding right into your source code. Something that a Lisp hacker might handle by pushing a symbol onto a list becomes a whole file of classes and methods. So it is a good tool if you want to convince yourself or someone else that you are doing a lot of work. If a language is itself an object oriented program it can be extended by users. Well maybe. Or maybe you can do even better by offering the sub concepts of object oriented programming a la carte. Overloading for example is not intrinsically tied to classes. We'll see. Object oriented abstractions map neatly onto the domains of certain specific kinds of programs like simulations and CAD systems. I personally have never needed object oriented abstractions. Common Lisp has an enormously powerful object system and I've never used it once. I've done a lot of things (e.g. making hash tables full of closures) that would have required object oriented techniques to do in wimpier languages but I have never had to use CLOS.Maybe I'm just stupid or have worked on some limited subset of applications. There is a danger in designing a language based on one's own experience of programming. But it seems more dangerous to put stuff in that you've never needed because it's thought to be a good idea.
I bet you the current issue of Cosmopolitan has an article whose title begins with a number. "7 Things He Won't Tell You about Sex " or something like that. Some popular magazines feature articles of this type on the cover of every issue. That can't be happening by accident. Editors must know they attract readers.Why do readers like the list of n things so much Mainly because it's easier to read than a regular article. 1 Structurally the list of n things is a degenerate case of essay. An essay can go anywhere the writer wants. In a list of n things the writer agrees to constrain himself to a collection of points of roughly equal importance and he tells the reader explicitly what they are.Some of the work of reading an article is understanding its structure mdash figuring out what in high school we'd have called its "outline." Not explicitly of course but someone who really understands an article probably has something in his brain afterward that corresponds to such an outline. In a list of n things this work is done for you. Its structure is an exoskeleton.As well as being explicit the structure is guaranteed to be of the simplest possible type: a few main points with few to no subordinate ones and no particular connection between them.Because the main points are unconnected the list of n things is random access. There's no thread of reasoning you have to follow. You could read the list in any order. And because the points are independent of one another they work like watertight compartments in an unsinkable ship. If you get bored with or can't understand or don't agree with one point you don't have to give up on the article. You can just abandon that one and skip to the next. A list of n things is parallel and therefore fault tolerant.There are times when this format is what a writer wants. One obviously is when what you have to say actually is a list of n things. I once wrote an essay about the mistakes that kill startups and a few people made fun of me for writing something whose title began with a number. But in that case I really was trying to make a complete catalog of a number of independent things. In fact one of the questions I was trying to answer was how many there were.There are other less legitimate reasons for using this format. For example I use it when I get close to a deadline. If I have to give a talk and I haven't started it a few days beforehand I'll sometimes play it safe and make the talk a list of n things.The list of n things is easier for writers as well as readers. When you're writing a real essay there's always a chance you'll hit a dead end. A real essay is a train of thought and some trains of thought just peter out. That's an alarming possibility when you have to give a talk in a few days. What if you run out of ideas The compartmentalized structure of the list of n things protects the writer from his own stupidity in much the same way it protects the reader. If you run out of ideas on one point no problem: it won't kill the essay. You can take out the whole point if you need to and the essay will still survive.Writing a list of n things is so relaxing. You think of n 2 of them in the first 5 minutes. So bang there's the structure and you just have to fill it in. As you think of more points you just add them to the end. Maybe you take out or rearrange or combine a few but at every stage you have a valid (though initially low res) list of n things. It's like the sort of programming where you write a version 1 very quickly and then gradually modify it but at every point have working code mdash or the style of painting where you begin with a complete but very blurry sketch done in an hour then spend a week cranking up the resolution.Because the list of n things is easier for writers too it's not always a damning sign when readers prefer it. It's not necessarily evidence readers are lazy it could also mean they don't have much confidence in the writer. The list of n things is in that respect the cheeseburger of essay forms. If you're eating at a restaurant you suspect is bad your best bet is to order the cheeseburger. Even a bad cook can make a decent cheeseburger. And there are pretty strict conventions about what a cheeseburger should look like. You can assume the cook isn't going to try something weird and artistic. The list of n things similarly limits the damage that can be done by a bad writer. You know it's going to be about whatever the title says and the format prevents the writer from indulging in any flights of fancy.Because the list of n things is the easiest essay form it should be a good one for beginning writers. And in fact it is what most beginning writers are taught. The classic 5 paragraph essay is really a list of n things for n 3. But the students writing them don't realize they're using the same structure as the articles they read in Cosmopolitan. They're not allowed to include the numbers and they're expected to spackle over the gaps with gratuitous transitions ("Furthermore...") and cap the thing at either end with introductory and concluding paragraphs so it will look superficially like a real essay. 2 It seems a fine plan to start students off with the list of n things. It's the easiest form. But if we're going to do that why not do it openly Let them write lists of n things like the pros with numbers and no transitions or "conclusion."There is one case where the list of n things is a dishonest format: when you use it to attract attention by falsely claiming the list is an exhaustive one. I.e. if you write an article that purports to be about the 7 secrets of success. That kind of title is the same sort of reflexive challenge as a whodunit. You have to at least look at the article to check whether they're the same 7 you'd list. Are you overlooking one of the secrets of success Better check.It's fine to put "The" before the number if you really believe you've made an exhaustive list. But evidence suggests most things with titles like this are linkbait.The greatest weakness of the list of n things is that there's so little room for new thought. The main point of essay writing when done right is the new ideas you have while doing it. A real essay as the name implies is dynamic: you don't know what you're going to write when you start. It will be about whatever you discover in the course of writing it.This can only happen in a very limited way in a list of n things. You make the title first and that's what it's going to be about. You can't have more new ideas in the writing than will fit in the watertight compartments you set up initially. And your brain seems to know this: because you don't have room for new ideas you don't have them.Another advantage of admitting to beginning writers that the 5 paragraph essay is really a list of n things is that we can warn them about this. It only lets you experience the defining characteristic of essay writing on a small scale: in thoughts of a sentence or two. And it's particularly dangerous that the 5 paragraph essay buries the list of n things within something that looks like a more sophisticated type of essay. If you don't know you're using this form you don't know you need to escape it.Notes 1 Articles of this type are also startlingly popular on Delicious but I think that's because delicious popular is driven by bookmarking not because Delicious users are stupid. Delicious users are collectors and a list of n things seems particularly collectible because it's a collection itself. 2 Most "word problems" in school math textbooks are similarly misleading. They look superficially like the application of math to real problems but they're not. So if anything they reinforce the impression that math is merely a complicated but pointless collection of stuff to be memorized.
(This essay is derived from a talk at Oscon 2005.)Lately companies have been paying more attention to open source. Ten years ago there seemed a real danger Microsoft would extend its monopoly to servers. It seems safe to say now that open source has prevented that. A recent survey found 52 of companies are replacing Windows servers with Linux servers. 1 More significant I think is which 52 they are. At this point anyone proposing to run Windows on servers should be prepared to explain what they know about servers that Google Yahoo and Amazon don't.But the biggest thing business has to learn from open source is not about Linux or Firefox but about the forces that produced them. Ultimately these will affect a lot more than what software you use.We may be able to get a fix on these underlying forces by triangulating from open source and blogging. As you've probably noticed they have a lot in common.Like open source blogging is something people do themselves for free because they enjoy it. Like open source hackers bloggers compete with people working for money and often win. The method of ensuring quality is also the same: Darwinian. Companies ensure quality through rules to prevent employees from screwing up. But you don't need that when the audience can communicate with one another. People just produce whatever they want the good stuff spreads and the bad gets ignored. And in both cases feedback from the audience improves the best work.Another thing blogging and open source have in common is the Web. People have always been willing to do great work for free but before the Web it was harder to reach an audience or collaborate on projects.AmateursI think the most important of the new principles business has to learn is that people work a lot harder on stuff they like. Well that's news to no one. So how can I claim business has to learn it When I say business doesn't know this I mean the structure of business doesn't reflect it.Business still reflects an older model exemplified by the French word for working: travailler. It has an English cousin travail and what it means is torture. 2 This turns out not to be the last word on work however. As societies get richer they learn something about work that's a lot like what they learn about diet. We know now that the healthiest diet is the one our peasant ancestors were forced to eat because they were poor. Like rich food idleness only seems desirable when you don't get enough of it. I think we were designed to work just as we were designed to eat a certain amount of fiber and we feel bad if we don't.There's a name for people who work for the love of it: amateurs. The word now has such bad connotations that we forget its etymology though it's staring us in the face. "Amateur" was originally rather a complimentary word. But the thing to be in the twentieth century was professional which amateurs by definition are not.That's why the business world was so surprised by one lesson from open source: that people working for love often surpass those working for money. Users don't switch from Explorer to Firefox because they want to hack the source. They switch because it's a better browser.It's not that Microsoft isn't trying. They know controlling the browser is one of the keys to retaining their monopoly. The problem is the same they face in operating systems: they can't pay people enough to build something better than a group of inspired hackers will build for free.I suspect professionalism was always overrated not just in the literal sense of working for money but also connotations like formality and detachment. Inconceivable as it would have seemed in say 1970 I think professionalism was largely a fashion driven by conditions that happened to exist in the twentieth century.One of the most powerful of those was the existence of "channels." Revealingly the same term was used for both products and information: there were distribution channels and TV and radio channels.It was the narrowness of such channels that made professionals seem so superior to amateurs. There were only a few jobs as professional journalists for example so competition ensured the average journalist was fairly good. Whereas anyone can express opinions about current events in a bar. And so the average person expressing his opinions in a bar sounds like an idiot compared to a journalist writing about the subject.On the Web the barrier for publishing your ideas is even lower. You don't have to buy a drink and they even let kids in. Millions of people are publishing online and the average level of what they're writing as you might expect is not very good. This has led some in the media to conclude that blogs don't present much of a threat that blogs are just a fad.Actually the fad is the word "blog " at least the way the print media now use it. What they mean by "blogger" is not someone who publishes in a weblog format but anyone who publishes online. That's going to become a problem as the Web becomes the default medium for publication. So I'd like to suggest an alternative word for someone who publishes online. How about "writer "Those in the print media who dismiss the writing online because of its low average quality are missing an important point: no one reads the average blog. In the old world of channels it meant something to talk about average quality because that's what you were getting whether you liked it or not. But now you can read any writer you want. So the average quality of writing online isn't what the print media are competing against. They're competing against the best writing online. And like Microsoft they're losing.I know that from my own experience as a reader. Though most print publications are online I probably read two or three articles on individual people's sites for every one I read on the site of a newspaper or magazine.And when I read say New York Times stories I never reach them through the Times front page. Most I find through aggregators like Google News or Slashdot or Delicious. Aggregators show how much better you can do than the channel. The New York Times front page is a list of articles written by people who work for the New York Times. Delicious is a list of articles that are interesting. And it's only now that you can see the two side by side that you notice how little overlap there is.Most articles in the print media are boring. For example the president notices that a majority of voters now think invading Iraq was a mistake so he makes an address to the nation to drum up support. Where is the man bites dog in that I didn't hear the speech but I could probably tell you exactly what he said. A speech like that is in the most literal sense not news: there is nothing new in it. 3 Nor is there anything new except the names and places in most "news" about things going wrong. A child is abducted there's a tornado a ferry sinks someone gets bitten by a shark a small plane crashes. And what do you learn about the world from these stories Absolutely nothing. They're outlying data points what makes them gripping also makes them irrelevant.As in software when professionals produce such crap it's not surprising if amateurs can do better. Live by the channel die by the channel: if you depend on an oligopoly you sink into bad habits that are hard to overcome when you suddenly get competition. 4 WorkplacesAnother thing blogs and open source software have in common is that they're often made by people working at home. That may not seem surprising. But it should be. It's the architectural equivalent of a home made aircraft shooting down an F 18. Companies spend millions to build office buildings for a single purpose: to be a place to work. And yet people working in their own homes which aren't even designed to be workplaces end up being more productive.This proves something a lot of us have suspected. The average office is a miserable place to get work done. And a lot of what makes offices bad are the very qualities we associate with professionalism. The sterility of offices is supposed to suggest efficiency. But suggesting efficiency is a different thing from actually being efficient.The atmosphere of the average workplace is to productivity what flames painted on the side of a car are to speed. And it's not just the way offices look that's bleak. The way people act is just as bad.Things are different in a startup. Often as not a startup begins in an apartment. Instead of matching beige cubicles they have an assortment of furniture they bought used. They work odd hours wearing the most casual of clothing. They look at whatever they want online without worrying whether it's "work safe." The cheery bland language of the office is replaced by wicked humor. And you know what The company at this stage is probably the most productive it's ever going to be.Maybe it's not a coincidence. Maybe some aspects of professionalism are actually a net lose.To me the most demoralizing aspect of the traditional office is that you're supposed to be there at certain times. There are usually a few people in a company who really have to but the reason most employees work fixed hours is that the company can't measure their productivity.The basic idea behind office hours is that if you can't make people work you can at least prevent them from having fun. If employees have to be in the building a certain number of hours a day and are forbidden to do non work things while there then they must be working. In theory. In practice they spend a lot of their time in a no man's land where they're neither working nor having fun.If you could measure how much work people did many companies wouldn't need any fixed workday. You could just say: this is what you have to do. Do it whenever you like wherever you like. If your work requires you to talk to other people in the company then you may need to be here a certain amount. Otherwise we don't care.That may seem utopian but it's what we told people who came to work for our company. There were no fixed office hours. I never showed up before 11 in the morning. But we weren't saying this to be benevolent. We were saying: if you work here we expect you to get a lot done. Don't try to fool us just by being here a lot.The problem with the facetime model is not just that it's demoralizing but that the people pretending to work interrupt the ones actually working. I'm convinced the facetime model is the main reason large organizations have so many meetings. Per capita large organizations accomplish very little. And yet all those people have to be on site at least eight hours a day. When so much time goes in one end and so little achievement comes out the other something has to give. And meetings are the main mechanism for taking up the slack.For one year I worked at a regular nine to five job and I remember well the strange cozy feeling that comes over one during meetings. I was very aware because of the novelty that I was being paid for programming. It seemed just amazing as if there was a machine on my desk that spat out a dollar bill every two minutes no matter what I did. Even while I was in the bathroom But because the imaginary machine was always running I felt I always ought to be working. And so meetings felt wonderfully relaxing. They counted as work just like programming but they were so much easier. All you had to do was sit and look attentive.Meetings are like an opiate with a network effect. So is email on a smaller scale. And in addition to the direct cost in time there's the cost in fragmentation breaking people's day up into bits too small to be useful.You can see how dependent you've become on something by removing it suddenly. So for big companies I propose the following experiment. Set aside one day where meetings are forbidden where everyone has to sit at their desk all day and work without interruption on things they can do without talking to anyone else. Some amount of communication is necessary in most jobs but I'm sure many employees could find eight hours worth of stuff they could do by themselves. You could call it "Work Day."The other problem with pretend work is that it often looks better than real work. When I'm writing or hacking I spend as much time just thinking as I do actually typing. Half the time I'm sitting drinking a cup of tea or walking around the neighborhood. This is a critical phase this is where ideas come from and yet I'd feel guilty doing this in most offices with everyone else looking busy.It's hard to see how bad some practice is till you have something to compare it to. And that's one reason open source and even blogging in some cases are so important. They show us what real work looks like.We're funding eight new startups at the moment. A friend asked what they were doing for office space and seemed surprised when I said we expected them to work out of whatever apartments they found to live in. But we didn't propose that to save money. We did it because we want their software to be good. Working in crappy informal spaces is one of the things startups do right without realizing it. As soon as you get into an office work and life start to drift apart.That is one of the key tenets of professionalism. Work and life are supposed to be separate. But that part I'm convinced is a mistake.Bottom UpThe third big lesson we can learn from open source and blogging is that ideas can bubble up from the bottom instead of flowing down from the top. Open source and blogging both work bottom up: people make what they want and the best stuff prevails.Does this sound familiar It's the principle of a market economy. Ironically though open source and blogs are done for free those worlds resemble market economies while most companies for all their talk about the value of free markets are run internally like communist states.There are two forces that together steer design: ideas about what to do next and the enforcement of quality. In the channel era both flowed down from the top. For example newspaper editors assigned stories to reporters then edited what they wrote.Open source and blogging show us things don't have to work that way. Ideas and even the enforcement of quality can flow bottom up. And in both cases the results are not merely acceptable but better. For example open source software is more reliable precisely because it's open source anyone can find mistakes.The same happens with writing. As we got close to publication I found I was very worried about the essays in Hackers Painters that hadn't been online. Once an essay has had a couple thousand page views I feel reasonably confident about it. But these had had literally orders of magnitude less scrutiny. It felt like releasing software without testing it.That's what all publishing used to be like. If you got ten people to read a manuscript you were lucky. But I'd become so used to publishing online that the old method now seemed alarmingly unreliable like navigating by dead reckoning once you'd gotten used to a GPS.The other thing I like about publishing online is that you can write what you want and publish when you want. Earlier this year I wrote something that seemed suitable for a magazine so I sent it to an editor I know. As I was waiting to hear back I found to my surprise that I was hoping they'd reject it. Then I could put it online right away. If they accepted it it wouldn't be read by anyone for months and in the meantime I'd have to fight word by word to save it from being mangled by some twenty five year old copy editor. 5 Many employees would like to build great things for the companies they work for but more often than not management won't let them. How many of us have heard stories of employees going to management and saying please let us build this thing to make money for you and the company saying no The most famous example is probably Steve Wozniak who originally wanted to build microcomputers for his then employer HP. And they turned him down. On the blunderometer this episode ranks with IBM accepting a non exclusive license for DOS. But I think this happens all the time. We just don't hear about it usually because to prove yourself right you have to quit and start your own company like Wozniak did.StartupsSo these I think are the three big lessons open source and blogging have to teach business: (1) that people work harder on stuff they like (2) that the standard office environment is very unproductive and (3) that bottom up often works better than top down.I can imagine managers at this point saying: what is this guy talking about What good does it do me to know that my programmers would be more productive working at home on their own projects I need their asses in here working on version 3.2 of our software or we're never going to make the release date.And it's true the benefit that specific manager could derive from the forces I've described is near zero. When I say business can learn from open source I don't mean any specific business can. I mean business can learn about new conditions the same way a gene pool does. I'm not claiming companies can get smarter just that dumb ones will die.So what will business look like when it has assimilated the lessons of open source and blogging I think the big obstacle preventing us from seeing the future of business is the assumption that people working for you have to be employees. But think about what's going on underneath: the company has some money and they pay it to the employee in the hope that he'll make something worth more than they paid him. Well there are other ways to arrange that relationship. Instead of paying the guy money as a salary why not give it to him as investment Then instead of coming to your office to work on your projects he can work wherever he wants on projects of his own.Because few of us know any alternative we have no idea how much better we could do than the traditional employer employee relationship. Such customs evolve with glacial slowness. Our employer employee relationship still retains a big chunk of master servant DNA. 6 I dislike being on either end of it. I'll work my ass off for a customer but I resent being told what to do by a boss. And being a boss is also horribly frustrating half the time it's easier just to do stuff yourself than to get someone else to do it for you. I'd rather do almost anything than give or receive a performance review.On top of its unpromising origins employment has accumulated a lot of cruft over the years. The list of what you can't ask in job interviews is now so long that for convenience I assume it's infinite. Within the office you now have to walk on eggshells lest anyone say or do something that makes the company prey to a lawsuit. And God help you if you fire anyone.Nothing shows more clearly that employment is not an ordinary economic relationship than companies being sued for firing people. In any purely economic relationship you're free to do what you want. If you want to stop buying steel pipe from one supplier and start buying it from another you don't have to explain why. No one can accuse you of unjustly switching pipe suppliers. Justice implies some kind of paternal obligation that isn't there in transactions between equals.Most of the legal restrictions on employers are intended to protect employees. But you can't have action without an equal and opposite reaction. You can't expect employers to have some kind of paternal responsibility toward employees without putting employees in the position of children. And that seems a bad road to go down.Next time you're in a moderately large city drop by the main post office and watch the body language of the people working there. They have the same sullen resentment as children made to do something they don't want to. Their union has exacted pay increases and work restrictions that would have been the envy of previous generations of postal workers and yet they don't seem any happier for it. It's demoralizing to be on the receiving end of a paternalistic relationship no matter how cozy the terms. Just ask any teenager.I see the disadvantages of the employer employee relationship because I've been on both sides of a better one: the investor founder relationship. I wouldn't claim it's painless. When I was running a startup the thought of our investors used to keep me up at night. And now that I'm an investor the thought of our startups keeps me up at night. All the pain of whatever problem you're trying to solve is still there. But the pain hurts less when it isn't mixed with resentment.I had the misfortune to participate in what amounted to a controlled experiment to prove that. After Yahoo bought our startup I went to work for them. I was doing exactly the same work except with bosses. And to my horror I started acting like a child. The situation pushed buttons I'd forgotten I had.The big advantage of investment over employment as the examples of open source and blogging suggest is that people working on projects of their own are enormously more productive. And a startup is a project of one's own in two senses both of them important: it's creatively one's own and also economically ones's own.Google is a rare example of a big company in tune with the forces I've described. They've tried hard to make their offices less sterile than the usual cube farm. They give employees who do great work large grants of stock to simulate the rewards of a startup. They even let hackers spend 20 of their time on their own projects.Why not let people spend 100 of their time on their own projects and instead of trying to approximate the value of what they create give them the actual market value Impossible That is in fact what venture capitalists do.So am I claiming that no one is going to be an employee anymore that everyone should go and start a startup Of course not. But more people could do it than do it now. At the moment even the smartest students leave school thinking they have to get a job. Actually what they need to do is make something valuable. A job is one way to do that but the more ambitious ones will ordinarily be better off taking money from an investor than an employer.Hackers tend to think business is for MBAs. But business administration is not what you're doing in a startup. What you're doing is business creation. And the first phase of that is mostly product creation that is hacking. That's the hard part. It's a lot harder to create something people love than to take something people love and figure out how to make money from it.Another thing that keeps people away from starting startups is the risk. Someone with kids and a mortgage should think twice before doing it. But most young hackers have neither.And as the example of open source and blogging suggests you'll enjoy it more even if you fail. You'll be working on your own thing instead of going to some office and doing what you're told. There may be more pain in your own company but it won't hurt as much.That may be the greatest effect in the long run of the forces underlying open source and blogging: finally ditching the old paternalistic employer employee relationship and replacing it with a purely economic one between equals. Notes 1 Survey by Forrester Research reported in the cover story of Business Week 31 Jan 2005. Apparently someone believed you have to replace the actual server in order to switch the operating system. 2 It derives from the late Latin tripalium a torture device so called because it consisted of three stakes. I don't know how the stakes were used. "Travel" has the same root. 3 It would be much bigger news in that sense if the president faced unscripted questions by giving a press conference. 4 One measure of the incompetence of newspapers is that so many still make you register to read stories. I have yet to find a blog that tried that. 5 They accepted the article but I took so long to send them the final version that by the time I did the section of the magazine they'd accepted it for had disappeared in a reorganization. 6 The word "boss" is derived from the Dutch baas meaning "master."Thanks to Sarah Harlin Jessica Livingston and Robert Morris for reading drafts of this.
I realized recently that we may be able to solve part of the patent problem without waiting for the government.I've never been 100 sure whether patents help or hinder technological progress. When I was a kid I thought they helped. I thought they protected inventors from having their ideas stolen by big companies. Maybe that was truer in the past when more things were physical. But regardless of whether patents are in general a good thing there do seem to be bad ways of using them. And since bad uses of patents seem to be increasing there is an increasing call for patent reform.The problem with patent reform is that it has to go through the government. That tends to be slow. But recently I realized we can also attack the problem downstream. As well as pinching off the stream of patents at the point where they're issued we may in some cases be able to pinch it off at the point where they're used.One way of using patents that clearly does not encourage innovation is when established companies with bad products use patents to suppress small competitors with good products. This is the type of abuse we may be able to decrease without having to go through the government.The way to do it is to get the companies that are above pulling this sort of trick to pledge publicly not to. Then the ones that won't make such a pledge will be very conspicuous. Potential employees won't want to work for them. And investors too will be able to see that they're the sort of company that competes by litigation rather than by making good products.Here's the pledge: No first use of software patents against companies with less than 25 people. I've deliberately traded precision for brevity. The patent pledge is not legally binding. It's like Google's "Don't be evil." They don't define what evil is but by publicly saying that they're saying they're willing to be held to a standard that say Altria is not. And though constraining "Don't be evil" has been good for Google. Technology companies win by attracting the most productive people and the most productive people are attracted to employers who hold themselves to a higher standard than the law requires. 1 The patent pledge is in effect a narrower but open source "Don't be evil." I encourage every technology company to adopt it. If you want to help fix patents encourage your employer to.Already most technology companies wouldn't sink to using patents on startups. You don't see Google or Facebook suing startups for patent infringement. They don't need to. So for the better technology companies the patent pledge requires no change in behavior. They're just promising to do what they'd do anyway. And when all the companies that won't use patents on startups have said so the holdouts will be very conspicuous.The patent pledge doesn't fix every problem with patents. It won't stop patent trolls for example they're already pariahs. But the problem the patent pledge does fix may be more serious than the problem of patent trolls. Patent trolls are just parasites. A clumsy parasite may occasionally kill the host but that's not its goal. Whereas companies that sue startups for patent infringement generally do it with explicit goal of keeping their product off the market.Companies that use patents on startups are attacking innovation at the root. Now there's something any individual can do about this problem without waiting for the government: ask companies where they stand. Patent Pledge Site Notes: 1 Because the pledge is deliberately vague we're going to need common sense when intepreting it. And even more vice versa: the pledge is vague in order to make people use common sense when interpreting it.So for example I've deliberately avoided saying whether the 25 people have to be employees or whether contractors count too. If a company has to split hairs that fine about whether a suit would violate the patent pledge it's probably still a dick move.
In high school I decided I was going to study philosophy in college. I had several motives some more honorable than others. One of the less honorable was to shock people. College was regarded as job training where I grew up so studying philosophy seemed an impressively impractical thing to do. Sort of like slashing holes in your clothes or putting a safety pin through your ear which were other forms of impressive impracticality then just coming into fashion.But I had some more honest motives as well. I thought studying philosophy would be a shortcut straight to wisdom. All the people majoring in other things would just end up with a bunch of domain knowledge. I would be learning what was really what.I'd tried to read a few philosophy books. Not recent ones you wouldn't find those in our high school library. But I tried to read Plato and Aristotle. I doubt I believed I understood them but they sounded like they were talking about something important. I assumed I'd learn what in college.The summer before senior year I took some college classes. I learned a lot in the calculus class but I didn't learn much in Philosophy 101. And yet my plan to study philosophy remained intact. It was my fault I hadn't learned anything. I hadn't read the books we were assigned carefully enough. I'd give Berkeley's Principles of Human Knowledge another shot in college. Anything so admired and so difficult to read must have something in it if one could only figure out what.Twenty six years later I still don't understand Berkeley. I have a nice edition of his collected works. Will I ever read it Seems unlikely.The difference between then and now is that now I understand why Berkeley is probably not worth trying to understand. I think I see now what went wrong with philosophy and how we might fix it.WordsI did end up being a philosophy major for most of college. It didn't work out as I'd hoped. I didn't learn any magical truths compared to which everything else was mere domain knowledge. But I do at least know now why I didn't. Philosophy doesn't really have a subject matter in the way math or history or most other university subjects do. There is no core of knowledge one must master. The closest you come to that is a knowledge of what various individual philosophers have said about different topics over the years. Few were sufficiently correct that people have forgotten who discovered what they discovered.Formal logic has some subject matter. I took several classes in logic. I don't know if I learned anything from them. 1 It does seem to me very important to be able to flip ideas around in one's head: to see when two ideas don't fully cover the space of possibilities or when one idea is the same as another but with a couple things changed. But did studying logic teach me the importance of thinking this way or make me any better at it I don't know.There are things I know I learned from studying philosophy. The most dramatic I learned immediately in the first semester of freshman year in a class taught by Sydney Shoemaker. I learned that I don't exist. I am (and you are) a collection of cells that lurches around driven by various forces and calls itself I. But there's no central indivisible thing that your identity goes with. You could conceivably lose half your brain and live. Which means your brain could conceivably be split into two halves and each transplanted into different bodies. Imagine waking up after such an operation. You have to imagine being two people.The real lesson here is that the concepts we use in everyday life are fuzzy and break down if pushed too hard. Even a concept as dear to us as I. It took me a while to grasp this but when I did it was fairly sudden like someone in the nineteenth century grasping evolution and realizing the story of creation they'd been told as a child was all wrong. 2 Outside of math there's a limit to how far you can push words in fact it would not be a bad definition of math to call it the study of terms that have precise meanings. Everyday words are inherently imprecise. They work well enough in everyday life that you don't notice. Words seem to work just as Newtonian physics seems to. But you can always make them break if you push them far enough.I would say that this has been unfortunately for philosophy the central fact of philosophy. Most philosophical debates are not merely afflicted by but driven by confusions over words. Do we have free will Depends what you mean by "free." Do abstract ideas exist Depends what you mean by "exist."Wittgenstein is popularly credited with the idea that most philosophical controversies are due to confusions over language. I'm not sure how much credit to give him. I suspect a lot of people realized this but reacted simply by not studying philosophy rather than becoming philosophy professors.How did things get this way Can something people have spent thousands of years studying really be a waste of time Those are interesting questions. In fact some of the most interesting questions you can ask about philosophy. The most valuable way to approach the current philosophical tradition may be neither to get lost in pointless speculations like Berkeley nor to shut them down like Wittgenstein but to study it as an example of reason gone wrong.HistoryWestern philosophy really begins with Socrates Plato and Aristotle. What we know of their predecessors comes from fragments and references in later works their doctrines could be described as speculative cosmology that occasionally strays into analysis. Presumably they were driven by whatever makes people in every other society invent cosmologies. 3 With Socrates Plato and particularly Aristotle this tradition turned a corner. There started to be a lot more analysis. I suspect Plato and Aristotle were encouraged in this by progress in math. Mathematicians had by then shown that you could figure things out in a much more conclusive way than by making up fine sounding stories about them. 4 People talk so much about abstractions now that we don't realize what a leap it must have been when they first started to. It was presumably many thousands of years between when people first started describing things as hot or cold and when someone asked "what is heat " No doubt it was a very gradual process. We don't know if Plato or Aristotle were the first to ask any of the questions they did. But their works are the oldest we have that do this on a large scale and there is a freshness (not to say naivete) about them that suggests some of the questions they asked were new to them at least.Aristotle in particular reminds me of the phenomenon that happens when people discover something new and are so excited by it that they race through a huge percentage of the newly discovered territory in one lifetime. If so that's evidence of how new this kind of thinking was. 5 This is all to explain how Plato and Aristotle can be very impressive and yet naive and mistaken. It was impressive even to ask the questions they did. That doesn't mean they always came up with good answers. It's not considered insulting to say that ancient Greek mathematicians were naive in some respects or at least lacked some concepts that would have made their lives easier. So I hope people will not be too offended if I propose that ancient philosophers were similarly naive. In particular they don't seem to have fully grasped what I earlier called the central fact of philosophy: that words break if you push them too far."Much to the surprise of the builders of the first digital computers " Rod Brooks wrote "programs written for them usually did not work." 6 Something similar happened when people first started trying to talk about abstractions. Much to their surprise they didn't arrive at answers they agreed upon. In fact they rarely seemed to arrive at answers at all.They were in effect arguing about artifacts induced by sampling at too low a resolution.The proof of how useless some of their answers turned out to be is how little effect they have. No one after reading Aristotle's Metaphysics does anything differently as a result. 7 Surely I'm not claiming that ideas have to have practical applications to be interesting No they may not have to. Hardy's boast that number theory had no use whatsoever wouldn't disqualify it. But he turned out to be mistaken. In fact it's suspiciously hard to find a field of math that truly has no practical use. And Aristotle's explanation of the ultimate goal of philosophy in Book A of the Metaphysics implies that philosophy should be useful too.Theoretical KnowledgeAristotle's goal was to find the most general of general principles. The examples he gives are convincing: an ordinary worker builds things a certain way out of habit a master craftsman can do more because he grasps the underlying principles. The trend is clear: the more general the knowledge the more admirable it is. But then he makes a mistake mdash possibly the most important mistake in the history of philosophy. He has noticed that theoretical knowledge is often acquired for its own sake out of curiosity rather than for any practical need. So he proposes there are two kinds of theoretical knowledge: some that's useful in practical matters and some that isn't. Since people interested in the latter are interested in it for its own sake it must be more noble. So he sets as his goal in the Metaphysics the exploration of knowledge that has no practical use. Which means no alarms go off when he takes on grand but vaguely understood questions and ends up getting lost in a sea of words.His mistake was to confuse motive and result. Certainly people who want a deep understanding of something are often driven by curiosity rather than any practical need. But that doesn't mean what they end up learning is useless. It's very valuable in practice to have a deep understanding of what you're doing even if you're never called on to solve advanced problems you can see shortcuts in the solution of simple ones and your knowledge won't break down in edge cases as it would if you were relying on formulas you didn't understand. Knowledge is power. That's what makes theoretical knowledge prestigious. It's also what causes smart people to be curious about certain things and not others our DNA is not so disinterested as we might think.So while ideas don't have to have immediate practical applications to be interesting the kinds of things we find interesting will surprisingly often turn out to have practical applications.The reason Aristotle didn't get anywhere in the Metaphysics was partly that he set off with contradictory aims: to explore the most abstract ideas guided by the assumption that they were useless. He was like an explorer looking for a territory to the north of him starting with the assumption that it was located to the south.And since his work became the map used by generations of future explorers he sent them off in the wrong direction as well. 8 Perhaps worst of all he protected them from both the criticism of outsiders and the promptings of their own inner compass by establishing the principle that the most noble sort of theoretical knowledge had to be useless.The Metaphysics is mostly a failed experiment. A few ideas from it turned out to be worth keeping the bulk of it has had no effect at all. The Metaphysics is among the least read of all famous books. It's not hard to understand the way Newton's Principia is but the way a garbled message is.Arguably it's an interesting failed experiment. But unfortunately that was not the conclusion Aristotle's successors derived from works like the Metaphysics. 9 Soon after the western world fell on intellectual hard times. Instead of version 1s to be superseded the works of Plato and Aristotle became revered texts to be mastered and discussed. And so things remained for a shockingly long time. It was not till around 1600 (in Europe where the center of gravity had shifted by then) that one found people confident enough to treat Aristotle's work as a catalog of mistakes. And even then they rarely said so outright.If it seems surprising that the gap was so long consider how little progress there was in math between Hellenistic times and the Renaissance.In the intervening years an unfortunate idea took hold: that it was not only acceptable to produce works like the Metaphysics but that it was a particularly prestigious line of work done by a class of people called philosophers. No one thought to go back and debug Aristotle's motivating argument. And so instead of correcting the problem Aristotle discovered by falling into it mdash that you can easily get lost if you talk too loosely about very abstract ideas mdash they continued to fall into it.The SingularityCuriously however the works they produced continued to attract new readers. Traditional philosophy occupies a kind of singularity in this respect. If you write in an unclear way about big ideas you produce something that seems tantalizingly attractive to inexperienced but intellectually ambitious students. Till one knows better it's hard to distinguish something that's hard to understand because the writer was unclear in his own mind from something like a mathematical proof that's hard to understand because the ideas it represents are hard to understand. To someone who hasn't learned the difference traditional philosophy seems extremely attractive: as hard (and therefore impressive) as math yet broader in scope. That was what lured me in as a high school student.This singularity is even more singular in having its own defense built in. When things are hard to understand people who suspect they're nonsense generally keep quiet. There's no way to prove a text is meaningless. The closest you can get is to show that the official judges of some class of texts can't distinguish them from placebos. 10 And so instead of denouncing philosophy most people who suspected it was a waste of time just studied other things. That alone is fairly damning evidence considering philosophy's claims. It's supposed to be about the ultimate truths. Surely all smart people would be interested in it if it delivered on that promise.Because philosophy's flaws turned away the sort of people who might have corrected them they tended to be self perpetuating. Bertrand Russell wrote in a letter in 1912: Hitherto the people attracted to philosophy have been mostly those who loved the big generalizations which were all wrong so that few people with exact minds have taken up the subject. 11 His response was to launch Wittgenstein at it with dramatic results.I think Wittgenstein deserves to be famous not for the discovery that most previous philosophy was a waste of time which judging from the circumstantial evidence must have been made by every smart person who studied a little philosophy and declined to pursue it further but for how he acted in response. 12 Instead of quietly switching to another field he made a fuss from inside. He was Gorbachev.The field of philosophy is still shaken from the fright Wittgenstein gave it. 13 Later in life he spent a lot of time talking about how words worked. Since that seems to be allowed that's what a lot of philosophers do now. Meanwhile sensing a vacuum in the metaphysical speculation department the people who used to do literary criticism have been edging Kantward under new names like "literary theory " "critical theory " and when they're feeling ambitious plain "theory." The writing is the familiar word salad: Gender is not like some of the other grammatical modes which express precisely a mode of conception without any reality that corresponds to the conceptual mode and consequently do not express precisely something in reality by which the intellect could be moved to conceive a thing the way it does even where that motive is not something in the thing as such. 14 The singularity I've described is not going away. There's a market for writing that sounds impressive and can't be disproven. There will always be both supply and demand. So if one group abandons this territory there will always be others ready to occupy it.A ProposalWe may be able to do better. Here's an intriguing possibility. Perhaps we should do what Aristotle meant to do instead of what he did. The goal he announces in the Metaphysics seems one worth pursuing: to discover the most general truths. That sounds good. But instead of trying to discover them because they're useless let's try to discover them because they're useful.I propose we try again but that we use that heretofore despised criterion applicability as a guide to keep us from wondering off into a swamp of abstractions. Instead of trying to answer the question: What are the most general truths let's try to answer the question Of all the useful things we can say which are the most general The test of utility I propose is whether we cause people who read what we've written to do anything differently afterward. Knowing we have to give definite (if implicit) advice will keep us from straying beyond the resolution of the words we're using.The goal is the same as Aristotle's we just approach it from a different direction.As an example of a useful general idea consider that of the controlled experiment. There's an idea that has turned out to be widely applicable. Some might say it's part of science but it's not part of any specific science it's literally meta physics (in our sense of "meta"). The idea of evolution is another. It turns out to have quite broad applications mdash for example in genetic algorithms and even product design. Frankfurt's distinction between lying and bullshitting seems a promising recent example. 15 These seem to me what philosophy should look like: quite general observations that would cause someone who understood them to do something differently.Such observations will necessarily be about things that are imprecisely defined. Once you start using words with precise meanings you're doing math. So starting from utility won't entirely solve the problem I described above mdash it won't flush out the metaphysical singularity. But it should help. It gives people with good intentions a new roadmap into abstraction. And they may thereby produce things that make the writing of the people with bad intentions look bad by comparison.One drawback of this approach is that it won't produce the sort of writing that gets you tenure. And not just because it's not currently the fashion. In order to get tenure in any field you must not arrive at conclusions that members of tenure committees can disagree with. In practice there are two kinds of solutions to this problem. In math and the sciences you can prove what you're saying or at any rate adjust your conclusions so you're not claiming anything false ("6 of 8 subjects had lower blood pressure after the treatment"). In the humanities you can either avoid drawing any definite conclusions (e.g. conclude that an issue is a complex one) or draw conclusions so narrow that no one cares enough to disagree with you.The kind of philosophy I'm advocating won't be able to take either of these routes. At best you'll be able to achieve the essayist's standard of proof not the mathematician's or the experimentalist's. And yet you won't be able to meet the usefulness test without implying definite and fairly broadly applicable conclusions. Worse still the usefulness test will tend to produce results that annoy people: there's no use in telling people things they already believe and people are often upset to be told things they don't.Here's the exciting thing though. Anyone can do this. Getting to general plus useful by starting with useful and cranking up the generality may be unsuitable for junior professors trying to get tenure but it's better for everyone else including professors who already have it. This side of the mountain is a nice gradual slope. You can start by writing things that are useful but very specific and then gradually make them more general. Joe's has good burritos. What makes a good burrito What makes good food What makes anything good You can take as long as you want. You don't have to get all the way to the top of the mountain. You don't have to tell anyone you're doing philosophy.If it seems like a daunting task to do philosophy here's an encouraging thought. The field is a lot younger than it seems. Though the first philosophers in the western tradition lived about 2500 years ago it would be misleading to say the field is 2500 years old because for most of that time the leading practitioners weren't doing much more than writing commentaries on Plato or Aristotle while watching over their shoulders for the next invading army. In the times when they weren't philosophy was hopelessly intermingled with religion. It didn't shake itself free till a couple hundred years ago and even then was afflicted by the structural problems I've described above. If I say this some will say it's a ridiculously overbroad and uncharitable generalization and others will say it's old news but here goes: judging from their works most philosophers up to the present have been wasting their time. So in a sense the field is still at the first step. 16 That sounds a preposterous claim to make. It won't seem so preposterous in 10 000 years. Civilization always seems old because it's always the oldest it's ever been. The only way to say whether something is really old or not is by looking at structural evidence and structurally philosophy is young it's still reeling from the unexpected breakdown of words.Philosophy is as young now as math was in 1500. There is a lot more to discover.Notes 1 In practice formal logic is not much use because despite some progress in the last 150 years we're still only able to formalize a small percentage of statements. We may never do that much better for the same reason 1980s style "knowledge representation" could never have worked many statements may have no representation more concise than a huge analog brain state. 2 It was harder for Darwin's contemporaries to grasp this than we can easily imagine. The story of creation in the Bible is not just a Judeo Christian concept it's roughly what everyone must have believed since before people were people. The hard part of grasping evolution was to realize that species weren't as they seem to be unchanging but had instead evolved from different simpler organisms over unimaginably long periods of time.Now we don't have to make that leap. No one in an industrialized country encounters the idea of evolution for the first time as an adult. Everyone's taught about it as a child either as truth or heresy. 3 Greek philosophers before Plato wrote in verse. This must have affected what they said. If you try to write about the nature of the world in verse it inevitably turns into incantation. Prose lets you be more precise and more tentative. 4 Philosophy is like math's ne'er do well brother. It was born when Plato and Aristotle looked at the works of their predecessors and said in effect "why can't you be more like your brother " Russell was still saying the same thing 2300 years later.Math is the precise half of the most abstract ideas and philosophy the imprecise half. It's probably inevitable that philosophy will suffer by comparison because there's no lower bound to its precision. Bad math is merely boring whereas bad philosophy is nonsense. And yet there are some good ideas in the imprecise half. 5 Aristotle's best work was in logic and zoology both of which he can be said to have invented. But the most dramatic departure from his predecessors was a new much more analytical style of thinking. He was arguably the first scientist. 6 Brooks Rodney Programming in Common Lisp Wiley 1985 p. 94. 7 Some would say we depend on Aristotle more than we realize because his ideas were one of the ingredients in our common culture. Certainly a lot of the words we use have a connection with Aristotle but it seems a bit much to suggest that we wouldn't have the concept of the essence of something or the distinction between matter and form if Aristotle hadn't written about them.One way to see how much we really depend on Aristotle would be to diff European culture with Chinese: what ideas did European culture have in 1800 that Chinese culture didn't in virtue of Aristotle's contribution 8 The meaning of the word "philosophy" has changed over time. In ancient times it covered a broad range of topics comparable in scope to our "scholarship" (though without the methodological implications). Even as late as Newton's time it included what we now call "science." But core of the subject today is still what seemed to Aristotle the core: the attempt to discover the most general truths.Aristotle didn't call this "metaphysics." That name got assigned to it because the books we now call the Metaphysics came after (meta after) the Physics in the standard edition of Aristotle's works compiled by Andronicus of Rhodes three centuries later. What we call "metaphysics" Aristotle called "first philosophy." 9 Some of Aristotle's immediate successors may have realized this but it's hard to say because most of their works are lost. 10 Sokal Alan "Transgressing the Boundaries: Toward a Transformative Hermeneutics of Quantum Gravity " Social Text 46 47 pp. 217 252.Abstract sounding nonsense seems to be most attractive when it's aligned with some axe the audience already has to grind. If this is so we should find it's most popular with groups that are (or feel) weak. The powerful don't need its reassurance. 11 Letter to Ottoline Morrell December 1912. Quoted in:Monk Ray Ludwig Wittgenstein: The Duty of Genius Penguin 1991 p. 75. 12 A preliminary result that all metaphysics between Aristotle and 1783 had been a waste of time is due to I. Kant. 13 Wittgenstein asserted a sort of mastery to which the inhabitants of early 20th century Cambridge seem to have been peculiarly vulnerable mdash perhaps partly because so many had been raised religious and then stopped believing so had a vacant space in their heads for someone to tell them what to do (others chose Marx or Cardinal Newman) and partly because a quiet earnest place like Cambridge in that era had no natural immunity to messianic figures just as European politics then had no natural immunity to dictators. 14 This is actually from the Ordinatio of Duns Scotus (ca. 1300) with "number" replaced by "gender." Plus ca change.Wolter Allan (trans) Duns Scotus: Philosophical Writings Nelson 1963 p. 92. 15 Frankfurt Harry On Bullshit Princeton University Press 2005. 16 Some introductions to philosophy now take the line that philosophy is worth studying as a process rather than for any particular truths you'll learn. The philosophers whose works they cover would be rolling in their graves at that. They hoped they were doing more than serving as examples of how to argue: they hoped they were getting results. Most were wrong but it doesn't seem an impossible hope.This argument seems to me like someone in 1500 looking at the lack of results achieved by alchemy and saying its value was as a process. No they were going about it wrong. It turns out it is possible to transmute lead into gold (though not economically at current energy prices) but the route to that knowledge was to backtrack and try another approach.Thanks to Trevor Blackwell Paul Buchheit Jessica Livingston Robert Morris Mark Nitzberg and Peter Norvig for reading drafts of this.
Many startups go through a point a few months before they die where although they have a significant amount of money in the bank they're also losing a lot each month and revenue growth is either nonexistent or mediocre. The company has say 6 months of runway. Or to put it more brutally 6 months before they're out of business. They expect to avoid that by raising more from investors. 1 That last sentence is the fatal one.There may be nothing founders are so prone to delude themselves about as how interested investors will be in giving them additional funding. It's hard to convince investors the first time too but founders expect that. What bites them the second time is a confluence of three forces: The company is spending more now than it did the first time it raised money. Investors have much higher standards for companies that have already raised money. The company is now starting to read as a failure. The first time it raised money it was neither a success nor a failure it was too early to ask. Now it's possible to ask that question and the default answer is failure because that is at this point the default outcome. I'm going to call the situation I described in the first paragraph "the fatal pinch." I try to resist coining phrases but making up a name for this situation may snap founders into realizing when they're in it.One of the things that makes the fatal pinch so dangerous is that it's self reinforcing. Founders overestimate their chances of raising more money and so are slack about reaching profitability which further decreases their chances of raising money.Now that you know about the fatal pinch what do you do about it Obviously the best thing to do is avoid it. Y Combinator tells founders who raise money to act as if it's the last they'll ever get. Because the self reinforcing nature of this situation works the other way too: the less you need further investment the easier it is to get.What do you do if you're already in the fatal pinch The first step is to re evaluate the probability of raising more money. I will now by an amazing feat of clairvoyance do this for you: the probability is zero. 2 Three options remain: you can shut down the company you can increase how much you make and you can decrease how much you spend.You should shut down the company if you're certain it will fail no matter what you do. Then at least you can give back the money you have left and save yourself however many months you would have spent riding it down.Companies rarely have to fail though. What I'm really doing here is giving you the option of admitting you've already given up.If you don't want to shut down the company that leaves increasing revenues and decreasing expenses. In most startups expenses people and decreasing expenses firing people. 3 Deciding to fire people is usually hard but there's one case in which it shouldn't be: when there are people you already know you should fire but you're in denial about it. If so now's the time.If that makes you profitable or will enable you to make it to profitability on the money you have left you've avoided the immediate danger.Otherwise you have three options: you either have to fire good people get some or all of the employees to take less salary for a while or increase revenues.Getting people to take less salary is a weak solution that will only work when the problem isn't too bad. If your current trajectory won't quite get you to profitability but you can get over the threshold by cutting salaries a little you might be able to make the case to everyone for doing it. Otherwise you're probably just postponing the problem and that will be obvious to the people whose salaries you're proposing to cut. 4 Which leaves two options firing good people and making more money. While trying to balance them keep in mind the eventual goal: to be a successful product company in the sense of having a single thing lots of people use.You should lean more toward firing people if the source of your trouble is overhiring. If you went out and hired 15 people before you even knew what you were building you've created a broken company. You need to figure out what you're building and it will probably be easier to do that with a handful of people than 15. Plus those 15 people might not even be the ones you need for whatever you end up building. So the solution may be to shrink and then figure out what direction to grow in. After all you're not doing those 15 people any favors if you fly the company into ground with them aboard. They'll all lose their jobs eventually along with all the time they expended on this doomed company.Whereas if you only have a handful of people it may be better to focus on trying to make more money. It may seem facile to suggest a startup make more money as if that could be done for the asking. Usually a startup is already trying as hard as it can to sell whatever it sells. What I'm suggesting here is not so much to try harder to make money but to try to make money in a different way. For example if you have only one person selling while the rest are writing code consider having everyone work on selling. What good will more code do you when you're out of business If you have to write code to close a certain deal go ahead that follows from everyone working on selling. But only work on whatever will get you the most revenue the soonest.Another way to make money differently is to sell different things and in particular to do more consultingish work. I say consultingish because there is a long slippery slope from making products to pure consulting and you don't have to go far down it before you start to offer something really attractive to customers. Although your product may not be very appealing yet if you're a startup your programmers will often be way better than the ones your customers have or can hire. Or you may have expertise in some new field they don't understand. So if you change your sales conversations just a little from "do you want to buy our product " to "what do you need that you'd pay a lot for " you may find it's suddenly a lot easier to extract money from customers.Be ruthlessly mercenary when you start doing this though: you're trying to save your company from death here so make customers pay a lot quickly. And to the extent you can try to avoid the worst pitfalls of consulting. The ideal thing might be if you built a precisely defined derivative version of your product for the customer and it was otherwise a straight product sale. You keep the IP and no billing by the hour.In the best case this consultingish work may not be just something you do to survive but may turn out to be the thing that doesn't scale that defines your company. Don't expect it to be but as you dive into individual users' needs keep your eyes open for narrow openings that have wide vistas beyond.There is usually so much demand for custom work that unless you're really incompetent there has to be some point down the slope of consulting at which you can survive. But I didn't use the term slippery slope by accident customers' insatiable demand for custom work will always be pushing you toward the bottom. So while you'll probably survive the problem now becomes to survive with the least damage and distraction.The good news is plenty of successful startups have passed through near death experiences and gone on to flourish. You just have to realize in time that you're near death. And if you're in the fatal pinch you are. Notes 1 There are a handful of companies that can't reasonably expect to make money for the first year or two because what they're building takes so long. For these companies substitute "progress" for "revenue growth." You're not one of these companies unless your initial investors agreed in advance that you were. And frankly even these companies wish they weren't because the illiquidity of "progress" puts them at the mercy of investors. 2 There's a variant of the fatal pinch where your existing investors help you along by promising to invest more. Or rather where you read them as promising to invest more while they think they're just mentioning the possibility. The way to solve this problem if you have 8 months of runway or less is to try to get the money right now. Then you'll either get the money in which case (immediate) problem solved or at least prevent your investors from helping you to remain in denial about your fundraising prospects. 3 Obviously if you have significant expenses other than salaries that you can eliminate do it now. 4 Unless of course the source of the problem is that you're paying yourselves high salaries. If by cutting the founders' salaries to the minimum you need you can make it to profitability you should. But it's a bad sign if you needed to read this to realize that. Thanks to Sam Altman Paul Buchheit Jessica Livingston and Geoff Ralston for reading drafts of this.
(I wrote this essay immediately after the election. But after writing it I buried it I was so depressed about the election that I just didn't want to think about it anymore. I recently came across this essay again and it strikes me as on the mark.) A lot of people are writing now about why Kerry lost. Here I want to examine a more specific question: why were the exit polls so wrong In Ohio which Kerry ultimately lost 49 51 exit polls gave him a 52 48 victory. And this wasn't just random error. In every swing state they overestimated the Kerry vote. In Florida which Bush ultimately won 52 47 exit polls predicted a dead heat.(These are not early numbers. They're from about midnight eastern time long after polls closed in Ohio and Florida. And yet by the next afternoon the exit poll numbers online corresponded to the returns. The only way I can imagine this happening is if those in charge of the exit polls cooked the books after seeing the actual returns. But that's another issue.)What happened The source of the problem may be a variant of the Bradley Effect. This term was invented after Tom Bradley the black mayor of Los Angeles lost an election for governor of California despite a comfortable lead in the polls. Apparently voters were afraid to say they planned to vote against him lest their motives be (perhaps correctly) suspected.It seems likely that something similar happened in exit polls this year. In theory exit polls ought to be very accurate. You're not asking people what they would do. You're asking what they just did.How can you get errors asking that Because some people don't respond. To get a truly random sample pollsters ask say every 20th person leaving the polling place who they voted for. But not everyone wants to answer. And the pollsters can't simply ignore those who won't or their sample isn't random anymore. So what they do apparently is note down the age and race and sex of the person and guess from that who they voted for.This works so long as there is no correlation between who people vote for and whether they're willing to talk about it. But this year there may have been. It may be that a significant number of those who voted for Bush didn't want to say so.Why not Because people in the US are more conservative than they're willing to admit. The values of the elite in this country at least at the moment are NPR values. The average person as I think both Republicans and Democrats would agree is more socially conservative. But while some openly flaunt the fact that they don't share the opinions of the elite others feel a little nervous about it as if they had bad table manners.For example according to current NPR values you can't say anything that might be perceived as disparaging towards homosexuals. To do so is "homophobic." And yet a large number of Americans are deeply religious and the Bible is quite explicit on the subject of homosexuality. What are they to do I think what many do is keep their opinions but keep them to themselves.They know what they believe but they also know what they're supposed to believe. And so when a stranger (for example a pollster) asks them their opinion about something like gay marriage they will not always say what they really think.When the values of the elite are liberal polls will tend to underestimate the conservativeness of ordinary voters. This seems to me the leading theory to explain why the exit polls were so far off this year. NPR values said one ought to vote for Kerry. So all the people who voted for Kerry felt virtuous for doing so and were eager to tell pollsters they had. No one who voted for Kerry did it as an act of quiet defiance. 
(This article was written as a kind of business plan for a new language. So it is missing (because it takes for granted) the most important feature of a good programming language: very powerful abstractions.)A friend of mine once told an eminent operating systems expert that he wanted to design a really good programming language. The expert told him that it would be a waste of time that programming languages don't become popular or unpopular based on their merits and so no matter how good his language was no one would use it. At least that was what had happened to the language he had designed.What does make a language popular Do popular languages deserve their popularity Is it worth trying to define a good programming language How would you do it I think the answers to these questions can be found by looking at hackers and learning what they want. Programming languages are for hackers and a programming language is good as a programming language (rather than say an exercise in denotational semantics or compiler design) if and only if hackers like it.1 The Mechanics of PopularityIt's true certainly that most people don't choose programming languages simply based on their merits. Most programmers are told what language to use by someone else. And yet I think the effect of such external factors on the popularity of programming languages is not as great as it's sometimes thought to be. I think a bigger problem is that a hacker's idea of a good programming language is not the same as most language designers'.Between the two the hacker's opinion is the one that matters. Programming languages are not theorems. They're tools designed for people and they have to be designed to suit human strengths and weaknesses as much as shoes have to be designed for human feet. If a shoe pinches when you put it on it's a bad shoe however elegant it may be as a piece of sculpture.It may be that the majority of programmers can't tell a good language from a bad one. But that's no different with any other tool. It doesn't mean that it's a waste of time to try designing a good language. Expert hackers can tell a good language when they see one and they'll use it. Expert hackers are a tiny minority admittedly but that tiny minority write all the good software and their influence is such that the rest of the programmers will tend to use whatever language they use. Often indeed it is not merely influence but command: often the expert hackers are the very people who as their bosses or faculty advisors tell the other programmers what language to use.The opinion of expert hackers is not the only force that determines the relative popularity of programming languages legacy software (Cobol) and hype (Ada Java) also play a role but I think it is the most powerful force over the long term. Given an initial critical mass and enough time a programming language probably becomes about as popular as it deserves to be. And popularity further separates good languages from bad ones because feedback from real live users always leads to improvements. Look at how much any popular language has changed during its life. Perl and Fortran are extreme cases but even Lisp has changed a lot. Lisp 1.5 didn't have macros for example these evolved later after hackers at MIT had spent a couple years using Lisp to write real programs. 1 So whether or not a language has to be good to be popular I think a language has to be popular to be good. And it has to stay popular to stay good. The state of the art in programming languages doesn't stand still. And yet the Lisps we have today are still pretty much what they had at MIT in the mid 1980s because that's the last time Lisp had a sufficiently large and demanding user base.Of course hackers have to know about a language before they can use it. How are they to hear From other hackers. But there has to be some initial group of hackers using the language for others even to hear about it. I wonder how large this group has to be how many users make a critical mass Off the top of my head I'd say twenty. If a language had twenty separate users meaning twenty users who decided on their own to use it I'd consider it to be real.Getting there can't be easy. I would not be surprised if it is harder to get from zero to twenty than from twenty to a thousand. The best way to get those initial twenty users is probably to use a trojan horse: to give people an application they want which happens to be written in the new language.2 External FactorsLet's start by acknowledging one external factor that does affect the popularity of a programming language. To become popular a programming language has to be the scripting language of a popular system. Fortran and Cobol were the scripting languages of early IBM mainframes. C was the scripting language of Unix and so later was Perl. Tcl is the scripting language of Tk. Java and Javascript are intended to be the scripting languages of web browsers.Lisp is not a massively popular language because it is not the scripting language of a massively popular system. What popularity it retains dates back to the 1960s and 1970s when it was the scripting language of MIT. A lot of the great programmers of the day were associated with MIT at some point. And in the early 1970s before C MIT's dialect of Lisp called MacLisp was one of the only programming languages a serious hacker would want to use.Today Lisp is the scripting language of two moderately popular systems Emacs and Autocad and for that reason I suspect that most of the Lisp programming done today is done in Emacs Lisp or AutoLisp.Programming languages don't exist in isolation. To hack is a transitive verb hackers are usually hacking something and in practice languages are judged relative to whatever they're used to hack. So if you want to design a popular language you either have to supply more than a language or you have to design your language to replace the scripting language of some existing system.Common Lisp is unpopular partly because it's an orphan. It did originally come with a system to hack: the Lisp Machine. But Lisp Machines (along with parallel computers) were steamrollered by the increasing power of general purpose processors in the 1980s. Common Lisp might have remained popular if it had been a good scripting language for Unix. It is alas an atrociously bad one.One way to describe this situation is to say that a language isn't judged on its own merits. Another view is that a programming language really isn't a programming language unless it's also the scripting language of something. This only seems unfair if it comes as a surprise. I think it's no more unfair than expecting a programming language to have say an implementation. It's just part of what a programming language is.A programming language does need a good implementation of course and this must be free. Companies will pay for software but individual hackers won't and it's the hackers you need to attract.A language also needs to have a book about it. The book should be thin well written and full of good examples. K R is the ideal here. At the moment I'd almost say that a language has to have a book published by O'Reilly. That's becoming the test of mattering to hackers.There should be online documentation as well. In fact the book can start as online documentation. But I don't think that physical books are outmoded yet. Their format is convenient and the de facto censorship imposed by publishers is a useful if imperfect filter. Bookstores are one of the most important places for learning about new languages.3 BrevityGiven that you can supply the three things any language needs a free implementation a book and something to hack how do you make a language that hackers will like One thing hackers like is brevity. Hackers are lazy in the same way that mathematicians and modernist architects are lazy: they hate anything extraneous. It would not be far from the truth to say that a hacker about to write a program decides what language to use at least subconsciously based on the total number of characters he'll have to type. If this isn't precisely how hackers think a language designer would do well to act as if it were.It is a mistake to try to baby the user with long winded expressions that are meant to resemble English. Cobol is notorious for this flaw. A hacker would consider being asked to writeadd x to y giving zinstead ofz x yas something between an insult to his intelligence and a sin against God.It has sometimes been said that Lisp should use first and rest instead of car and cdr because it would make programs easier to read. Maybe for the first couple hours. But a hacker can learn quickly enough that car means the first element of a list and cdr means the rest. Using first and rest means 50 more typing. And they are also different lengths meaning that the arguments won't line up when they're called as car and cdr often are in successive lines. I've found that it matters a lot how code lines up on the page. I can barely read Lisp code when it is set in a variable width font and friends say this is true for other languages too.Brevity is one place where strongly typed languages lose. All other things being equal no one wants to begin a program with a bunch of declarations. Anything that can be implicit should be.The individual tokens should be short as well. Perl and Common Lisp occupy opposite poles on this question. Perl programs can be almost cryptically dense while the names of built in Common Lisp operators are comically long. The designers of Common Lisp probably expected users to have text editors that would type these long names for them. But the cost of a long name is not just the cost of typing it. There is also the cost of reading it and the cost of the space it takes up on your screen.4 HackabilityThere is one thing more important than brevity to a hacker: being able to do what you want. In the history of programming languages a surprising amount of effort has gone into preventing programmers from doing things considered to be improper. This is a dangerously presumptuous plan. How can the language designer know what the programmer is going to need to do I think language designers would do better to consider their target user to be a genius who will need to do things they never anticipated rather than a bumbler who needs to be protected from himself. The bumbler will shoot himself in the foot anyway. You may save him from referring to variables in another package but you can't save him from writing a badly designed program to solve the wrong problem and taking forever to do it.Good programmers often want to do dangerous and unsavory things. By unsavory I mean things that go behind whatever semantic facade the language is trying to present: getting hold of the internal representation of some high level abstraction for example. Hackers like to hack and hacking means getting inside things and second guessing the original designer.Let yourself be second guessed. When you make any tool people use it in ways you didn't intend and this is especially true of a highly articulated tool like a programming language. Many a hacker will want to tweak your semantic model in a way that you never imagined. I say let them give the programmer access to as much internal stuff as you can without endangering runtime systems like the garbage collector.In Common Lisp I have often wanted to iterate through the fields of a struct to comb out references to a deleted object for example or find fields that are uninitialized. I know the structs are just vectors underneath. And yet I can't write a general purpose function that I can call on any struct. I can only access the fields by name because that's what a struct is supposed to mean.A hacker may only want to subvert the intended model of things once or twice in a big program. But what a difference it makes to be able to. And it may be more than a question of just solving a problem. There is a kind of pleasure here too. Hackers share the surgeon's secret pleasure in poking about in gross innards the teenager's secret pleasure in popping zits. 2 For boys at least certain kinds of horrors are fascinating. Maxim magazine publishes an annual volume of photographs containing a mix of pin ups and grisly accidents. They know their audience.Historically Lisp has been good at letting hackers have their way. The political correctness of Common Lisp is an aberration. Early Lisps let you get your hands on everything. A good deal of that spirit is fortunately preserved in macros. What a wonderful thing to be able to make arbitrary transformations on the source code.Classic macros are a real hacker's tool simple powerful and dangerous. It's so easy to understand what they do: you call a function on the macro's arguments and whatever it returns gets inserted in place of the macro call. Hygienic macros embody the opposite principle. They try to protect you from understanding what they're doing. I have never heard hygienic macros explained in one sentence. And they are a classic example of the dangers of deciding what programmers are allowed to want. Hygienic macros are intended to protect me from variable capture among other things but variable capture is exactly what I want in some macros.A really good language should be both clean and dirty: cleanly designed with a small core of well understood and highly orthogonal operators but dirty in the sense that it lets hackers have their way with it. C is like this. So were the early Lisps. A real hacker's language will always have a slightly raffish character.A good programming language should have features that make the kind of people who use the phrase "software engineering" shake their heads disapprovingly. At the other end of the continuum are languages like Ada and Pascal models of propriety that are good for teaching and not much else.5 Throwaway ProgramsTo be attractive to hackers a language must be good for writing the kinds of programs they want to write. And that means perhaps surprisingly that it has to be good for writing throwaway programs.A throwaway program is a program you write quickly for some limited task: a program to automate some system administration task or generate test data for a simulation or convert data from one format to another. The surprising thing about throwaway programs is that like the "temporary" buildings built at so many American universities during World War II they often don't get thrown away. Many evolve into real programs with real features and real users.I have a hunch that the best big programs begin life this way rather than being designed big from the start like the Hoover Dam. It's terrifying to build something big from scratch. When people take on a project that's too big they become overwhelmed. The project either gets bogged down or the result is sterile and wooden: a shopping mall rather than a real downtown Brasilia rather than Rome Ada rather than C.Another way to get a big program is to start with a throwaway program and keep improving it. This approach is less daunting and the design of the program benefits from evolution. I think if one looked that this would turn out to be the way most big programs were developed. And those that did evolve this way are probably still written in whatever language they were first written in because it's rare for a program to be ported except for political reasons. And so paradoxically if you want to make a language that is used for big systems you have to make it good for writing throwaway programs because that's where big systems come from.Perl is a striking example of this idea. It was not only designed for writing throwaway programs but was pretty much a throwaway program itself. Perl began life as a collection of utilities for generating reports and only evolved into a programming language as the throwaway programs people wrote in it grew larger. It was not until Perl 5 (if then) that the language was suitable for writing serious programs and yet it was already massively popular.What makes a language good for throwaway programs To start with it must be readily available. A throwaway program is something that you expect to write in an hour. So the language probably must already be installed on the computer you're using. It can't be something you have to install before you use it. It has to be there. C was there because it came with the operating system. Perl was there because it was originally a tool for system administrators and yours had already installed it.Being available means more than being installed though. An interactive language with a command line interface is more available than one that you have to compile and run separately. A popular programming language should be interactive and start up fast.Another thing you want in a throwaway program is brevity. Brevity is always attractive to hackers and never more so than in a program they expect to turn out in an hour.6 LibrariesOf course the ultimate in brevity is to have the program already written for you and merely to call it. And this brings us to what I think will be an increasingly important feature of programming languages: library functions. Perl wins because it has large libraries for manipulating strings. This class of library functions are especially important for throwaway programs which are often originally written for converting or extracting data. Many Perl programs probably begin as just a couple library calls stuck together.I think a lot of the advances that happen in programming languages in the next fifty years will have to do with library functions. I think future programming languages will have libraries that are as carefully designed as the core language. Programming language design will not be about whether to make your language strongly or weakly typed or object oriented or functional or whatever but about how to design great libraries. The kind of language designers who like to think about how to design type systems may shudder at this. It's almost like writing applications Too bad. Languages are for programmers and libraries are what programmers need.It's hard to design good libraries. It's not simply a matter of writing a lot of code. Once the libraries get too big it can sometimes take longer to find the function you need than to write the code yourself. Libraries need to be designed using a small set of orthogonal operators just like the core language. It ought to be possible for the programmer to guess what library call will do what he needs.Libraries are one place Common Lisp falls short. There are only rudimentary libraries for manipulating strings and almost none for talking to the operating system. For historical reasons Common Lisp tries to pretend that the OS doesn't exist. And because you can't talk to the OS you're unlikely to be able to write a serious program using only the built in operators in Common Lisp. You have to use some implementation specific hacks as well and in practice these tend not to give you everything you want. Hackers would think a lot more highly of Lisp if Common Lisp had powerful string libraries and good OS support.7 SyntaxCould a language with Lisp's syntax or more precisely lack of syntax ever become popular I don't know the answer to this question. I do think that syntax is not the main reason Lisp isn't currently popular. Common Lisp has worse problems than unfamiliar syntax. I know several programmers who are comfortable with prefix syntax and yet use Perl by default because it has powerful string libraries and can talk to the os.There are two possible problems with prefix notation: that it is unfamiliar to programmers and that it is not dense enough. The conventional wisdom in the Lisp world is that the first problem is the real one. I'm not so sure. Yes prefix notation makes ordinary programmers panic. But I don't think ordinary programmers' opinions matter. Languages become popular or unpopular based on what expert hackers think of them and I think expert hackers might be able to deal with prefix notation. Perl syntax can be pretty incomprehensible but that has not stood in the way of Perl's popularity. If anything it may have helped foster a Perl cult.A more serious problem is the diffuseness of prefix notation. For expert hackers that really is a problem. No one wants to write (aref a x y) when they could write a x y .In this particular case there is a way to finesse our way out of the problem. If we treat data structures as if they were functions on indexes we could write (a x y) instead which is even shorter than the Perl form. Similar tricks may shorten other types of expressions.We can get rid of (or make optional) a lot of parentheses by making indentation significant. That's how programmers read code anyway: when indentation says one thing and delimiters say another we go by the indentation. Treating indentation as significant would eliminate this common source of bugs as well as making programs shorter.Sometimes infix syntax is easier to read. This is especially true for math expressions. I've used Lisp my whole programming life and I still don't find prefix math expressions natural. And yet it is convenient especially when you're generating code to have operators that take any number of arguments. So if we do have infix syntax it should probably be implemented as some kind of read macro.I don't think we should be religiously opposed to introducing syntax into Lisp as long as it translates in a well understood way into underlying s expressions. There is already a good deal of syntax in Lisp. It's not necessarily bad to introduce more as long as no one is forced to use it. In Common Lisp some delimiters are reserved for the language suggesting that at least some of the designers intended to have more syntax in the future.One of the most egregiously unlispy pieces of syntax in Common Lisp occurs in format strings format is a language in its own right and that language is not Lisp. If there were a plan for introducing more syntax into Lisp format specifiers might be able to be included in it. It would be a good thing if macros could generate format specifiers the way they generate any other kind of code.An eminent Lisp hacker told me that his copy of CLTL falls open to the section format. Mine too. This probably indicates room for improvement. It may also mean that programs do a lot of I O.8 EfficiencyA good language as everyone knows should generate fast code. But in practice I don't think fast code comes primarily from things you do in the design of the language. As Knuth pointed out long ago speed only matters in certain critical bottlenecks. And as many programmers have observed since one is very often mistaken about where these bottlenecks are.So in practice the way to get fast code is to have a very good profiler rather than by say making the language strongly typed. You don't need to know the type of every argument in every call in the program. You do need to be able to declare the types of arguments in the bottlenecks. And even more you need to be able to find out where the bottlenecks are.One complaint people have had with Lisp is that it's hard to tell what's expensive. This might be true. It might also be inevitable if you want to have a very abstract language. And in any case I think good profiling would go a long way toward fixing the problem: you'd soon learn what was expensive.Part of the problem here is social. Language designers like to write fast compilers. That's how they measure their skill. They think of the profiler as an add on at best. But in practice a good profiler may do more to improve the speed of actual programs written in the language than a compiler that generates fast code. Here again language designers are somewhat out of touch with their users. They do a really good job of solving slightly the wrong problem.It might be a good idea to have an active profiler to push performance data to the programmer instead of waiting for him to come asking for it. For example the editor could display bottlenecks in red when the programmer edits the source code. Another approach would be to somehow represent what's happening in running programs. This would be an especially big win in server based applications where you have lots of running programs to look at. An active profiler could show graphically what's happening in memory as a program's running or even make sounds that tell what's happening.Sound is a good cue to problems. In one place I worked we had a big board of dials showing what was happening to our web servers. The hands were moved by little servomotors that made a slight noise when they turned. I couldn't see the board from my desk but I found that I could tell immediately by the sound when there was a problem with a server.It might even be possible to write a profiler that would automatically detect inefficient algorithms. I would not be surprised if certain patterns of memory access turned out to be sure signs of bad algorithms. If there were a little guy running around inside the computer executing our programs he would probably have as long and plaintive a tale to tell about his job as a federal government employee. I often have a feeling that I'm sending the processor on a lot of wild goose chases but I've never had a good way to look at what it's doing.A number of Lisps now compile into byte code which is then executed by an interpreter. This is usually done to make the implementation easier to port but it could be a useful language feature. It might be a good idea to make the byte code an official part of the language and to allow programmers to use inline byte code in bottlenecks. Then such optimizations would be portable too.The nature of speed as perceived by the end user may be changing. With the rise of server based applications more and more programs may turn out to be i o bound. It will be worth making i o fast. The language can help with straightforward measures like simple fast formatted output functions and also with deep structural changes like caching and persistent objects.Users are interested in response time. But another kind of efficiency will be increasingly important: the number of simultaneous users you can support per processor. Many of the interesting applications written in the near future will be server based and the number of users per server is the critical question for anyone hosting such applications. In the capital cost of a business offering a server based application this is the divisor.For years efficiency hasn't mattered much in most end user applications. Developers have been able to assume that each user would have an increasingly powerful processor sitting on their desk. And by Parkinson's Law software has expanded to use the resources available. That will change with server based applications. In that world the hardware and software will be supplied together. For companies that offer server based applications it will make a very big difference to the bottom line how many users they can support per server.In some applications the processor will be the limiting factor and execution speed will be the most important thing to optimize. But often memory will be the limit the number of simultaneous users will be determined by the amount of memory you need for each user's data. The language can help here too. Good support for threads will enable all the users to share a single heap. It may also help to have persistent objects and or language level support for lazy loading.9 TimeThe last ingredient a popular language needs is time. No one wants to write programs in a language that might go away as so many programming languages do. So most hackers will tend to wait until a language has been around for a couple years before even considering using it.Inventors of wonderful new things are often surprised to discover this but you need time to get any message through to people. A friend of mine rarely does anything the first time someone asks him. He knows that people sometimes ask for things that they turn out not to want. To avoid wasting his time he waits till the third or fourth time he's asked to do something by then whoever's asking him may be fairly annoyed but at least they probably really do want whatever they're asking for.Most people have learned to do a similar sort of filtering on new things they hear about. They don't even start paying attention until they've heard about something ten times. They're perfectly justified: the majority of hot new whatevers do turn out to be a waste of time and eventually go away. By delaying learning VRML I avoided having to learn it at all.So anyone who invents something new has to expect to keep repeating their message for years before people will start to get it. We wrote what was as far as I know the first web server based application and it took us years to get it through to people that it didn't have to be downloaded. It wasn't that they were stupid. They just had us tuned out.The good news is simple repetition solves the problem. All you have to do is keep telling your story and eventually people will start to hear. It's not when people notice you're there that they pay attention it's when they notice you're still there.It's just as well that it usually takes a while to gain momentum. Most technologies evolve a good deal even after they're first launched programming languages especially. Nothing could be better for a new techology than a few years of being used only by a small number of early adopters. Early adopters are sophisticated and demanding and quickly flush out whatever flaws remain in your technology. When you only have a few users you can be in close contact with all of them. And early adopters are forgiving when you improve your system even if this causes some breakage.There are two ways new technology gets introduced: the organic growth method and the big bang method. The organic growth method is exemplified by the classic seat of the pants underfunded garage startup. A couple guys working in obscurity develop some new technology. They launch it with no marketing and initially have only a few (fanatically devoted) users. They continue to improve the technology and meanwhile their user base grows by word of mouth. Before they know it they're big.The other approach the big bang method is exemplified by the VC backed heavily marketed startup. They rush to develop a product launch it with great publicity and immediately (they hope) have a large user base.Generally the garage guys envy the big bang guys. The big bang guys are smooth and confident and respected by the VCs. They can afford the best of everything and the PR campaign surrounding the launch has the side effect of making them celebrities. The organic growth guys sitting in their garage feel poor and unloved. And yet I think they are often mistaken to feel sorry for themselves. Organic growth seems to yield better technology and richer founders than the big bang method. If you look at the dominant technologies today you'll find that most of them grew organically.This pattern doesn't only apply to companies. You see it in sponsored research too. Multics and Common Lisp were big bang projects and Unix and MacLisp were organic growth projects.10 Redesign"The best writing is rewriting " wrote E. B. White. Every good writer knows this and it's true for software too. The most important part of design is redesign. Programming languages especially don't get redesigned enough.To write good software you must simultaneously keep two opposing ideas in your head. You need the young hacker's naive faith in his abilities and at the same time the veteran's skepticism. You have to be able to think how hard can it be with one half of your brain while thinking it will never work with the other.The trick is to realize that there's no real contradiction here. You want to be optimistic and skeptical about two different things. You have to be optimistic about the possibility of solving the problem but skeptical about the value of whatever solution you've got so far.People who do good work often think that whatever they're working on is no good. Others see what they've done and are full of wonder but the creator is full of worry. This pattern is no coincidence: it is the worry that made the work good.If you can keep hope and worry balanced they will drive a project forward the same way your two legs drive a bicycle forward. In the first phase of the two cycle innovation engine you work furiously on some problem inspired by your confidence that you'll be able to solve it. In the second phase you look at what you've done in the cold light of morning and see all its flaws very clearly. But as long as your critical spirit doesn't outweigh your hope you'll be able to look at your admittedly incomplete system and think how hard can it be to get the rest of the way thereby continuing the cycle.It's tricky to keep the two forces balanced. In young hackers optimism predominates. They produce something are convinced it's great and never improve it. In old hackers skepticism predominates and they won't even dare to take on ambitious projects.Anything you can do to keep the redesign cycle going is good. Prose can be rewritten over and over until you're happy with it. But software as a rule doesn't get redesigned enough. Prose has readers but software has users. If a writer rewrites an essay people who read the old version are unlikely to complain that their thoughts have been broken by some newly introduced incompatibility.Users are a double edged sword. They can help you improve your language but they can also deter you from improving it. So choose your users carefully and be slow to grow their number. Having users is like optimization: the wise course is to delay it. Also as a general rule you can at any given time get away with changing more than you think. Introducing change is like pulling off a bandage: the pain is a memory almost as soon as you feel it.Everyone knows that it's not a good idea to have a language designed by a committee. Committees yield bad design. But I think the worst danger of committees is that they interfere with redesign. It is so much work to introduce changes that no one wants to bother. Whatever a committee decides tends to stay that way even if most of the members don't like it.Even a committee of two gets in the way of redesign. This happens particularly in the interfaces between pieces of software written by two different people. To change the interface both have to agree to change it at once. And so interfaces tend not to change at all which is a problem because they tend to be one of the most ad hoc parts of any system.One solution here might be to design systems so that interfaces are horizontal instead of vertical so that modules are always vertically stacked strata of abstraction. Then the interface will tend to be owned by one of them. The lower of two levels will either be a language in which the upper is written in which case the lower level will own the interface or it will be a slave in which case the interface can be dictated by the upper level.11 LispWhat all this implies is that there is hope for a new Lisp. There is hope for any language that gives hackers what they want including Lisp. I think we may have made a mistake in thinking that hackers are turned off by Lisp's strangeness. This comforting illusion may have prevented us from seeing the real problem with Lisp or at least Common Lisp which is that it sucks for doing what hackers want to do. A hacker's language needs powerful libraries and something to hack. Common Lisp has neither. A hacker's language is terse and hackable. Common Lisp is not.The good news is it's not Lisp that sucks but Common Lisp. If we can develop a new Lisp that is a real hacker's language I think hackers will use it. They will use whatever language does the job. All we have to do is make sure this new Lisp does some important job better than other languages.History offers some encouragement. Over time successive new programming languages have taken more and more features from Lisp. There is no longer much left to copy before the language you've made is Lisp. The latest hot language Python is a watered down Lisp with infix syntax and no macros. A new Lisp would be a natural step in this progression.I sometimes think that it would be a good marketing trick to call it an improved version of Python. That sounds hipper than Lisp. To many people Lisp is a slow AI language with a lot of parentheses. Fritz Kunze's official biography carefully avoids mentioning the L word. But my guess is that we shouldn't be afraid to call the new Lisp Lisp. Lisp still has a lot of latent respect among the very best hackers the ones who took 6.001 and understood it for example. And those are the users you need to win.In "How to Become a Hacker " Eric Raymond describes Lisp as something like Latin or Greek a language you should learn as an intellectual exercise even though you won't actually use it: Lisp is worth learning for the profound enlightenment experience you will have when you finally get it that experience will make you a better programmer for the rest of your days even if you never actually use Lisp itself a lot. If I didn't know Lisp reading this would set me asking questions. A language that would make me a better programmer if it means anything at all means a language that would be better for programming. And that is in fact the implication of what Eric is saying.As long as that idea is still floating around I think hackers will be receptive enough to a new Lisp even if it is called Lisp. But this Lisp must be a hacker's language like the classic Lisps of the 1970s. It must be terse simple and hackable. And it must have powerful libraries for doing what hackers want to do now.In the matter of libraries I think there is room to beat languages like Perl and Python at their own game. A lot of the new applications that will need to be written in the coming years will be server based applications. There's no reason a new Lisp shouldn't have string libraries as good as Perl and if this new Lisp also had powerful libraries for server based applications it could be very popular. Real hackers won't turn up their noses at a new tool that will let them solve hard problems with a few library calls. Remember hackers are lazy.It could be an even bigger win to have core language support for server based applications. For example explicit support for programs with multiple users or data ownership at the level of type tags.Server based applications also give us the answer to the question of what this new Lisp will be used to hack. It would not hurt to make Lisp better as a scripting language for Unix. (It would be hard to make it worse.) But I think there are areas where existing languages would be easier to beat. I think it might be better to follow the model of Tcl and supply the Lisp together with a complete system for supporting server based applications. Lisp is a natural fit for server based applications. Lexical closures provide a way to get the effect of subroutines when the ui is just a series of web pages. S expressions map nicely onto html and macros are good at generating it. There need to be better tools for writing server based applications and there needs to be a new Lisp and the two would work very well together.12 The Dream LanguageBy way of summary let's try describing the hacker's dream language. The dream language is beautiful clean and terse. It has an interactive toplevel that starts up fast. You can write programs to solve common problems with very little code. Nearly all the code in any program you write is code that's specific to your application. Everything else has been done for you.The syntax of the language is brief to a fault. You never have to type an unnecessary character or even to use the shift key much.Using big abstractions you can write the first version of a program very quickly. Later when you want to optimize there's a really good profiler that tells you where to focus your attention. You can make inner loops blindingly fast even writing inline byte code if you need to.There are lots of good examples to learn from and the language is intuitive enough that you can learn how to use it from examples in a couple minutes. You don't need to look in the manual much. The manual is thin and has few warnings and qualifications.The language has a small core and powerful highly orthogonal libraries that are as carefully designed as the core language. The libraries all work well together everything in the language fits together like the parts in a fine camera. Nothing is deprecated or retained for compatibility. The source code of all the libraries is readily available. It's easy to talk to the operating system and to applications written in other languages.The language is built in layers. The higher level abstractions are built in a very transparent way out of lower level abstractions which you can get hold of if you want.Nothing is hidden from you that doesn't absolutely have to be. The language offers abstractions only as a way of saving you work rather than as a way of telling you what to do. In fact the language encourages you to be an equal participant in its design. You can change everything about it including even its syntax and anything you write has as much as possible the same status as what comes predefined.Notes 1 Macros very close to the modern idea were proposed by Timothy Hart in 1964 two years after Lisp 1.5 was released. What was missing initially were ways to avoid variable capture and multiple evaluation Hart's examples are subject to both. 2 In When the Air Hits Your Brain neurosurgeon Frank Vertosick recounts a conversation in which his chief resident Gary talks about the difference between surgeons and internists ("fleas"): Gary and I ordered a large pizza and found an open booth. The chief lit a cigarette. "Look at those goddamn fleas jabbering about some disease they'll see once in their lifetimes. That's the trouble with fleas they only like the bizarre stuff. They hate their bread and butter cases. That's the difference between us and the fucking fleas. See we love big juicy lumbar disc herniations but they hate hypertension...." It's hard to think of a lumbar disc herniation as juicy (except literally). And yet I think I know what they mean. I've often had a juicy bug to track down. Someone who's not a programmer would find it hard to imagine that there could be pleasure in a bug. Surely it's better if everything just works. In one way it is. And yet there is undeniably a grim satisfaction in hunting down certain sorts of bugs.
 "The quantity of meaning compressed into a small space by algebraic signs is another circumstance that facilitates the reasonings we are accustomed to carry on by their aid." Charles Babbage quoted in Iverson's Turing Award Lecture 
At this year's startup school David Heinemeier Hansson gave a talk in which he suggested that startup founders should do things the old fashioned way. Instead of hoping to get rich by building a valuable company and then selling stock in a "liquidity event " founders should start companies that make money and live off the revenues.Sounds like a good plan. Let's think about the optimal way to do this.One disadvantage of living off the revenues of your company is that you have to keep running it. And as anyone who runs their own business can tell you that requires your complete attention. You can't just start a business and check out once things are going well or they stop going well surprisingly fast.The main economic motives of startup founders seem to be freedom and security. They want enough money that (a) they don't have to worry about running out of money and (b) they can spend their time how they want. Running your own business offers neither. You certainly don't have freedom: no boss is so demanding. Nor do you have security because if you stop paying attention to the company its revenues go away and with them your income.The best case for most people would be if you could hire someone to manage the company for you once you'd grown it to a certain size. Suppose you could find a really good manager. Then you would have both freedom and security. You could pay as little attention to the business as you wanted knowing that your manager would keep things running smoothly. And that being so revenues would continue to flow in so you'd have security as well.There will of course be some founders who wouldn't like that idea: the ones who like running their company so much that there's nothing else they'd rather do. But this group must be small. The way you succeed in most businesses is to be fanatically attentive to customers' needs. What are the odds that your own desires would coincide exactly with the demands of this powerful external force Sure running your own company can be fairly interesting. Viaweb was more interesting than any job I'd had before. And since I made much more money from it it offered the highest ratio of income to boringness of anything I'd done by orders of magnitude. But was it the most interesting work I could imagine doing No.Whether the number of founders in the same position is asymptotic or merely large there are certainly a lot of them. For them the right approach would be to hand the company over to a professional manager eventually if they could find one who was good enough. So far so good. But what if your manager was hit by a bus What you really want is a management company to run your company for you. Then you don't depend on any one person.If you own rental property there are companies you can hire to manage it for you. Some will do everything from finding tenants to fixing leaks. Of course running companies is a lot more complicated than managing rental property but let's suppose there were management companies that could do it for you. They'd charge a lot but wouldn't it be worth it I'd sacrifice a large percentage of the income for the extra peace of mind.I realize what I'm describing already sounds too good to be true but I can think of a way to make it even more attractive. If company management companies existed there would be an additional service they could offer clients: they could let them insure their returns by pooling their risk. After all even a perfect manager can't save a company when as sometimes happens its whole market dies just as property managers can't save you from the building burning down. But a company that managed a large enough number of companies could say to all its clients: we'll combine the revenues from all your companies and pay you your proportionate share.If such management companies existed they'd offer the maximum of freedom and security. Someone would run your company for you and you'd be protected even if it happened to die.Let's think about how such a management company might be organized. The simplest way would be to have a new kind of stock representing the total pool of companies they were managing. When you signed up you'd trade your company's stock for shares of this pool in proportion to an estimate of your company's value that you'd both agreed upon. Then you'd automatically get your share of the returns of the whole pool.The catch is that because this kind of trade would be hard to undo you couldn't switch management companies. But there's a way they could fix that: suppose all the company management companies got together and agreed to allow their clients to exchange shares in all their pools. Then you could in effect simultaneously choose all the management companies to run yours for you in whatever proportion you wanted and change your mind later as often as you wanted.If such pooled risk company management companies existed signing up with one would seem the ideal plan for most people following the route David advocated.Good news: they do exist. What I've just described is an acquisition by a public company. Unfortunately though public acquirers are structurally identical to pooled risk company management companies they don't think of themselves that way. With a property management company you can just walk in whenever you want and say "manage my rental property for me" and they'll do it. Whereas acquirers are as of this writing extremely fickle. Sometimes they're in a buying mood and they'll overpay enormously other times they're not interested. They're like property management companies run by madmen. Or more precisely by Benjamin Graham's Mr. Market.So while on average public acquirers behave like pooled risk company managers you need a window of several years to get average case performance. If you wait long enough (five years say) you're likely to hit an up cycle where some acquirer is hot to buy you. But you can't choose when it happens.You can't assume investors will carry you for as long as you might have to wait. Your company has to make money. Opinions are divided about how early to focus on that. Joe Kraus says you should try charging customers right away. And yet some of the most successful startups including Google ignored revenue at first and concentrated exclusively on development. The answer probably depends on the type of company you're starting. I can imagine some where trying to make sales would be a good heuristic for product design and others where it would just be a distraction. The test is probably whether it helps you to understand your users.You can choose whichever revenue strategy you think is best for the type of company you're starting so long as you're profitable. Being profitable ensures you'll get at least the average of the acquisition market mdash in which public companies do behave as pooled risk company management companies.David isn't mistaken in saying you should start a company to live off its revenues. The mistake is thinking this is somehow opposed to starting a company and selling it. In fact for most people the latter is merely the optimal case of the former.Thanks to Trevor Blackwell Jessica Livingston Michael Mandel Robert Morris and Fred Wilson for reading drafts of this. 
The most impressive people I know are all terrible procrastinators. So could it be that procrastination isn't always bad Most people who write about procrastination write about how to cure it. But this is strictly speaking impossible. There are an infinite number of things you could be doing. No matter what you work on you're not working on everything else. So the question is not how to avoid procrastination but how to procrastinate well.There are three variants of procrastination depending on what you do instead of working on something: you could work on (a) nothing (b) something less important or (c) something more important. That last type I'd argue is good procrastination.That's the "absent minded professor " who forgets to shave or eat or even perhaps look where he's going while he's thinking about some interesting question. His mind is absent from the everyday world because it's hard at work in another.That's the sense in which the most impressive people I know are all procrastinators. They're type C procrastinators: they put off working on small stuff to work on big stuff.What's "small stuff " Roughly work that has zero chance of being mentioned in your obituary. It's hard to say at the time what will turn out to be your best work (will it be your magnum opus on Sumerian temple architecture or the detective thriller you wrote under a pseudonym ) but there's a whole class of tasks you can safely rule out: shaving doing your laundry cleaning the house writing thank you notes mdash anything that might be called an errand.Good procrastination is avoiding errands to do real work.Good in a sense at least. The people who want you to do the errands won't think it's good. But you probably have to annoy them if you want to get anything done. The mildest seeming people if they want to do real work all have a certain degree of ruthlessness when it comes to avoiding errands.Some errands like replying to letters go away if you ignore them (perhaps taking friends with them). Others like mowing the lawn or filing tax returns only get worse if you put them off. In principle it shouldn't work to put off the second kind of errand. You're going to have to do whatever it is eventually. Why not (as past due notices are always saying) do it now The reason it pays to put off even those errands is that real work needs two things errands don't: big chunks of time and the right mood. If you get inspired by some project it can be a net win to blow off everything you were supposed to do for the next few days to work on it. Yes those errands may cost you more time when you finally get around to them. But if you get a lot done during those few days you will be net more productive.In fact it may not be a difference in degree but a difference in kind. There may be types of work that can only be done in long uninterrupted stretches when inspiration hits rather than dutifully in scheduled little slices. Empirically it seems to be so. When I think of the people I know who've done great things I don't imagine them dutifully crossing items off to do lists. I imagine them sneaking off to work on some new idea.Conversely forcing someone to perform errands synchronously is bound to limit their productivity. The cost of an interruption is not just the time it takes but that it breaks the time on either side in half. You probably only have to interrupt someone a couple times a day before they're unable to work on hard problems at all.I've wondered a lot about why startups are most productive at the very beginning when they're just a couple guys in an apartment. The main reason may be that there's no one to interrupt them yet. In theory it's good when the founders finally get enough money to hire people to do some of the work for them. But it may be better to be overworked than interrupted. Once you dilute a startup with ordinary office workers mdash with type B procrastinators mdash the whole company starts to resonate at their frequency. They're interrupt driven and soon you are too.Errands are so effective at killing great projects that a lot of people use them for that purpose. Someone who has decided to write a novel for example will suddenly find that the house needs cleaning. People who fail to write novels don't do it by sitting in front of a blank page for days without writing anything. They do it by feeding the cat going out to buy something they need for their apartment meeting a friend for coffee checking email. "I don't have time to work " they say. And they don't they've made sure of that.(There's also a variant where one has no place to work. The cure is to visit the places where famous people worked and see how unsuitable they were.)I've used both these excuses at one time or another. I've learned a lot of tricks for making myself work over the last 20 years but even now I don't win consistently. Some days I get real work done. Other days are eaten up by errands. And I know it's usually my fault: I let errands eat up the day to avoid facing some hard problem.The most dangerous form of procrastination is unacknowledged type B procrastination because it doesn't feel like procrastination. You're "getting things done." Just the wrong things.Any advice about procrastination that concentrates on crossing things off your to do list is not only incomplete but positively misleading if it doesn't consider the possibility that the to do list is itself a form of type B procrastination. In fact possibility is too weak a word. Nearly everyone's is. Unless you're working on the biggest things you could be working on you're type B procrastinating no matter how much you're getting done.In his famous essay You and Your Research (which I recommend to anyone ambitious no matter what they're working on) Richard Hamming suggests that you ask yourself three questions: What are the most important problems in your field Are you working on one of them Why not Hamming was at Bell Labs when he started asking such questions. In principle anyone there ought to have been able to work on the most important problems in their field. Perhaps not everyone can make an equally dramatic mark on the world I don't know but whatever your capacities there are projects that stretch them. So Hamming's exercise can be generalized to: What's the best thing you could be working on and why aren't you Most people will shy away from this question. I shy away from it myself I see it there on the page and quickly move on to the next sentence. Hamming used to go around actually asking people this and it didn't make him popular. But it's a question anyone ambitious should face.The trouble is you may end up hooking a very big fish with this bait. To do good work you need to do more than find good projects. Once you've found them you have to get yourself to work on them and that can be hard. The bigger the problem the harder it is to get yourself to work on it.Of course the main reason people find it difficult to work on a particular problem is that they don't enjoy it. When you're young especially you often find yourself working on stuff you don't really like because it seems impressive for example or because you've been assigned to work on it. Most grad students are stuck working on big problems they don't really like and grad school is thus synonymous with procrastination.But even when you like what you're working on it's easier to get yourself to work on small problems than big ones. Why Why is it so hard to work on big problems One reason is that you may not get any reward in the forseeable future. If you work on something you can finish in a day or two you can expect to have a nice feeling of accomplishment fairly soon. If the reward is indefinitely far in the future it seems less real.Another reason people don't work on big projects is ironically fear of wasting time. What if they fail Then all the time they spent on it will be wasted. (In fact it probably won't be because work on hard projects almost always leads somewhere.)But the trouble with big problems can't be just that they promise no immediate reward and might cause you to waste a lot of time. If that were all they'd be no worse than going to visit your in laws. There's more to it than that. Big problems are terrifying. There's an almost physical pain in facing them. It's like having a vacuum cleaner hooked up to your imagination. All your initial ideas get sucked out immediately and you don't have any more and yet the vacuum cleaner is still sucking.You can't look a big problem too directly in the eye. You have to approach it somewhat obliquely. But you have to adjust the angle just right: you have to be facing the big problem directly enough that you catch some of the excitement radiating from it but not so much that it paralyzes you. You can tighten the angle once you get going just as a sailboat can sail closer to the wind once it gets underway.If you want to work on big things you seem to have to trick yourself into doing it. You have to work on small things that could grow into big things or work on successively larger things or split the moral load with collaborators. It's not a sign of weakness to depend on such tricks. The very best work has been done this way.When I talk to people who've managed to make themselves work on big things I find that all blow off errands and all feel guilty about it. I don't think they should feel guilty. There's more to do than anyone could. So someone doing the best work they can is inevitably going to leave a lot of errands undone. It seems a mistake to feel bad about that.I think the way to "solve" the problem of procrastination is to let delight pull you instead of making a to do list push you. Work on an ambitious project you really enjoy and sail as close to the wind as you can and you'll leave the right things undone.Thanks to Trevor Blackwell Jessica Livingston and Robert Morris for reading drafts of this.
1993 (This essay is from the introduction to On Lisp. The red text explains the origins of Arc's name.)It's a long standing principle of programming style that the functional elements of a program should not be too large. If some component of a program grows beyond the stage where it's readily comprehensible it becomes a mass of complexity which conceals errors as easily as a big city conceals fugitives. Such software will be hard to read hard to test and hard to debug.In accordance with this principle a large program must be divided into pieces and the larger the program the more it must be divided. How do you divide a program The traditional approach is called top down design: you say "the purpose of the program is to do these seven things so I divide it into seven major subroutines. The first subroutine has to do these four things so it in turn will have four of its own subroutines " and so on. This process continues until the whole program has the right level of granularity each part large enough to do something substantial but small enough to be understood as a single unit.Experienced Lisp programmers divide up their programs differently. As well as top down design they follow a principle which could be called bottom up design changing the language to suit the problem. In Lisp you don't just write your program down toward the language you also build the language up toward your program. As you're writing a program you may think "I wish Lisp had such and such an operator." So you go and write it. Afterward you realize that using the new operator would simplify the design of another part of the program and so on. Language and program evolve together. Like the border between two warring states the boundary between language and program is drawn and redrawn until eventually it comes to rest along the mountains and rivers the natural frontiers of your problem. In the end your program will look as if the language had been designed for it. And when language and program fit one another well you end up with code which is clear small and efficient. It's worth emphasizing that bottom up design doesn't mean just writing the same program in a different order. When you work bottom up you usually end up with a different program. Instead of a single monolithic program you will get a larger language with more abstract operators and a smaller program written in it. Instead of a lintel you'll get an arch. In typical code once you abstract out the parts which are merely bookkeeping what's left is much shorter the higher you build up the language the less distance you will have to travel from the top down to it. This brings several advantages: By making the language do more of the work bottom up design yields programs which are smaller and more agile. A shorter program doesn't have to be divided into so many components and fewer components means programs which are easier to read or modify. Fewer components also means fewer connections between components and thus less chance for errors there. As industrial designers strive to reduce the number of moving parts in a machine experienced Lisp programmers use bottom up design to reduce the size and complexity of their programs. Bottom up design promotes code re use. When you write two or more programs many of the utilities you wrote for the first program will also be useful in the succeeding ones. Once you've acquired a large substrate of utilities writing a new program can take only a fraction of the effort it would require if you had to start with raw Lisp. Bottom up design makes programs easier to read. An instance of this type of abstraction asks the reader to understand a general purpose operator an instance of functional abstraction asks the reader to understand a special purpose subroutine. 1 Because it causes you always to be on the lookout for patterns in your code working bottom up helps to clarify your ideas about the design of your program. If two distant components of a program are similar in form you'll be led to notice the similarity and perhaps to redesign the program in a simpler way. Bottom up design is possible to a certain degree in languages other than Lisp. Whenever you see library functions bottom up design is happening. However Lisp gives you much broader powers in this department and augmenting the language plays a proportionately larger role in Lisp style so much so that Lisp is not just a different language but a whole different way of programming.It's true that this style of development is better suited to programs which can be written by small groups. However at the same time it extends the limits of what can be done by a small group. In The Mythical Man Month Frederick Brooks proposed that the productivity of a group of programmers does not grow linearly with its size. As the size of the group increases the productivity of individual programmers goes down. The experience of Lisp programming suggests a more cheerful way to phrase this law: as the size of the group decreases the productivity of individual programmers goes up. A small group wins relatively speaking simply because it's smaller. When a small group also takes advantage of the techniques that Lisp makes possible it can win outright.New: Download On Lisp for Free. 1 "But no one can read the program without understanding all your new utilities." To see why such statements are usually mistaken see Section 4.8.
As a child I read a book of stories about a famous judge in eighteenth century Japan called Ooka Tadasuke. One of the cases he decided was brought by the owner of a food shop. A poor student who could afford only rice was eating his rice while enjoying the delicious cooking smells coming from the food shop. The owner wanted the student to pay for the smells he was enjoying. The student was stealing his smells This story often comes to mind when I hear the RIAA and MPAA accusing people of stealing music and movies.It sounds ridiculous to us to treat smells as property. But I can imagine scenarios in which one could charge for smells. Imagine we were living on a moon base where we had to buy air by the liter. I could imagine air suppliers adding scents at an extra charge.The reason it seems ridiculous to us to treat smells as property is that it wouldn't work to. It would work on a moon base though.What counts as property depends on what works to treat as property. And that not only can change but has changed. Humans may always (for some definition of human and always) have treated small items carried on one's person as property. But hunter gatherers didn't treat land for example as property in the way we do. 1 The reason so many people think of property as having a single unchanging definition is that its definition changes very slowly. 2 But we are in the midst of such a change now. The record labels and movie studios used to distribute what they made like air shipped through tubes on a moon base. But with the arrival of networks it's as if we've moved to a planet with a breathable atmosphere. Data moves like smells now. And through a combination of wishful thinking and short term greed the labels and studios have put themselves in the position of the food shop owner accusing us all of stealing their smells.(The reason I say short term greed is that the underlying problem with the labels and studios is that the people who run them are driven by bonuses rather than equity. If they were driven by equity they'd be looking for ways to take advantage of technological change instead of fighting it. But building new things takes too long. Their bonuses depend on this year's revenues and the best way to increase those is to extract more money from stuff they do already.)So what does this mean Should people not be able to charge for content There's not a single yes or no answer to that question. People should be able to charge for content when it works to charge for content.But by "works" I mean something more subtle than "when they can get away with it." I mean when people can charge for content without warping society in order to do it. After all the companies selling smells on the moon base could continue to sell them on the Earth if they lobbied successfully for laws requiring us all to continue to breathe through tubes down here too even though we no longer needed to.The crazy legal measures that the labels and studios have been taking have a lot of that flavor. Newspapers and magazines are just as screwed but they are at least declining gracefully. The RIAA and MPAA would make us breathe through tubes if they could.Ultimately it comes down to common sense. When you're abusing the legal system by trying to use mass lawsuits against randomly chosen people as a form of exemplary punishment or lobbying for laws that would break the Internet if they passed that's ipso facto evidence you're using a definition of property that doesn't work.This is where it's helpful to have working democracies and multiple sovereign countries. If the world had a single autocratic government the labels and studios could buy laws making the definition of property be whatever they wanted. But fortunately there are still some countries that are not copyright colonies of the US and even in the US politicians still seem to be afraid of actual voters in sufficient numbers. 3 The people running the US may not like it when voters or other countries refuse to bend to their will but ultimately it's in all our interest that there's not a single point of attack for people trying to warp the law to serve their own purposes. Private property is an extremely useful idea mdash arguably one of our greatest inventions. So far each new definition of it has brought us increasing material wealth. 4 It seems reasonable to suppose the newest one will too. It would be a disaster if we all had to keep running an obsolete version just because a few powerful people were too lazy to upgrade.Notes 1 If you want to learn more about hunter gatherers I strongly recommend Elizabeth Marshall Thomas's The Harmless People and The Old Way. 2 Change in the definition of property is driven mostly by technological progress however and since technological progress is accelerating so presumably will the rate of change in the definition of property. Which means it's all the more important for societies to be able to respond gracefully to such changes because they will come at an ever increasing rate. 3 As far as I know the term "copyright colony" was first used by Myles Peterson. 4 The state of technology isn't simply a function of the definition of property. They each constrain the other. But that being so you can't mess with the definition of property without affecting (and probably harming) the state of technology. The history of the USSR offers a vivid illustration of that.Thanks to Sam Altman and Geoff Ralston for reading drafts of this.
Publishers of all types from news to music are unhappy that consumers won't pay for content anymore. At least that's how they see it.In fact consumers never really were paying for content and publishers weren't really selling it either. If the content was what they were selling why has the price of books or music or movies always depended mostly on the format Why didn't better content cost more 1 A copy of Time costs 5 for 58 pages or 8.6 cents a page. The Economist costs 7 for 86 pages or 8.1 cents a page. Better journalism is actually slightly cheaper.Almost every form of publishing has been organized as if the medium was what they were selling and the content was irrelevant. Book publishers for example set prices based on the cost of producing and distributing books. They treat the words printed in the book the same way a textile manufacturer treats the patterns printed on its fabrics.Economically the print media are in the business of marking up paper. We can all imagine an old style editor getting a scoop and saying "this will sell a lot of papers " Cross out that final S and you're describing their business model. The reason they make less money now is that people don't need as much paper.A few months ago I ran into a friend in a cafe. I had a copy of the New York Times which I still occasionally buy on weekends. As I was leaving I offered it to him as I've done countless times before in the same situation. But this time something new happened. I felt that sheepish feeling you get when you offer someone something worthless. "Do you er want a printout of yesterday's news " I asked. (He didn't.)Now that the medium is evaporating publishers have nothing left to sell. Some seem to think they're going to sell content mdash that they were always in the content business really. But they weren't and it's unclear whether anyone could be.SellingThere have always been people in the business of selling information but that has historically been a distinct business from publishing. And the business of selling information to consumers has always been a marginal one. When I was a kid there were people who used to sell newsletters containing stock tips printed on colored paper that made them hard for the copiers of the day to reproduce. That is a different world both culturally and economically from the one publishers currently inhabit.People will pay for information they think they can make money from. That's why they paid for those stock tip newsletters and why companies pay now for Bloomberg terminals and Economist Intelligence Unit reports. But will people pay for information otherwise History offers little encouragement.If audiences were willing to pay more for better content why wasn't anyone already selling it to them There was no reason you couldn't have done that in the era of physical media. So were the print media and the music labels simply overlooking this opportunity Or is it rather nonexistent What about iTunes Doesn't that show people will pay for content Well not really. iTunes is more of a tollbooth than a store. Apple controls the default path onto the iPod. They offer a convenient list of songs and whenever you choose one they ding your credit card for a small amount just below the threshold of attention. Basically iTunes makes money by taxing people not selling them stuff. You can only do that if you own the channel and even then you don't make much from it because a toll has to be ignorable to work. Once a toll becomes painful people start to find ways around it and that's pretty easy with digital content.The situation is much the same with digital books. Whoever controls the device sets the terms. It's in their interest for content to be as cheap as possible and since they own the channel there's a lot they can do to drive prices down. Prices will fall even further once writers realize they don't need publishers. Getting a book printed and distributed is a daunting prospect for a writer but most can upload a file.Is software a counterexample People pay a lot for desktop software and that's just information. True but I don't think publishers can learn much from software. Software companies can charge a lot because (a) many of the customers are businesses who get in trouble if they use pirated versions and (b) though in form merely information software is treated by both maker and purchaser as a different type of thing from a song or an article. A Photoshop user needs Photoshop in a way that no one needs a particular song or article.That's why there's a separate word "content " for information that's not software. Software is a different business. Software and content blur together in some of the most lightweight software like casual games. But those are usually free. To make money the way software companies do publishers would have to become software companies and being publishers gives them no particular head start in that domain. 2 The most promising countertrend is the premium cable channel. People still pay for those. But broadcasting isn't publishing: you're not selling a copy of something. That's one reason the movie business hasn't seen their revenues decline the way the news and music businesses have. They only have one foot in publishing.To the extent the movie business can avoid becoming publishers they may avoid publishing's problems. But there are limits to how well they'll be able to do that. Once publishing mdash giving people copies mdash becomes the most natural way of distributing your content it probably doesn't work to stick to old forms of distribution just because you make more that way. If free copies of your content are available online then you're competing with publishing's form of distribution and that's just as bad as being a publisher.Apparently some people in the music business hope to retroactively convert it away from publishing by getting listeners to pay for subscriptions. It seems unlikely that will work if they're just streaming the same files you can get as mp3s.NextWhat happens to publishing if you can't sell content You have two choices: give it away and make money from it indirectly or find ways to embody it in things people will pay for.The first is probably the future of most current media. Give music away and make money from concerts and t shirts. Publish articles for free and make money from one of a dozen permutations of advertising. Both publishers and investors are down on advertising at the moment but it has more potential than they realize.I'm not claiming that potential will be realized by the existing players. The optimal ways to make money from the written word probably require different words written by different people.It's harder to say what will happen to movies. They could evolve into ads. Or they could return to their roots and make going to the theater a treat. If they made the experience good enough audiences might start to prefer it to watching pirated movies at home. 3 Or maybe the movie business will dry up and the people working in it will go to work for game developers.I don't know how big embodying information in physical form will be. It may be surprisingly large people overvalue physical stuff. There should remain some market for printed books at least.I can see the evolution of book publishing in the books on my shelves. Clearly at some point in the 1960s the big publishing houses started to ask: how cheaply can we make books before people refuse to buy them The answer turned out to be one step short of phonebooks. As long as it isn't floppy consumers still perceive it as a book.That worked as long as buying printed books was the only way to read them. If printed books are optional publishers will have to work harder to entice people to buy them. There should be some market but it's hard to foresee how big because its size will depend not on macro trends like the amount people read but on the ingenuity of individual publishers. 4 Some magazines may thrive by focusing on the magazine as a physical object. Fashion magazines could be made lush in a way that would be hard to match digitally at least for a while. But this is probably not an option for most magazines.I don't know exactly what the future will look like but I'm not too worried about it. This sort of change tends to create as many good things as it kills. Indeed the really interesting question is not what will happen to existing forms but what new forms will appear.The reason I've been writing about existing forms is that I don't know what new forms will appear. But though I can't predict specific winners I can offer a recipe for recognizing them. When you see something that's taking advantage of new technology to give people something they want that they couldn't have before you're probably looking at a winner. And when you see something that's merely reacting to new technology in an attempt to preserve some existing source of revenue you're probably looking at a loser. Notes 1 I don't like the word "content" and tried for a while to avoid using it but I have to admit there's no other word that means the right thing. "Information" is too general.Ironically the main reason I don't like "content" is the thesis of this essay. The word suggests an undifferentiated slurry but economically that's how both publishers and audiences treat it. Content is information you don't need. 2 Some types of publishers would be at a disadvantage trying to enter the software business. Record labels for example would probably find it more natural to expand into casinos than software because the kind of people who run them would be more at home at the mafia end of the business spectrum than the don't be evil end. 3 I never watch movies in theaters anymore. The tipping point for me was the ads they show first. 4 Unfortunately making physically nice books will only be a niche within a niche. Publishers are more likely to resort to expedients like selling autographed copies or editions with the buyer's picture on the cover.Thanks to Michael Arrington Trevor Blackwell Steven Levy Robert Morris and Geoff Ralston for reading drafts of this.
In a recent talk I said something that upset a lot of people: that you could get smarter programmers to work on a Python project than you could to work on a Java project.I didn't mean by this that Java programmers are dumb. I meant that Python programmers are smart. It's a lot of work to learn a new programming language. And people don't learn Python because it will get them a job they learn it because they genuinely like to program and aren't satisfied with the languages they already know.Which makes them exactly the kind of programmers companies should want to hire. Hence what for lack of a better name I'll call the Python paradox: if a company chooses to write its software in a comparatively esoteric language they'll be able to hire better programmers because they'll attract only those who cared enough to learn it. And for programmers the paradox is even more pronounced: the language to learn if you want to get a good job is a language that people don't learn merely to get a job.Only a few companies have been smart enough to realize this so far. But there is a kind of selection going on here too: they're exactly the companies programmers would most like to work for. Google for example. When they advertise Java programming jobs they also want Python experience.A friend of mine who knows nearly all the widely used languages uses Python for most of his projects. He says the main reason is that he likes the way source code looks. That may seem a frivolous reason to choose one language over another. But it is not so frivolous as it sounds: when you program you spend more time reading code than writing it. You push blobs of source code around the way a sculptor does blobs of clay. So a language that makes source code ugly is maddening to an exacting programmer as clay full of lumps would be to a sculptor.At the mention of ugly source code people will of course think of Perl. But the superficial ugliness of Perl is not the sort I mean. Real ugliness is not harsh looking syntax but having to build programs out of the wrong concepts. Perl may look like a cartoon character swearing but there are cases where it surpasses Python conceptually.So far anyway. Both languages are of course moving targets. But they share along with Ruby (and Icon and Joy and J and Lisp and Smalltalk) the fact that they're created by and used by people who really care about programming. And those tend to be the ones who do it well.
 rev August 2009Plato quotes Socrates as saying "the unexamined life is not worth living." Part of what he meant was that the proper role of humans is to think just as the proper role of anteaters is to poke their noses into anthills.A lot of ancient philosophy had the quality mdash and I don't mean this in an insulting way mdash of the kind of conversations freshmen have late at night in common rooms: What is our purpose Well we humans are as conspicuously different from other animals as the anteater. In our case the distinguishing feature is the ability to reason. So obviously that is what we should be doing and a human who doesn't is doing a bad job of being human mdash is no better than an animal. Now we'd give a different answer. At least someone Socrates's age would. We'd ask why we even suppose we have a "purpose" in life. We may be better adapted for some things than others we may be happier doing things we're adapted for but why assume purpose The history of ideas is a history of gradually discarding the assumption that it's all about us. No it turns out the earth is not the center of the universe mdash not even the center of the solar system. No it turns out humans are not created by God in his own image they're just one species among many descended not merely from apes but from microorganisms. Even the concept of "me" turns out to be fuzzy around the edges if you examine it closely.The idea that we're the center of things is difficult to discard. So difficult that there's probably room to discard more. Richard Dawkins made another step in that direction only in the last several decades with the idea of the selfish gene. No it turns out we're not even the protagonists: we're just the latest model vehicle our genes have constructed to travel around in. And having kids is our genes heading for the lifeboats. Reading that book snapped my brain out of its previous way of thinking the way Darwin's must have when it first appeared.(Few people can experience now what Darwin's contemporaries did when The Origin of Species was first published because everyone now is raised either to take evolution for granted or to regard it as a heresy. No one encounters the idea of natural selection for the first time as an adult.)So if you want to discover things that have been overlooked till now one really good place to look is in our blind spot: in our natural naive belief that it's all about us. And expect to encounter ferocious opposition if you do.Conversely if you have to choose between two theories prefer the one that doesn't center on you.This principle isn't only for big ideas. It works in everyday life too. For example suppose you're saving a piece of cake in the fridge and you come home one day to find your housemate has eaten it. Two possible theories: a) Your housemate did it deliberately to upset you. He knew you were saving that piece of cake.b) Your housemate was hungry. I say pick b. No one knows who said "never attribute to malice what can be explained by incompetence " but it is a powerful idea. Its more general version is our answer to the Greeks: Don't see purpose where there isn't. Or better still the positive version: See randomness.
Recently I realized I'd been holding two ideas in my head that would explode if combined.The first is that startups may represent a new economic phase on the scale of the Industrial Revolution. I'm not sure of this but there seems a decent chance it's true. People are dramatically more productive as founders or early employees of startups mdash imagine how much less Larry and Sergey would have achieved if they'd gone to work for a big company mdash and that scale of improvement can change social customs.The second idea is that startups are a type of business that flourishes in certain places that specialize in it mdash that Silicon Valley specializes in startups in the same way Los Angeles specializes in movies or New York in finance. 1 What if both are true What if startups are both a new economic phase and also a type of business that only flourishes in certain centers If so this revolution is going to be particularly revolutionary. All previous revolutions have spread. Agriculture cities and industrialization all spread widely. If startups end up being like the movie business with just a handful of centers and one dominant one that's going to have novel consequences.There are already signs that startups may not spread particularly well. The spread of startups seems to be proceeding slower than the spread of the Industrial Revolution despite the fact that communication is so much faster now.Within a few decades of the founding of Boulton Watt there were steam engines scattered over northern Europe and North America. Industrialization didn't spread much beyond those regions for a while. It only spread to places where there was a strong middle class mdash countries where a private citizen could make a fortune without having it confiscated. Otherwise it wasn't worth investing in factories. But in a country with a strong middle class it was easy for industrial techniques to take root. An individual mine or factory owner could decide to install a steam engine and within a few years he could probably find someone local to make him one. So steam engines spread fast. And they spread widely because the locations of mines and factories were determined by features like rivers harbors and sources of raw materials. 2 Startups don't seem to spread so well partly because they're more a social than a technical phenomenon and partly because they're not tied to geography. An individual European manufacturer could import industrial techniques and they'd work fine. This doesn't seem to work so well with startups: you need a community of expertise as you do in the movie business. 3 Plus there aren't the same forces driving startups to spread. Once railroads or electric power grids were invented every region had to have them. An area without railroads or power was a rich potential market. But this isn't true with startups. There's no need for a Microsoft of France or Google of Germany.Governments may decide they want to encourage startups locally but government policy can't call them into being the way a genuine need could.How will this all play out If I had to predict now I'd say that startups will spread but very slowly because their spread will be driven not by government policies (which won't work) or by market need (which doesn't exist) but to the extent that it happens at all by the same random factors that have caused startup culture to spread thus far. And such random factors will increasingly be outweighed by the pull of existing startup hubs.Silicon Valley is where it is because William Shockley wanted to move back to Palo Alto where he grew up and the experts he lured west to work with him liked it so much they stayed. Seattle owes much of its position as a tech center to the same cause: Gates and Allen wanted to move home. Otherwise Albuquerque might have Seattle's place in the rankings. Boston is a tech center because it's the intellectual capital of the US and probably the world. And if Battery Ventures hadn't turned down Facebook Boston would be significantly bigger now on the startup radar screen.But of course it's not a coincidence that Facebook got funded in the Valley and not Boston. There are more and bolder investors in Silicon Valley than in Boston and even undergrads know it.Boston's case illustrates the difficulty you'd have establishing a new startup hub this late in the game. If you wanted to create a startup hub by reproducing the way existing ones happened the way to do it would be to establish a first rate research university in a place so nice that rich people wanted to live there. Then the town would be hospitable to both groups you need: both founders and investors. That's the combination that yielded Silicon Valley. But Silicon Valley didn't have Silicon Valley to compete with. If you tried now to create a startup hub by planting a great university in a nice place it would have a harder time getting started because many of the best startups it produced would be sucked away to existing startup hubs.Recently I suggested a potential shortcut: pay startups to move. Once you had enough good startups in one place it would create a self sustaining chain reaction. Founders would start to move there without being paid because that was where their peers were and investors would appear too because that was where the deals were.In practice I doubt any government would have the balls to try this or the brains to do it right. I didn't mean it as a practical suggestion but more as an exploration of the lower bound of what it would take to create a startup hub deliberately.The most likely scenario is (1) that no government will successfully establish a startup hub and (2) that the spread of startup culture will thus be driven by the random factors that have driven it so far but (3) that these factors will be increasingly outweighed by the pull of existing startup hubs. Result: this revolution if it is one will be unusually localized. Notes 1 There are two very different types of startup: one kind that evolves naturally and one kind that's called into being to "commercialize" a scientific discovery. Most computer software startups are now the first type and most pharmaceutical startups the second. When I talk about startups in this essay I mean type I startups. There is no difficulty making type II startups spread: all you have to do is fund medical research labs commercializing whatever new discoveries the boffins throw off is as straightforward as building a new airport. Type II startups neither require nor produce startup culture. But that means having type II startups won't get you type I startups. Philadelphia is a case in point: lots of type II startups but hardly any type I.Incidentally Google may appear to be an instance of a type II startup but it wasn't. Google is not pagerank commercialized. They could have used another algorithm and everything would have turned out the same. What made Google Google is that they cared about doing search well at a critical point in the evolution of the web. 2 Watt didn't invent the steam engine. His critical invention was a refinement that made steam engines dramatically more efficient: the separate condenser. But that oversimplifies his role. He had such a different attitude to the problem and approached it with such energy that he transformed the field. Perhaps the most accurate way to put it would be to say that Watt reinvented the steam engine. 3 The biggest counterexample here is Skype. If you're doing something that would get shut down in the US it becomes an advantage to be located elsewhere. That's why Kazaa took the place of Napster. And the expertise and connections the founders gained from running Kazaa helped ensure the success of Skype.Thanks to Patrick Collison Jessica Livingston and Fred Wilson for reading drafts of this.
 (This article explains why much of the next generation of software may be server based what that will mean for programmers and why this new kind of software is a great opportunity for startups. It's derived from a talk at BBN Labs.) In the summer of 1995 my friend Robert Morris and I decided to start a startup. The PR campaign leading up to Netscape's IPO was running full blast then and there was a lot of talk in the press about online commerce. At the time there might have been thirty actual stores on the Web all made by hand. If there were going to be a lot of online stores there would need to be software for making them so we decided to write some.For the first week or so we intended to make this an ordinary desktop application. Then one day we had the idea of making the software run on our Web server using the browser as an interface. We tried rewriting the software to work over the Web and it was clear that this was the way to go. If we wrote our software to run on the server it would be a lot easier for the users and for us as well.This turned out to be a good plan. Now as Yahoo Store this software is the most popular online store builder with about 14 000 users.When we started Viaweb hardly anyone understood what we meant when we said that the software ran on the server. It was not until Hotmail was launched a year later that people started to get it. Now everyone knows that this is a valid approach. There is a name now for what we were: an Application Service Provider or ASP.I think that a lot of the next generation of software will be written on this model. Even Microsoft who have the most to lose seem to see the inevitablity of moving some things off the desktop. If software moves off the desktop and onto servers it will mean a very different world for developers. This article describes the surprising things we saw as some of the first visitors to this new world. To the extent software does move onto servers what I'm describing here is the future.The Next Thing When we look back on the desktop software era I think we'll marvel at the inconveniences people put up with just as we marvel now at what early car owners put up with. For the first twenty or thirty years you had to be a car expert to own a car. But cars were such a big win that lots of people who weren't car experts wanted to have them as well.Computers are in this phase now. When you own a desktop computer you end up learning a lot more than you wanted to know about what's happening inside it. But more than half the households in the US own one. My mother has a computer that she uses for email and for keeping accounts. About a year ago she was alarmed to receive a letter from Apple offering her a discount on a new version of the operating system. There's something wrong when a sixty five year old woman who wants to use a computer for email and accounts has to think about installing new operating sytems. Ordinary users shouldn't even know the words "operating system " much less "device driver" or "patch."There is now another way to deliver software that will save users from becoming system administrators. Web based applications are programs that run on Web servers and use Web pages as the user interface. For the average user this new kind of software will be easier cheaper more mobile more reliable and often more powerful than desktop software.With Web based software most users won't have to think about anything except the applications they use. All the messy changing stuff will be sitting on a server somewhere maintained by the kind of people who are good at that kind of thing. And so you won't ordinarily need a computer per se to use software. All you'll need will be something with a keyboard a screen and a Web browser. Maybe it will have wireless Internet access. Maybe it will also be your cell phone. Whatever it is it will be consumer electronics: something that costs about 200 and that people choose mostly based on how the case looks. You'll pay more for Internet services than you do for the hardware just as you do now with telephones. 1 It will take about a tenth of a second for a click to get to the server and back so users of heavily interactive software like Photoshop will still want to have the computations happening on the desktop. But if you look at the kind of things most people use computers for a tenth of a second latency would not be a problem. My mother doesn't really need a desktop computer and there are a lot of people like her.The Win for UsersNear my house there is a car with a bumper sticker that reads "death before inconvenience." Most people most of the time will take whatever choice requires least work. If Web based software wins it will be because it's more convenient. And it looks as if it will be for users and developers both.To use a purely Web based application all you need is a browser connected to the Internet. So you can use a Web based application anywhere. When you install software on your desktop computer you can only use it on that computer. Worse still your files are trapped on that computer. The inconvenience of this model becomes more and more evident as people get used to networks.The thin end of the wedge here was Web based email. Millions of people now realize that you should have access to email messages no matter where you are. And if you can see your email why not your calendar If you can discuss a document with your colleagues why can't you edit it Why should any of your data be trapped on some computer sitting on a faraway desk The whole idea of "your computer" is going away and being replaced with "your data." You should be able to get at your data from any computer. Or rather any client and a client doesn't have to be a computer.Clients shouldn't store data they should be like telephones. In fact they may become telephones or vice versa. And as clients get smaller you have another reason not to keep your data on them: something you carry around with you can be lost or stolen. Leaving your PDA in a taxi is like a disk crash except that your data is handed to someone else instead of being vaporized.With purely Web based software neither your data nor the applications are kept on the client. So you don't have to install anything to use it. And when there's no installation you don't have to worry about installation going wrong. There can't be incompatibilities between the application and your operating system because the software doesn't run on your operating system.Because it needs no installation it will be easy and common to try Web based software before you "buy" it. You should expect to be able to test drive any Web based application for free just by going to the site where it's offered. At Viaweb our whole site was like a big arrow pointing users to the test drive.After trying the demo signing up for the service should require nothing more than filling out a brief form (the briefer the better). And that should be the last work the user has to do. With Web based software you should get new releases without paying extra or doing any work or possibly even knowing about it.Upgrades won't be the big shocks they are now. Over time applications will quietly grow more powerful. This will take some effort on the part of the developers. They will have to design software so that it can be updated without confusing the users. That's a new problem but there are ways to solve it.With Web based applications everyone uses the same version and bugs can be fixed as soon as they're discovered. So Web based software should have far fewer bugs than desktop software. At Viaweb I doubt we ever had ten known bugs at any one time. That's orders of magnitude better than desktop software.Web based applications can be used by several people at the same time. This is an obvious win for collaborative applications but I bet users will start to want this in most applications once they realize it's possible. It will often be useful to let two people edit the same document for example. Viaweb let multiple users edit a site simultaneously more because that was the right way to write the software than because we expected users to want to but it turned out that many did.When you use a Web based application your data will be safer. Disk crashes won't be a thing of the past but users won't hear about them anymore. They'll happen within server farms. And companies offering Web based applications will actually do backups not only because they'll have real system administrators worrying about such things but because an ASP that does lose people's data will be in big big trouble. When people lose their own data in a disk crash they can't get that mad because they only have themselves to be mad at. When a company loses their data for them they'll get a lot madder.Finally Web based software should be less vulnerable to viruses. If the client doesn't run anything except a browser there's less chance of running viruses and no data locally to damage. And a program that attacked the servers themselves should find them very well defended. 2 For users Web based software will be less stressful. I think if you looked inside the average Windows user you'd find a huge and pretty much untapped desire for software meeting that description. Unleashed it could be a powerful force.City of CodeTo developers the most conspicuous difference between Web based and desktop software is that a Web based application is not a single piece of code. It will be a collection of programs of different types rather than a single big binary. And so designing Web based software is like desiging a city rather than a building: as well as buildings you need roads street signs utilities police and fire departments and plans for both growth and various kinds of disasters.At Viaweb software included fairly big applications that users talked to directly programs that those programs used programs that ran constantly in the background looking for problems programs that tried to restart things if they broke programs that ran occasionally to compile statistics or build indexes for searches programs we ran explicitly to garbage collect resources or to move or restore data programs that pretended to be users (to measure performance or expose bugs) programs for diagnosing network troubles programs for doing backups interfaces to outside services software that drove an impressive collection of dials displaying real time server statistics (a hit with visitors but indispensable for us too) modifications (including bug fixes) to open source software and a great many configuration files and settings. Trevor Blackwell wrote a spectacular program for moving stores to new servers across the country without shutting them down after we were bought by Yahoo. Programs paged us sent faxes and email to users conducted transactions with credit card processors and talked to one another through sockets pipes http requests ssh udp packets shared memory and files. Some of Viaweb even consisted of the absence of programs since one of the keys to Unix security is not to run unnecessary utilities that people might use to break into your servers.It did not end with software. We spent a lot of time thinking about server configurations. We built the servers ourselves from components partly to save money and partly to get exactly what we wanted. We had to think about whether our upstream ISP had fast enough connections to all the backbones. We serially dated RAID suppliers.But hardware is not just something to worry about. When you control it you can do more for users. With a desktop application you can specify certain minimum hardware but you can't add more. If you administer the servers you can in one step enable all your users to page people or send faxes or send commands by phone or process credit cards etc just by installing the relevant hardware. We always looked for new ways to add features with hardware not just because it pleased users but also as a way to distinguish ourselves from competitors who (either because they sold desktop software or resold Web based applications through ISPs) didn't have direct control over the hardware.Because the software in a Web based application will be a collection of programs rather than a single binary it can be written in any number of different languages. When you're writing desktop software you're practically forced to write the application in the same language as the underlying operating system meaning C and C . And so these languages (especially among nontechnical people like managers and VCs) got to be considered as the languages for "serious" software development. But that was just an artifact of the way desktop software had to be delivered. For server based software you can use any language you want. 3 Today a lot of the top hackers are using languages far removed from C and C : Perl Python and even Lisp.With server based software no one can tell you what language to use because you control the whole system right down to the hardware. Different languages are good for different tasks. You can use whichever is best for each. And when you have competitors "you can" means "you must" (we'll return to this later) because if you don't take advantage of this possibility your competitors will.Most of our competitors used C and C and this made their software visibly inferior because (among other things) they had no way around the statelessness of CGI scripts. If you were going to change something all the changes had to happen on one page with an Update button at the bottom. As I've written elsewhere by using Lisp which many people still consider a research language we could make the Viaweb editor behave more like desktop software.ReleasesOne of the most important changes in this new world is the way you do releases. In the desktop software business doing a release is a huge trauma in which the whole company sweats and strains to push out a single giant piece of code. Obvious comparisons suggest themselves both to the process and the resulting product.With server based software you can make changes almost as you would in a program you were writing for yourself. You release software as a series of incremental changes instead of an occasional big explosion. A typical desktop software company might do one or two releases a year. At Viaweb we often did three to five releases a day.When you switch to this new model you realize how much software development is affected by the way it is released. Many of the nastiest problems you see in the desktop software business are due to catastrophic nature of releases.When you release only one new version a year you tend to deal with bugs wholesale. Some time before the release date you assemble a new version in which half the code has been torn out and replaced introducing countless bugs. Then a squad of QA people step in and start counting them and the programmers work down the list fixing them. They do not generally get to the end of the list and indeed no one is sure where the end is. It's like fishing rubble out of a pond. You never really know what's happening inside the software. At best you end up with a statistical sort of correctness.With server based software most of the change is small and incremental. That in itself is less likely to introduce bugs. It also means you know what to test most carefully when you're about to release software: the last thing you changed. You end up with a much firmer grip on the code. As a general rule you do know what's happening inside it. You don't have the source code memorized of course but when you read the source you do it like a pilot scanning the instrument panel not like a detective trying to unravel some mystery.Desktop software breeds a certain fatalism about bugs. You know that you're shipping something loaded with bugs and you've even set up mechanisms to compensate for it (e.g. patch releases). So why worry about a few more Soon you're releasing whole features you know are broken. Apple did this earlier this year. They felt under pressure to release their new OS whose release date had already slipped four times but some of the software (support for CDs and DVDs) wasn't ready. The solution They released the OS without the unfinished parts and users will have to install them later.With Web based software you never have to release software before it works and you can release it as soon as it does work.The industry veteran may be thinking it's a fine sounding idea to say that you never have to release software before it works but what happens when you've promised to deliver a new version of your software by a certain date With Web based software you wouldn't make such a promise because there are no versions. Your software changes gradually and continuously. Some changes might be bigger than others but the idea of versions just doesn't naturally fit onto Web based software.If anyone remembers Viaweb this might sound odd because we were always announcing new versions. This was done entirely for PR purposes. The trade press we learned thinks in version numbers. They will give you major coverage for a major release meaning a new first digit on the version number and generally a paragraph at most for a point release meaning a new digit after the decimal point.Some of our competitors were offering desktop software and actually had version numbers. And for these releases the mere fact of which seemed to us evidence of their backwardness they would get all kinds of publicity. We didn't want to miss out so we started giving version numbers to our software too. When we wanted some publicity we'd make a list of all the features we'd added since the last "release " stick a new version number on the software and issue a press release saying that the new version was available immediately. Amazingly no one ever called us on it.By the time we were bought we had done this three times so we were on Version 4. Version 4.1 if I remember correctly. After Viaweb became Yahoo Store there was no longer such a desperate need for publicity so although the software continued to evolve the whole idea of version numbers was quietly dropped.BugsThe other major technical advantage of Web based software is that you can reproduce most bugs. You have the users' data right there on your disk. If someone breaks your software you don't have to try to guess what's going on as you would with desktop software: you should be able to reproduce the error while they're on the phone with you. You might even know about it already if you have code for noticing errors built into your application.Web based software gets used round the clock so everything you do is immediately put through the wringer. Bugs turn up quickly.Software companies are sometimes accused of letting the users debug their software. And that is just what I'm advocating. For Web based software it's actually a good plan because the bugs are fewer and transient. When you release software gradually you get far fewer bugs to start with. And when you can reproduce errors and release changes instantly you can find and fix most bugs as soon as they appear. We never had enough bugs at any one time to bother with a formal bug tracking system.You should test changes before you release them of course so no major bugs should get released. Those few that inevitably slip through will involve borderline cases and will only affect the few users that encounter them before someone calls in to complain. As long as you fix bugs right away the net effect for the average user is far fewer bugs. I doubt the average Viaweb user ever saw a bug.Fixing fresh bugs is easier than fixing old ones. It's usually fairly quick to find a bug in code you just wrote. When it turns up you often know what's wrong before you even look at the source because you were already worrying about it subconsciously. Fixing a bug in something you wrote six months ago (the average case if you release once a year) is a lot more work. And since you don't understand the code as well you're more likely to fix it in an ugly way or even introduce more bugs. 4 When you catch bugs early you also get fewer compound bugs. Compound bugs are two separate bugs that interact: you trip going downstairs and when you reach for the handrail it comes off in your hand. In software this kind of bug is the hardest to find and also tends to have the worst consequences. 5 The traditional "break everything and then filter out the bugs" approach inherently yields a lot of compound bugs. And software that's released in a series of small changes inherently tends not to. The floors are constantly being swept clean of any loose objects that might later get stuck in something.It helps if you use a technique called functional programming. Functional programming means avoiding side effects. It's something you're more likely to see in research papers than commercial software but for Web based applications it turns out to be really useful. It's hard to write entire programs as purely functional code but you can write substantial chunks this way. It makes those parts of your software easier to test because they have no state and that is very convenient in a situation where you are constantly making and testing small modifications. I wrote much of Viaweb's editor in this style and we made our scripting language RTML a purely functional language.People from the desktop software business will find this hard to credit but at Viaweb bugs became almost a game. Since most released bugs involved borderline cases the users who encountered them were likely to be advanced users pushing the envelope. Advanced users are more forgiving about bugs especially since you probably introduced them in the course of adding some feature they were asking for. In fact because bugs were rare and you had to be doing sophisticated things to see them advanced users were often proud to catch one. They would call support in a spirit more of triumph than anger as if they had scored points off us.SupportWhen you can reproduce errors it changes your approach to customer support. At most software companies support is offered as a way to make customers feel better. They're either calling you about a known bug or they're just doing something wrong and you have to figure out what. In either case there's not much you can learn from them. And so you tend to view support calls as a pain in the ass that you want to isolate from your developers as much as possible.This was not how things worked at Viaweb. At Viaweb support was free because we wanted to hear from customers. If someone had a problem we wanted to know about it right away so that we could reproduce the error and release a fix.So at Viaweb the developers were always in close contact with support. The customer support people were about thirty feet away from the programmers and knew that they could always interrupt anything with a report of a genuine bug. We would leave a board meeting to fix a serious bug.Our approach to support made everyone happier. The customers were delighted. Just imagine how it would feel to call a support line and be treated as someone bringing important news. The customer support people liked it because it meant they could help the users instead of reading scripts to them. And the programmers liked it because they could reproduce bugs instead of just hearing vague second hand reports about them.Our policy of fixing bugs on the fly changed the relationship between customer support people and hackers. At most software companies support people are underpaid human shields and hackers are little copies of God the Father creators of the world. Whatever the procedure for reporting bugs it is likely to be one directional: support people who hear about bugs fill out some form that eventually gets passed on (possibly via QA) to programmers who put it on their list of things to do. It was very different at Viaweb. Within a minute of hearing about a bug from a customer the support people could be standing next to a programmer hearing him say "Shit you're right it's a bug." It delighted the support people to hear that "you're right" from the hackers. They used to bring us bugs with the same expectant air as a cat bringing you a mouse it has just killed. It also made them more careful in judging the seriousness of a bug because now their honor was on the line.After we were bought by Yahoo the customer support people were moved far away from the programmers. It was only then that we realized that they were effectively QA and to some extent marketing as well. In addition to catching bugs they were the keepers of the knowledge of vaguer buglike things like features that confused users. 6 They were also a kind of proxy focus group we could ask them which of two new features users wanted more and they were always right.MoraleBeing able to release software immediately is a big motivator. Often as I was walking to work I would think of some change I wanted to make to the software and do it that day. This worked for bigger features as well. Even if something was going to take two weeks to write (few projects took longer) I knew I could see the effect in the software as soon as it was done.If I'd had to wait a year for the next release I would have shelved most of these ideas for a while at least. The thing about ideas though is that they lead to more ideas. Have you ever noticed that when you sit down to write something half the ideas that end up in it are ones you thought of while writing it The same thing happens with software. Working to implement one idea gives you more ideas. So shelving an idea costs you not only that delay in implementing it but also all the ideas that implementing it would have led to. In fact shelving an idea probably even inhibits new ideas: as you start to think of some new feature you catch sight of the shelf and think "but I already have a lot of new things I want to do for the next release."What big companies do instead of implementing features is plan them. At Viaweb we sometimes ran into trouble on this account. Investors and analysts would ask us what we had planned for the future. The truthful answer would have been we didn't have any plans. We had general ideas about things we wanted to improve but if we knew how we would have done it already. What were we going to do in the next six months Whatever looked like the biggest win. I don't know if I ever dared give this answer but that was the truth. Plans are just another word for ideas on the shelf. When we thought of good ideas we implemented them.At Viaweb as at many software companies most code had one definite owner. But when you owned something you really owned it: no one except the owner of a piece of software had to approve (or even know about) a release. There was no protection against breakage except the fear of looking like an idiot to one's peers and that was more than enough. I may have given the impression that we just blithely plowed forward writing code. We did go fast but we thought very carefully before we released software onto those servers. And paying attention is more important to reliability than moving slowly. Because he pays close attention a Navy pilot can land a 40 000 lb. aircraft at 140 miles per hour on a pitching carrier deck at night more safely than the average teenager can cut a bagel.This way of writing software is a double edged sword of course. It works a lot better for a small team of good trusted programmers than it would for a big company of mediocre ones where bad ideas are caught by committees instead of the people that had them.Brooks in ReverseFortunately Web based software does require fewer programmers. I once worked for a medium sized desktop software company that had over 100 people working in engineering as a whole. Only 13 of these were in product development. All the rest were working on releases ports and so on. With Web based software all you need (at most) are the 13 people because there are no releases ports and so on.Viaweb was written by just three people. 7 I was always under pressure to hire more because we wanted to get bought and we knew that buyers would have a hard time paying a high price for a company with only three programmers. (Solution: we hired more but created new projects for them.)When you can write software with fewer programmers it saves you more than money. As Fred Brooks pointed out in The Mythical Man Month adding people to a project tends to slow it down. The number of possible connections between developers grows exponentially with the size of the group. The larger the group the more time they'll spend in meetings negotiating how their software will work together and the more bugs they'll get from unforeseen interactions. Fortunately this process also works in reverse: as groups get smaller software development gets exponentially more efficient. I can't remember the programmers at Viaweb ever having an actual meeting. We never had more to say at any one time than we could say as we were walking to lunch.If there is a downside here it is that all the programmers have to be to some degree system administrators as well. When you're hosting software someone has to be watching the servers and in practice the only people who can do this properly are the ones who wrote the software. At Viaweb our system had so many components and changed so frequently that there was no definite border between software and infrastructure. Arbitrarily declaring such a border would have constrained our design choices. And so although we were constantly hoping that one day ("in a couple months") everything would be stable enough that we could hire someone whose job was just to worry about the servers it never happened.I don't think it could be any other way as long as you're still actively developing the product. Web based software is never going to be something you write check in and go home. It's a live thing running on your servers right now. A bad bug might not just crash one user's process it could crash them all. If a bug in your code corrupts some data on disk you have to fix it. And so on. We found that you don't have to watch the servers every minute (after the first year or so) but you definitely want to keep an eye on things you've changed recently. You don't release code late at night and then go home.Watching UsersWith server based software you're in closer touch with your code. You can also be in closer touch with your users. Intuit is famous for introducing themselves to customers at retail stores and asking to follow them home. If you've ever watched someone use your software for the first time you know what surprises must have awaited them.Software should do what users think it will. But you can't have any idea what users will be thinking believe me until you watch them. And server based software gives you unprecedented information about their behavior. You're not limited to small artificial focus groups. You can see every click made by every user. You have to consider carefully what you're going to look at because you don't want to violate users' privacy but even the most general statistical sampling can be very useful.When you have the users on your server you don't have to rely on benchmarks for example. Benchmarks are simulated users. With server based software you can watch actual users. To decide what to optimize just log into a server and see what's consuming all the CPU. And you know when to stop optimizing too: we eventually got the Viaweb editor to the point where it was memory bound rather than CPU bound and since there was nothing we could do to decrease the size of users' data (well nothing easy) we knew we might as well stop there.Efficiency matters for server based software because you're paying for the hardware. The number of users you can support per server is the divisor of your capital cost so if you can make your software very efficient you can undersell competitors and still make a profit. At Viaweb we got the capital cost per user down to about 5. It would be less now probably less than the cost of sending them the first month's bill. Hardware is free now if your software is reasonably efficient.Watching users can guide you in design as well as optimization. Viaweb had a scripting language called RTML that let advanced users define their own page styles. We found that RTML became a kind of suggestion box because users only used it when the predefined page styles couldn't do what they wanted. Originally the editor put button bars across the page for example but after a number of users used RTML to put buttons down the left side we made that an option (in fact the default) in the predefined page styles.Finally by watching users you can often tell when they're in trouble. And since the customer is always right that's a sign of something you need to fix. At Viaweb the key to getting users was the online test drive. It was not just a series of slides built by marketing people. In our test drive users actually used the software. It took about five minutes and at the end of it they had built a real working store.test drive is still online but now they make you fill out several forms and don't tell you that you've created a working store. If you try the test drive here is how to find your store: if you choose foo as your store id the finished store will be at store.yahoo.com foo. The test drive was the way we got nearly all our new users. I think it will be the same for most Web based applications. If users can get through a test drive successfully they'll like the product. If they get confused or bored they won't. So anything we could do to get more people through the test drive would increase our growth rate.I studied click trails of people taking the test drive and found that at a certain step they would get confused and click on the browser's Back button. (If you try writing Web based applications you'll find that the Back button becomes one of your most interesting philosophical problems.) So I added a message at that point telling users that they were nearly finished and reminding them not to click on the Back button. Another great thing about Web based software is that you get instant feedback from changes: the number of people completing the test drive rose immediately from 60 to 90 . And since the number of new users was a function of the number of completed test drives our revenue growth increased by 50 just from that change.MoneyIn the early 1990s I read an article in which someone said that software was a subscription business. At first this seemed a very cynical statement. But later I realized that it reflects reality: software development is an ongoing process. I think it's cleaner if you openly charge subscription fees instead of forcing people to keep buying and installing new versions so that they'll keep paying you. And fortunately subscriptions are the natural way to bill for Web based applications.Hosting applications is an area where companies will play a role that is not likely to be filled by freeware. Hosting applications is a lot of stress and has real expenses. No one is going to want to do it for free.For companies Web based applications are an ideal source of revenue. Instead of starting each quarter with a blank slate you have a recurring revenue stream. Because your software evolves gradually you don't have to worry that a new model will flop there never need be a new model per se and if you do something to the software that users hate you'll know right away. You have no trouble with uncollectable bills if someone won't pay you can just turn off the service. And there is no possibility of piracy.That last "advantage" may turn out to be a problem. Some amount of piracy is to the advantage of software companies. If some user really would not have bought your software at any price you haven't lost anything if he uses a pirated copy. In fact you gain because he is one more user helping to make your software the standard or who might buy a copy later when he graduates from high school.When they can companies like to do something called price discrimination which means charging each customer as much as they can afford. 8 Software is particularly suitable for price discrimination because the marginal cost is close to zero. This is why some software costs more to run on Suns than on Intel boxes: a company that uses Suns is not interested in saving money and can safely be charged more. Piracy is effectively the lowest tier of price discrimination. I think that software companies understand this and deliberately turn a blind eye to some kinds of piracy. 9 With server based software they are going to have to come up with some other solution.Web based software sells well especially in comparison to desktop software because it's easy to buy. You might think that people decide to buy something and then buy it as two separate steps. That's what I thought before Viaweb to the extent I thought about the question at all. In fact the second step can propagate back into the first: if something is hard to buy people will change their mind about whether they wanted it. And vice versa: you'll sell more of something when it's easy to buy. I buy more books because Amazon exists. Web based software is just about the easiest thing in the world to buy especially if you have just done an online demo. Users should not have to do much more than enter a credit card number. (Make them do more at your peril.) Sometimes Web based software is offered through ISPs acting as resellers. This is a bad idea. You have to be administering the servers because you need to be constantly improving both hardware and software. If you give up direct control of the servers you give up most of the advantages of developing Web based applications.Several of our competitors shot themselves in the foot this way usually I think because they were overrun by suits who were excited about this huge potential channel and didn't realize that it would ruin the product they hoped to sell through it. Selling Web based software through ISPs is like selling sushi through vending machines.CustomersWho will the customers be At Viaweb they were initially individuals and smaller companies and I think this will be the rule with Web based applications. These are the users who are ready to try new things partly because they're more flexible and partly because they want the lower costs of new technology.Web based applications will often be the best thing for big companies too (though they'll be slow to realize it). The best intranet is the Internet. If a company uses true Web based applications the software will work better the servers will be better administered and employees will have access to the system from anywhere.The argument against this approach usually hinges on security: if access is easier for employees it will be for bad guys too. Some larger merchants were reluctant to use Viaweb because they thought customers' credit card information would be safer on their own servers. It was not easy to make this point diplomatically but in fact the data was almost certainly safer in our hands than theirs. Who can hire better people to manage security a technology startup whose whole business is running servers or a clothing retailer Not only did we have better people worrying about security we worried more about it. If someone broke into the clothing retailer's servers it would affect at most one merchant could probably be hushed up and in the worst case might get one person fired. If someone broke into ours it could affect thousands of merchants would probably end up as news on CNet and could put us out of business.If you want to keep your money safe do you keep it under your mattress at home or put it in a bank This argument applies to every aspect of server administration: not just security but uptime bandwidth load management backups etc. Our existence depended on doing these things right. Server problems were the big no no for us like a dangerous toy would be for a toy maker or a salmonella outbreak for a food processor.A big company that uses Web based applications is to that extent outsourcing IT. Drastic as it sounds I think this is generally a good idea. Companies are likely to get better service this way than they would from in house system administrators. System administrators can become cranky and unresponsive because they're not directly exposed to competitive pressure: a salesman has to deal with customers and a developer has to deal with competitors' software but a system administrator like an old bachelor has few external forces to keep him in line. 10 At Viaweb we had external forces in plenty to keep us in line. The people calling us were customers not just co workers. If a server got wedged we jumped just thinking about it gives me a jolt of adrenaline years later.So Web based applications will ordinarily be the right answer for big companies too. They will be the last to realize it however just as they were with desktop computers. And partly for the same reason: it will be worth a lot of money to convince big companies that they need something more expensive.There is always a tendency for rich customers to buy expensive solutions even when cheap solutions are better because the people offering expensive solutions can spend more to sell them. At Viaweb we were always up against this. We lost several high end merchants to Web consulting firms who convinced them they'd be better off if they paid half a million dollars for a custom made online store on their own server. They were as a rule not better off as more than one discovered when Christmas shopping season came around and loads rose on their server. Viaweb was a lot more sophisticated than what most of these merchants got but we couldn't afford to tell them. At 300 a month we couldn't afford to send a team of well dressed and authoritative sounding people to make presentations to customers.A large part of what big companies pay extra for is the cost of selling expensive things to them. (If the Defense Department pays a thousand dollars for toilet seats it's partly because it costs a lot to sell toilet seats for a thousand dollars.) And this is one reason intranet software will continue to thrive even though it is probably a bad idea. It's simply more expensive. There is nothing you can do about this conundrum so the best plan is to go for the smaller customers first. The rest will come in time.Son of ServerRunning software on the server is nothing new. In fact it's the old model: mainframe applications are all server based. If server based software is such a good idea why did it lose last time Why did desktop computers eclipse mainframes At first desktop computers didn't look like much of a threat. The first users were all hackers or hobbyists as they were called then. They liked microcomputers because they were cheap. For the first time you could have your own computer. The phrase "personal computer" is part of the language now but when it was first used it had a deliberately audacious sound like the phrase "personal satellite" would today.Why did desktop computers take over I think it was because they had better software. And I think the reason microcomputer software was better was that it could be written by small companies.I don't think many people realize how fragile and tentative startups are in the earliest stage. Many startups begin almost by accident as a couple guys either with day jobs or in school writing a prototype of something that might if it looks promising turn into a company. At this larval stage any significant obstacle will stop the startup dead in its tracks. Writing mainframe software required too much commitment up front. Development machines were expensive and because the customers would be big companies you'd need an impressive looking sales force to sell it to them. Starting a startup to write mainframe software would be a much more serious undertaking than just hacking something together on your Apple II in the evenings. And so you didn't get a lot of startups writing mainframe applications.The arrival of desktop computers inspired a lot of new software because writing applications for them seemed an attainable goal to larval startups. Development was cheap and the customers would be individual people that you could reach through computer stores or even by mail order.The application that pushed desktop computers out into the mainstream was VisiCalc the first spreadsheet. It was written by two guys working in an attic and yet did things no mainframe software could do. 11 VisiCalc was such an advance in its time that people bought Apple IIs just to run it. And this was the beginning of a trend: desktop computers won because startups wrote software for them.It looks as if server based software will be good this time around because startups will write it. Computers are so cheap now that you can get started as we did using a desktop computer as a server. Inexpensive processors have eaten the workstation market (you rarely even hear the word now) and are most of the way through the server market Yahoo's servers which deal with loads as high as any on the Internet all have the same inexpensive Intel processors that you have in your desktop machine. And once you've written the software all you need to sell it is a Web site. Nearly all our users came direct to our site through word of mouth and references in the press. 12 Viaweb was a typical larval startup. We were terrified of starting a company and for the first few months comforted ourselves by treating the whole thing as an experiment that we might call off at any moment. Fortunately there were few obstacles except technical ones. While we were writing the software our Web server was the same desktop machine we used for development connected to the outside world by a dialup line. Our only expenses in that phase were food and rent.There is all the more reason for startups to write Web based software now because writing desktop software has become a lot less fun. If you want to write desktop software now you do it on Microsoft's terms calling their APIs and working around their buggy OS. And if you manage to write something that takes off you may find that you were merely doing market research for Microsoft.If a company wants to make a platform that startups will build on they have to make it something that hackers themselves will want to use. That means it has to be inexpensive and well designed. The Mac was popular with hackers when it first came out and a lot of them wrote software for it. 13 You see this less with Windows because hackers don't use it. The kind of people who are good at writing software tend to be running Linux or FreeBSD now.I don't think we would have started a startup to write desktop software because desktop software has to run on Windows and before we could write software for Windows we'd have to use it. The Web let us do an end run around Windows and deliver software running on Unix direct to users through the browser. That is a liberating prospect a lot like the arrival of PCs twenty five years ago.MicrosoftBack when desktop computers arrived IBM was the giant that everyone was afraid of. It's hard to imagine now but I remember the feeling very well. Now the frightening giant is Microsoft and I don't think they are as blind to the threat facing them as IBM was. After all Microsoft deliberately built their business in IBM's blind spot.I mentioned earlier that my mother doesn't really need a desktop computer. Most users probably don't. That's a problem for Microsoft and they know it. If applications run on remote servers no one needs Windows. What will Microsoft do Will they be able to use their control of the desktop to prevent or constrain this new generation of software My guess is that Microsoft will develop some kind of server desktop hybrid where the operating system works together with servers they control. At a minimum files will be centrally available for users who want that. I don't expect Microsoft to go all the way to the extreme of doing the computations on the server with only a browser for a client if they can avoid it. If you only need a browser for a client you don't need Microsoft on the client and if Microsoft doesn't control the client they can't push users towards their server based applications.I think Microsoft will have a hard time keeping the genie in the bottle. There will be too many different types of clients for them to control them all. And if Microsoft's applications only work with some clients competitors will be able to trump them by offering applications that work from any client. 14 In a world of Web based applications there is no automatic place for Microsoft. They may succeed in making themselves a place but I don't think they'll dominate this new world as they did the world of desktop applications.It's not so much that a competitor will trip them up as that they will trip over themselves. With the rise of Web based software they will be facing not just technical problems but their own wishful thinking. What they need to do is cannibalize their existing business and I can't see them facing that. The same single mindedness that has brought them this far will now be working against them. IBM was in exactly the same situation and they could not master it. IBM made a late and half hearted entry into the microcomputer business because they were ambivalent about threatening their cash cow mainframe computing. Microsoft will likewise be hampered by wanting to save the desktop. A cash cow can be a damned heavy monkey on your back.I'm not saying that no one will dominate server based applications. Someone probably will eventually. But I think that there will be a good long period of cheerful chaos just as there was in the early days of microcomputers. That was a good time for startups. Lots of small companies flourished and did it by making cool things.Startups but More SoThe classic startup is fast and informal with few people and little money. Those few people work very hard and technology magnifies the effect of the decisions they make. If they win they win big.In a startup writing Web based applications everything you associate with startups is taken to an extreme. You can write and launch a product with even fewer people and even less money. You have to be even faster and you can get away with being more informal. You can literally launch your product as three guys sitting in the living room of an apartment and a server collocated at an ISP. We did.Over time the teams have gotten smaller faster and more informal. In 1960 software development meant a roomful of men with horn rimmed glasses and narrow black neckties industriously writing ten lines of code a day on IBM coding forms. In 1980 it was a team of eight to ten people wearing jeans to the office and typing into vt100s. Now it's a couple of guys sitting in a living room with laptops. (And jeans turn out not to be the last word in informality.)Startups are stressful and this unfortunately is also taken to an extreme with Web based applications. Many software companies especially at the beginning have periods where the developers slept under their desks and so on. The alarming thing about Web based software is that there is nothing to prevent this becoming the default. The stories about sleeping under desks usually end: then at last we shipped it and we all went home and slept for a week. Web based software never ships. You can work 16 hour days for as long as you want to. And because you can and your competitors can you tend to be forced to. You can so you must. It's Parkinson's Law running in reverse.The worst thing is not the hours but the responsibility. Programmers and system administrators traditionally each have their own separate worries. Programmers have to worry about bugs and system administrators have to worry about infrastructure. Programmers may spend a long day up to their elbows in source code but at some point they get to go home and forget about it. System administrators never quite leave the job behind but when they do get paged at 4:00 AM they don't usually have to do anything very complicated. With Web based applications these two kinds of stress get combined. The programmers become system administrators but without the sharply defined limits that ordinarily make the job bearable.At Viaweb we spent the first six months just writing software. We worked the usual long hours of an early startup. In a desktop software company this would have been the part where we were working hard but it felt like a vacation compared to the next phase when we took users onto our server. The second biggest benefit of selling Viaweb to Yahoo (after the money) was to be able to dump ultimate responsibility for the whole thing onto the shoulders of a big company.Desktop software forces users to become system administrators. Web based software forces programmers to. There is less stress in total but more for the programmers. That's not necessarily bad news. If you're a startup competing with a big company it's good news. 15 Web based applications offer a straightforward way to outwork your competitors. No startup asks for more.Just Good EnoughOne thing that might deter you from writing Web based applications is the lameness of Web pages as a UI. That is a problem I admit. There were a few things we would have really liked to add to HTML and HTTP. What matters though is that Web pages are just good enough.There is a parallel here with the first microcomputers. The processors in those machines weren't actually intended to be the CPUs of computers. They were designed to be used in things like traffic lights. But guys like Ed Roberts who designed the Altair realized that they were just good enough. You could combine one of these chips with some memory (256 bytes in the first Altair) and front panel switches and you'd have a working computer. Being able to have your own computer was so exciting that there were plenty of people who wanted to buy them however limited.Web pages weren't designed to be a UI for applications but they're just good enough. And for a significant number of users software that you can use from any browser will be enough of a win in itself to outweigh any awkwardness in the UI. Maybe you can't write the best looking spreadsheet using HTML but you can write a spreadsheet that several people can use simultaneously from different locations without special client software or that can incorporate live data feeds or that can page you when certain conditions are triggered. More importantly you can write new kinds of applications that don't even have names yet. VisiCalc was not merely a microcomputer version of a mainframe application after all it was a new type of application.Of course server based applications don't have to be Web based. You could have some other kind of client. But I'm pretty sure that's a bad idea. It would be very convenient if you could assume that everyone would install your client so convenient that you could easily convince yourself that they all would but if they don't you're hosed. Because Web based software assumes nothing about the client it will work anywhere the Web works. That's a big advantage already and the advantage will grow as new Web devices proliferate. Users will like you because your software just works and your life will be easier because you won't have to tweak it for every new client. 16 I feel like I've watched the evolution of the Web as closely as anyone and I can't predict what's going to happen with clients. Convergence is probably coming but where I can't pick a winner. One thing I can predict is conflict between AOL and Microsoft. Whatever Microsoft's .NET turns out to be it will probably involve connecting the desktop to servers. Unless AOL fights back they will either be pushed aside or turned into a pipe between Microsoft client and server software. If Microsoft and AOL get into a client war the only thing sure to work on both will be browsing the Web meaning Web based applications will be the only kind that work everywhere.How will it all play out I don't know. And you don't have to know if you bet on Web based applications. No one can break that without breaking browsing. The Web may not be the only way to deliver software but it's one that works now and will continue to work for a long time. Web based applications are cheap to develop and easy for even the smallest startup to deliver. They're a lot of work and of a particularly stressful kind but that only makes the odds better for startups.Why Not E. B. White was amused to learn from a farmer friend that many electrified fences don't have any current running through them. The cows apparently learn to stay away from them and after that you don't need the current. "Rise up cows " he wrote "Take your liberty while despots snore "If you're a hacker who has thought of one day starting a startup there are probably two things keeping you from doing it. One is that you don't know anything about business. The other is that you're afraid of competition. Neither of these fences have any current in them.There are only two things you have to know about business: build something users love and make more than you spend. If you get these two right you'll be ahead of most startups. You can figure out the rest as you go.You may not at first make more than you spend but as long as the gap is closing fast enough you'll be ok. If you start out underfunded it will at least encourage a habit of frugality. The less you spend the easier it is to make more than you spend. Fortunately it can be very cheap to launch a Web based application. We launched on under 10 000 and it would be even cheaper today. We had to spend thousands on a server and thousands more to get SSL. (The only company selling SSL software at the time was Netscape.) Now you can rent a much more powerful server with SSL included for less than we paid for bandwidth alone. You could launch a Web based application now for less than the cost of a fancy office chair.As for building something users love here are some general tips. Start by making something clean and simple that you would want to use yourself. Get a version 1.0 out fast then continue to improve the software listening closely to the users as you do. The customer is always right but different customers are right about different things the least sophisticated users show you what you need to simplify and clarify and the most sophisticated tell you what features you need to add. The best thing software can be is easy but the way to do this is to get the defaults right not to limit users' choices. Don't get complacent if your competitors' software is lame the standard to compare your software to is what it could be not what your current competitors happen to have. Use your software yourself all the time. Viaweb was supposed to be an online store builder but we used it to make our own site too. Don't listen to marketing people or designers or product managers just because of their job titles. If they have good ideas use them but it's up to you to decide software has to be designed by hackers who understand design not designers who know a little about software. If you can't design software as well as implement it don't start a startup.Now let's talk about competition. What you're afraid of is not presumably groups of hackers like you but actual companies with offices and business plans and salesmen and so on right Well they are more afraid of you than you are of them and they're right. It's a lot easier for a couple of hackers to figure out how to rent office space or hire sales people than it is for a company of any size to get software written. I've been on both sides and I know. When Viaweb was bought by Yahoo I suddenly found myself working for a big company and it was like trying to run through waist deep water.I don't mean to disparage Yahoo. They had some good hackers and the top management were real butt kickers. For a big company they were exceptional. But they were still only about a tenth as productive as a small startup. No big company can do much better than that. What's scary about Microsoft is that a company so big can develop software at all. They're like a mountain that can walk.Don't be intimidated. You can do as much that Microsoft can't as they can do that you can't. And no one can stop you. You don't have to ask anyone's permission to develop Web based applications. You don't have to do licensing deals or get shelf space in retail stores or grovel to have your application bundled with the OS. You can deliver software right to the browser and no one can get between you and potential users without preventing them from browsing the Web.You may not believe it but I promise you Microsoft is scared of you. The complacent middle managers may not be but Bill is because he was you once back in 1975 the last time a new way of delivering software appeared.Notes 1 Realizing that much of the money is in the services companies building lightweight clients have usually tried to combine the hardware with an online service. This approach has not worked well partly because you need two different kinds of companies to build consumer electronics and to run an online service and partly because users hate the idea. Giving away the razor and making money on the blades may work for Gillette but a razor is much smaller commitment than a Web terminal. Cell phone handset makers are satisfied to sell hardware without trying to capture the service revenue as well. That should probably be the model for Internet clients too. If someone just sold a nice looking little box with a Web browser that you could use to connect through any ISP every technophobe in the country would buy one. 2 Security always depends more on not screwing up than any design decision but the nature of server based software will make developers pay more attention to not screwing up. Compromising a server could cause such damage that ASPs (that want to stay in business) are likely to be careful about security. 3 In 1995 when we started Viaweb Java applets were supposed to be the technology everyone was going to use to develop server based applications. Applets seemed to us an old fashioned idea. Download programs to run on the client Simpler just to go all the way and run the programs on the server. We wasted little time on applets but countless other startups must have been lured into this tar pit. Few can have escaped alive or Microsoft could not have gotten away with dropping Java in the most recent version of Explorer. 4 This point is due to Trevor Blackwell who adds "the cost of writing software goes up more than linearly with its size. Perhaps this is mainly due to fixing old bugs and the cost can be more linear if all bugs are found quickly." 5 The hardest kind of bug to find may be a variant of compound bug where one bug happens to compensate for another. When you fix one bug the other becomes visible. But it will seem as if the fix is at fault since that was the last thing you changed. 6 Within Viaweb we once had a contest to describe the worst thing about our software. Two customer support people tied for first prize with entries I still shiver to recall. We fixed both problems immediately. 7 Robert Morris wrote the ordering system which shoppers used to place orders. Trevor Blackwell wrote the image generator and the manager which merchants used to retrieve orders view statistics and configure domain names etc. I wrote the editor which merchants used to build their sites. The ordering system and image generator were written in C and C the manager mostly in Perl and the editor in Lisp. 8 Price discrimination is so pervasive (how often have you heard a retailer claim that their buying power meant lower prices for you ) that I was surprised to find it was outlawed in the U.S. by the Robinson Patman Act of 1936. This law does not appear to be vigorously enforced. 9 In No Logo Naomi Klein says that clothing brands favored by "urban youth" do not try too hard to prevent shoplifting because in their target market the shoplifters are also the fashion leaders. 10 Companies often wonder what to outsource and what not to. One possible answer: outsource any job that's not directly exposed to competitive pressure because outsourcing it will thereby expose it to competitive pressure. 11 The two guys were Dan Bricklin and Bob Frankston. Dan wrote a prototype in Basic in a couple days then over the course of the next year they worked together (mostly at night) to make a more powerful version written in 6502 machine language. Dan was at Harvard Business School at the time and Bob nominally had a day job writing software. "There was no great risk in doing a business " Bob wrote "If it failed it failed. No big deal." 12 It's not quite as easy as I make it sound. It took a painfully long time for word of mouth to get going and we did not start to get a lot of press coverage until we hired a PR firm (admittedly the best in the business) for 16 000 per month. However it was true that the only significant channel was our own Web site. 13 If the Mac was so great why did it lose Cost again. Microsoft concentrated on the software business and unleashed a swarm of cheap component suppliers on Apple hardware. It did not help either that suits took over during a critical period. 14 One thing that would help Web based applications and help keep the next generation of software from being overshadowed by Microsoft would be a good open source browser. Mozilla is open source but seems to have suffered from having been corporate software for so long. A small fast browser that was actively maintained would be a great thing in itself and would probably also encourage companies to build little Web appliances.Among other things a proper open source browser would cause HTTP and HTML to continue to evolve (as e.g. Perl has). It would help Web based applications greatly to be able to distinguish between selecting a link and following it all you'd need to do this would be a trivial enhancement of HTTP to allow multiple urls in a request. Cascading menus would also be good.If you want to change the world write a new Mosaic. Think it's too late In 1998 a lot of people thought it was too late to launch a new search engine but Google proved them wrong. There is always room for something new if the current options suck enough. Make sure it works on all the free OSes first new things start with their users. 15 Trevor Blackwell who probably knows more about this from personal experience than anyone writes:"I would go farther in saying that because server based software is so hard on the programmers it causes a fundamental economic shift away from large companies. It requires the kind of intensity and dedication from programmers that they will only be willing to provide when it's their own company. Software companies can hire skilled people to work in a not too demanding environment and can hire unskilled people to endure hardships but they can't hire highly skilled people to bust their asses. Since capital is no longer needed big companies have little to bring to the table." 16 In the original version of this essay I advised avoiding Javascript. That was a good plan in 2001 but Javascript now works. lot about different browser versions." Microsoft may start to embrace and extend Javascript or even can it like Java. And when you start to be able to browse actual Web pages on your cell phone or PDA (or toaster) who knows if they'll even support it Thanks to Sarah Harlin Trevor Blackwell Robert Morris Eric Raymond Ken Anderson and Dan Giffin for reading drafts of this paper to Dan Bricklin and Bob Frankston for information about VisiCalc and again to Ken Anderson for inviting me to speak at BBN. You'll find this essay and 14 others in Hackers Painters. 
No one VC or angel has invested in more of the top startups than Ron Conway. He knows what happened in every deal in the Valley half the time because he arranged it.And yet he's a super nice guy. In fact nice is not the word. Ronco is good. I know of zero instances in which he has behaved badly. It's hard even to imagine.When I first came to Silicon Valley I thought "How lucky that someone so powerful is so benevolent." But gradually I realized it wasn't luck. It was by being benevolent that Ronco became so powerful. All the deals he gets to invest in come to him through referrals. Google did. Facebook did. Twitter was a referral from Evan Williams himself. And the reason so many people refer deals to him is that he's proven himself to be a good guy.Good does not mean being a pushover. I would not want to face an angry Ronco. But if Ron's angry at you it's because you did something wrong. Ron is so old school he's Old Testament. He will smite you in his just wrath but there's no malice in it.In almost every domain there are advantages to seeming good. It makes people trust you. But actually being good is an expensive way to seem good. To an amoral person it might seem to be overkill.In some fields it might be but apparently not in the startup world. Though plenty of investors are jerks there is a clear trend among them: the most successful investors are also the most upstanding. 1 It was not always this way. I would not feel confident saying that about investors twenty years ago.What changed The startup world became more transparent and more unpredictable. Both make it harder to seem good without actually being good.It's obvious why transparency has that effect. When an investor maltreats a founder now it gets out. Maybe not all the way to the press but other founders hear about it and that means that investor starts to lose deals. 2 The effect of unpredictability is more subtle. It increases the work of being inconsistent. If you're going to be two faced you have to know who you should be nice to and who you can get away with being nasty to. In the startup world things change so rapidly that you can't tell. The random college kid you talk to today might in a couple years be the CEO of the hottest startup in the Valley. If you can't tell who to be nice to you have to be nice to everyone. And probably the only people who can manage that are the people who are genuinely good.In a sufficiently connected and unpredictable world you can't seem good without being good.As often happens Ron discovered how to be the investor of the future by accident. He didn't foresee the future of startup investing realize it would pay to be upstanding and force himself to behave that way. It would feel unnatural to him to behave any other way. He was already living in the future.Fortunately that future is not limited to the startup world. The startup world is more transparent and unpredictable than most but almost everywhere the trend is in that direction.Notes 1 I'm not saying that if you sort investors by benevolence you've also sorted them by returns but rather that if you do a scatterplot with benevolence on the x axis and returns on the y you'd see a clear upward trend. 2 Y Combinator in particular because it aggregates data from so many startups has a pretty comprehensive view of investor behavior. Thanks to Sam Altman and Jessica Livingston for reading drafts of this.
 (I wrote this article to help myself understand exactly what McCarthy discovered. You don't need to know this stuff to program in Lisp but it should be helpful to anyone who wants to understand the essence of Lisp both in the sense of its origins and its semantic core. The fact that it has such a core is one of Lisp's distinguishing features and the reason why unlike other languages Lisp has dialects.)In 1960 John McCarthy published a remarkable paper in which he did for programming something like what Euclid did for geometry. He showed how given a handful of simple operators and a notation for functions you can build a whole programming language. He called this language Lisp for "List Processing " because one of his key ideas was to use a simple data structure called a list for both code and data.It's worth understanding what McCarthy discovered not just as a landmark in the history of computers but as a model for what programming is tending to become in our own time. It seems to me that there have been two really clean consistent models of programming so far: the C model and the Lisp model. These two seem points of high ground with swampy lowlands between them. As computers have grown more powerful the new languages being developed have been moving steadily toward the Lisp model. A popular recipe for new programming languages in the past 20 years has been to take the C model of computing and add to it piecemeal parts taken from the Lisp model like runtime typing and garbage collection.In this article I'm going to try to explain in the simplest possible terms what McCarthy discovered. The point is not just to learn about an interesting theoretical result someone figured out forty years ago but to show where languages are heading. The unusual thing about Lisp in fact the defining quality of Lisp is that it can be written in itself. To understand what McCarthy meant by this we're going to retrace his steps with his mathematical notation translated into running Common Lisp code.
I recently got an email from a founder that helped me understand something important: why it's safe for startup founders to be nice people.I grew up with a cartoon idea of a very successful businessman (in the cartoon it was always a man): a rapacious cigar smoking table thumping guy in his fifties who wins by exercising power and isn't too fussy about how. As I've written before one of the things that has surprised me most about startups is how few of the most successful founders are like that. Maybe successful people in other industries are I don't know but not startup founders. 1 I knew this empirically but I never saw the math of why till I got this founder's email. In it he said he worried that he was fundamentally soft hearted and tended to give away too much for free. He thought perhaps he needed "a little dose of sociopath ness."I told him not to worry about it because so long as he built something good enough to spread by word of mouth he'd have a hyperlinear growth curve. If he was bad at extracting money from people at worst this curve would be some constant multiple less than 1 of what it might have been. But a constant multiple of any curve is exactly the same shape. The numbers on the Y axis are smaller but the curve is just as steep and when anything grows at the rate of a successful startup the Y axis will take care of itself.Some examples will make this clear. Suppose your company is making 1000 a month now and you've made something so great that it's growing at 5 a week. Two years from now you'll be making about 160k a month.Now suppose you're so un rapacious that you only extract half as much from your users as you could. That means two years later you'll be making 80k a month instead of 160k. How far behind are you How long will it take to catch up with where you'd have been if you were extracting every penny A mere 15 weeks. After two years the un rapacious founder is only 3.5 months behind the rapacious one. 2 If you're going to optimize a number the one to choose is your growth rate. Suppose as before that you only extract half as much from users as you could but that you're able to grow 6 a week instead of 5 . Now how are you doing compared to the rapacious founder after two years You're already ahead mdash 214k a month versus 160k mdash and pulling away fast. In another year you'll be making 4.4 million a month to the rapacious founder's 2 million.Obviously one case where it would help to be rapacious is when growth depends on that. What makes startups different is that usually it doesn't. Startups usually win by making something so great that people recommend it to their friends. And being rapacious not only doesn't help you do that but probably hurts. 3 The reason startup founders can safely be nice is that making great things is compounded and rapacity isn't.So if you're a founder here's a deal you can make with yourself that will both make you happy and make your company successful. Tell yourself you can be as nice as you want so long as you work hard on your growth rate to compensate. Most successful startups make that tradeoff unconsciously. Maybe if you do it consciously you'll do it even better.Notes 1 Many think successful startup founders are driven by money. In fact the secret weapon of the most successful founders is that they aren't. If they were they'd have taken one of the acquisition offers that every fast growing startup gets on the way up. What drives the most successful founders is the same thing that drives most people who make things: the company is their project. 2 In fact since 2 8776 1.05 15 the un rapacious founder is always 15 weeks behind the rapacious one. 3 The other reason it might help to be good at squeezing money out of customers is that startups usually lose money at first and making more per customer makes it easier to get to profitability before your initial funding runs out. But while it is very common for startups to die from running through their initial funding and then being unable to raise more the underlying cause is usually slow growth or excessive spending rather than insufficient effort to extract money from existing customers.Thanks to Sam Altman Harj Taggar Jessica Livingston and Geoff Ralston for reading drafts of this and to Randall Bennett for being such a nice guy.
(This essay is about heresy: how to think forbidden thoughts and what to do with them. The latter was till recently something only a small elite had to think about. Now we all have to because the Web has made us all publishers.) Have you ever seen an old photo of yourself and been embarrassed at the way you looked Did we actually dress like that We did. And we had no idea how silly we looked. It's the nature of fashion to be invisible in the same way the movement of the earth is invisible to all of us riding on it.What scares me is that there are moral fashions too. They're just as arbitrary and just as invisible to most people. But they're much more dangerous. Fashion is mistaken for good design moral fashion is mistaken for good. Dressing oddly gets you laughed at. Violating moral fashions can get you fired ostracized imprisoned or even killed.If you could travel back in a time machine one thing would be true no matter where you went: you'd have to watch what you said. Opinions we consider harmless could have gotten you in big trouble. I've already said at least one thing that would have gotten me in big trouble in most of Europe in the seventeenth century and did get Galileo in big trouble when he said it mdash that the earth moves. 1 trouble. They say improper things for the same reason they dress unfashionably and have good ideas: convention has less hold over them. It seems to be a constant throughout history: In every period people believed things that were just ridiculous and believed them so strongly that you would have gotten in terrible trouble for saying otherwise.Is our time any different To anyone who has read any amount of history the answer is almost certainly no. It would be a remarkable coincidence if ours were the first era to get everything just right.It's tantalizing to think we believe things that people in the future will find ridiculous. What would someone coming back to visit us in a time machine have to be careful not to say That's what I want to study here. But I want to do more than just shock everyone with the heresy du jour. I want to find general recipes for discovering what you can't say in any era.The Conformist TestLet's start with a test: Do you have any opinions that you would be reluctant to express in front of a group of your peers If the answer is no you might want to stop and think about that. If everything you believe is something you're supposed to believe could that possibly be a coincidence Odds are it isn't. Odds are you just think whatever you're told.The other alternative would be that you independently considered every question and came up with the exact same answers that are now considered acceptable. That seems unlikely because you'd also have to make the same mistakes. Mapmakers deliberately put slight mistakes in their maps so they can tell when someone copies them. If another map has the same mistake that's very convincing evidence.Like every other era in history our moral map almost certainly contains a few mistakes. And anyone who makes the same mistakes probably didn't do it by accident. It would be like someone claiming they had independently decided in 1972 that bell bottom jeans were a good idea.If you believe everything you're supposed to now how can you be sure you wouldn't also have believed everything you were supposed to if you had grown up among the plantation owners of the pre Civil War South or in Germany in the 1930s mdash or among the Mongols in 1200 for that matter Odds are you would have.Back in the era of terms like "well adjusted " the idea seemed to be that there was something wrong with you if you thought things you didn't dare say out loud. This seems backward. Almost certainly there is something wrong with you if you don't think things you don't dare say out loud.TroubleWhat can't we say One way to find these ideas is simply to look at things people do say and get in trouble for. 2 Of course we're not just looking for things we can't say. We're looking for things we can't say that are true or at least have enough chance of being true that the question should remain open. But many of the things people get in trouble for saying probably do make it over this second lower threshold. No one gets in trouble for saying that 2 2 is 5 or that people in Pittsburgh are ten feet tall. Such obviously false statements might be treated as jokes or at worst as evidence of insanity but they are not likely to make anyone mad. The statements that make people mad are the ones they worry might be believed. I suspect the statements that make people maddest are those they worry might be true.If Galileo had said that people in Padua were ten feet tall he would have been regarded as a harmless eccentric. Saying the earth orbited the sun was another matter. The church knew this would set people thinking.Certainly as we look back on the past this rule of thumb works well. A lot of the statements people got in trouble for seem harmless now. So it's likely that visitors from the future would agree with at least some of the statements that get people in trouble today. Do we have no Galileos Not likely.To find them keep track of opinions that get people in trouble and start asking could this be true Ok it may be heretical (or whatever modern equivalent) but might it also be true HeresyThis won't get us all the answers though. What if no one happens to have gotten in trouble for a particular idea yet What if some idea would be so radioactively controversial that no one would dare express it in public How can we find these too Another approach is to follow that word heresy. In every period of history there seem to have been labels that got applied to statements to shoot them down before anyone had a chance to ask if they were true or not. "Blasphemy" "sacrilege" and "heresy" were such labels for a good part of western history as in more recent times "indecent" "improper" and "unamerican" have been. By now these labels have lost their sting. They always do. By now they're mostly used ironically. But in their time they had real force.The word "defeatist" for example has no particular political connotations now. But in Germany in 1917 it was a weapon used by Ludendorff in a purge of those who favored a negotiated peace. At the start of World War II it was used extensively by Churchill and his supporters to silence their opponents. In 1940 any argument against Churchill's aggressive policy was "defeatist". Was it right or wrong Ideally no one got far enough to ask that.We have such labels today of course quite a lot of them. Many come from the left including the startlingly general "inappropriate" but the most recent comes from the right: "divisive" which the current administration uses to silence opponents on almost any topic. We have such labels today of course quite a lot of them from the all purpose "inappropriate" to the dreaded "divisive." In any period it should be easy to figure out what such labels are simply by looking at what people call ideas they disagree with besides untrue. When a politician says his opponent is mistaken that's a straightforward criticism but when he attacks a statement as "divisive" or "racially insensitive" instead of arguing that it's false we should start paying attention.So another way to figure out which of our taboos future generations will laugh at is to start with the labels. Take a label mdash "sexist" for example mdash and try to think of some ideas that would be called that. Then for each ask might this be true Just start listing ideas at random Yes because they won't really be random. The ideas that come to mind first will be the most plausible ones. They'll be things you've already noticed but didn't let yourself think.In 1989 some clever researchers tracked the eye movements of radiologists as they scanned chest images for signs of lung cancer. 3 They found that even when the radiologists missed a cancerous lesion their eyes had usually paused at the site of it. Part of their brain knew there was something there it just didn't percolate all the way up into conscious knowledge. I think many interesting heretical thoughts are already mostly formed in our minds. If we turn off our self censorship temporarily those will be the first to emerge.Time and SpaceIf we could look into the future it would be obvious which of our taboos they'd laugh at. We can't do that but we can do something almost as good: we can look into the past. Another way to figure out what we're getting wrong is to look at what used to be acceptable and is now unthinkable.Changes between the past and the present sometimes do represent progress. In a field like physics if we disagree with past generations it's because we're right and they're wrong. But this becomes rapidly less true as you move away from the certainty of the hard sciences. By the time you get to social questions many changes are just fashion. The age of consent fluctuates like hemlines.We may imagine that we are a great deal smarter and more virtuous than past generations but the more history you read the less likely this seems. People in past times were much like us. Not heroes not barbarians. Whatever their ideas were they were ideas reasonable people could believe.So here is another source of interesting heresies. Diff present ideas against those of various past cultures and see what you get. 4 Some will be shocking by present standards. Ok fine but which might also be true You don't have to look into the past to find big differences. In our own time different societies have wildly varying ideas of what's ok and what isn't. So you can try diffing other cultures' ideas against ours as well. (The best way to do that is to visit them.)You might find contradictory taboos. In one culture it might seem shocking to think x while in another it was shocking not to. But I think usually the shock is on one side. In one culture x is ok and in another it's considered shocking. My hypothesis is that the side that's shocked is most likely to be the mistaken one. 5 I suspect the only taboos that are more than taboos are the ones that are universal or nearly so. Murder for example. But any idea that's considered harmless in a significant percentage of times and places and yet is taboo in ours is a good candidate for something we're mistaken about.For example at the high water mark of political correctness in the early 1990s Harvard distributed to its faculty and staff a brochure saying among other things that it was inappropriate to compliment a colleague or student's clothes. No more "nice shirt." I think this principle is rare among the world's cultures past or present. There are probably more where it's considered especially polite to compliment someone's clothing than where it's considered improper. So odds are this is in a mild form an example of one of the taboos a visitor from the future would have to be careful to avoid if he happened to set his time machine for Cambridge Massachusetts 1992.PrigsOf course if they have time machines in the future they'll probably have a separate reference manual just for Cambridge. This has always been a fussy place a town of i dotters and t crossers where you're liable to get both your grammar and your ideas corrected in the same conversation. And that suggests another way to find taboos. Look for prigs and see what's inside their heads.Kids' heads are repositories of all our taboos. It seems fitting to us that kids' ideas should be bright and clean. The picture we give them of the world is not merely simplified to suit their developing minds but sanitized as well to suit our ideas of what kids ought to think. 6 You can see this on a small scale in the matter of dirty words. A lot of my friends are starting to have children now and they're all trying not to use words like "fuck" and "shit" within baby's hearing lest baby start using these words too. But these words are part of the language and adults use them all the time. So parents are giving their kids an inaccurate idea of the language by not using them. Why do they do this Because they don't think it's fitting that kids should use the whole language. We like children to seem innocent. 7 Most adults likewise deliberately give kids a misleading view of the world. One of the most obvious examples is Santa Claus. We think it's cute for little kids to believe in Santa Claus. I myself think it's cute for little kids to believe in Santa Claus. But one wonders do we tell them this stuff for their sake or for ours I'm not arguing for or against this idea here. It is probably inevitable that parents should want to dress up their kids' minds in cute little baby outfits. I'll probably do it myself. The important thing for our purposes is that as a result a well brought up teenage kid's brain is a more or less complete collection of all our taboos mdash and in mint condition because they're untainted by experience. Whatever we think that will later turn out to be ridiculous it's almost certainly inside that head.How do we get at these ideas By the following thought experiment. Imagine a kind of latter day Conrad character who has worked for a time as a mercenary in Africa for a time as a doctor in Nepal for a time as the manager of a nightclub in Miami. The specifics don't matter mdash just someone who has seen a lot. Now imagine comparing what's inside this guy's head with what's inside the head of a well behaved sixteen year old girl from the suburbs. What does he think that would shock her He knows the world she knows or at least embodies present taboos. Subtract one from the other and the result is what we can't say. MechanismI can think of one more way to figure out what we can't say: to look at how taboos are created. How do moral fashions arise and why are they adopted If we can understand this mechanism we may be able to see it at work in our own time.Moral fashions don't seem to be created the way ordinary fashions are. Ordinary fashions seem to arise by accident when everyone imitates the whim of some influential person. The fashion for broad toed shoes in late fifteenth century Europe began because Charles VIII of France had six toes on one foot. The fashion for the name Gary began when the actor Frank Cooper adopted the name of a tough mill town in Indiana. Moral fashions more often seem to be created deliberately. When there's something we can't say it's often because some group doesn't want us to.The prohibition will be strongest when the group is nervous. The irony of Galileo's situation was that he got in trouble for repeating Copernicus's ideas. Copernicus himself didn't. In fact Copernicus was a canon of a cathedral and dedicated his book to the pope. But by Galileo's time the church was in the throes of the Counter Reformation and was much more worried about unorthodox ideas.To launch a taboo a group has to be poised halfway between weakness and power. A confident group doesn't need taboos to protect it. It's not considered improper to make disparaging remarks about Americans or the English. And yet a group has to be powerful enough to enforce a taboo. Coprophiles as of this writing don't seem to be numerous or energetic enough to have had their interests promoted to a lifestyle.I suspect the biggest source of moral taboos will turn out to be power struggles in which one side only barely has the upper hand. That's where you'll find a group powerful enough to enforce taboos but weak enough to need them.Most struggles whatever they're really about will be cast as struggles between competing ideas. The English Reformation was at bottom a struggle for wealth and power but it ended up being cast as a struggle to preserve the souls of Englishmen from the corrupting influence of Rome. It's easier to get people to fight for an idea. And whichever side wins their ideas will also be considered to have triumphed as if God wanted to signal his agreement by selecting that side as the victor.We often like to think of World War II as a triumph of freedom over totalitarianism. We conveniently forget that the Soviet Union was also one of the winners.I'm not saying that struggles are never about ideas just that they will always be made to seem to be about ideas whether they are or not. And just as there is nothing so unfashionable as the last discarded fashion there is nothing so wrong as the principles of the most recently defeated opponent. Representational art is only now recovering from the approval of both Hitler and Stalin. 8 Although moral fashions tend to arise from different sources than fashions in clothing the mechanism of their adoption seems much the same. The early adopters will be driven by ambition: self consciously cool people who want to distinguish themselves from the common herd. As the fashion becomes established they'll be joined by a second much larger group driven by fear. 9 This second group adopt the fashion not because they want to stand out but because they are afraid of standing out.So if you want to figure out what we can't say look at the machinery of fashion and try to predict what it would make unsayable. What groups are powerful but nervous and what ideas would they like to suppress What ideas were tarnished by association when they ended up on the losing side of a recent struggle If a self consciously cool person wanted to differentiate himself from preceding fashions (e.g. from his parents) which of their ideas would he tend to reject What are conventional minded people afraid of saying This technique won't find us all the things we can't say. I can think of some that aren't the result of any recent struggle. Many of our taboos are rooted deep in the past. But this approach combined with the preceding four will turn up a good number of unthinkable ideas.WhySome would ask why would one want to do this Why deliberately go poking around among nasty disreputable ideas Why look under rocks I do it first of all for the same reason I did look under rocks as a kid: plain curiosity. And I'm especially curious about anything that's forbidden. Let me see and decide for myself.Second I do it because I don't like the idea of being mistaken. If like other eras we believe things that will later seem ridiculous I want to know what they are so that I at least can avoid believing them.Third I do it because it's good for the brain. To do good work you need a brain that can go anywhere. And you especially need a brain that's in the habit of going where it's not supposed to.Great work tends to grow out of ideas that others have overlooked and no idea is so overlooked as one that's unthinkable. Natural selection for example. It's so simple. Why didn't anyone think of it before Well that is all too obvious. Darwin himself was careful to tiptoe around the implications of his theory. He wanted to spend his time thinking about biology not arguing with people who accused him of being an atheist.In the sciences especially it's a great advantage to be able to question assumptions. The m.o. of scientists or at least of the good ones is precisely that: look for places where conventional wisdom is broken and then try to pry apart the cracks and see what's underneath. That's where new theories come from.A good scientist in other words does not merely ignore conventional wisdom but makes a special effort to break it. Scientists go looking for trouble. This should be the m.o. of any scholar but scientists seem much more willing to look under rocks. 10 Why It could be that the scientists are simply smarter most physicists could if necessary make it through a PhD program in French literature but few professors of French literature could make it through a PhD program in physics. Or it could be because it's clearer in the sciences whether theories are true or false and this makes scientists bolder. (Or it could be that because it's clearer in the sciences whether theories are true or false you have to be smart to get jobs as a scientist rather than just a good politician.)Whatever the reason there seems a clear correlation between intelligence and willingness to consider shocking ideas. This isn't just because smart people actively work to find holes in conventional thinking. I think conventions also have less hold over them to start with. You can see that in the way they dress.It's not only in the sciences that heresy pays off. In any competitive field you can win big by seeing things that others daren't. And in every field there are probably heresies few dare utter. Within the US car industry there is a lot of hand wringing now about declining market share. Yet the cause is so obvious that any observant outsider could explain it in a second: they make bad cars. And they have for so long that by now the US car brands are antibrands mdash something you'd buy a car despite not because of. Cadillac stopped being the Cadillac of cars in about 1970. And yet I suspect no one dares say this. 11 Otherwise these companies would have tried to fix the problem.Training yourself to think unthinkable thoughts has advantages beyond the thoughts themselves. It's like stretching. When you stretch before running you put your body into positions much more extreme than any it will assume during the run. If you can think things so outside the box that they'd make people's hair stand on end you'll have no trouble with the small trips outside the box that people call innovative.Pensieri StrettiWhen you find something you can't say what do you do with it My advice is don't say it. Or at least pick your battles.Suppose in the future there is a movement to ban the color yellow. Proposals to paint anything yellow are denounced as "yellowist" as is anyone suspected of liking the color. People who like orange are tolerated but viewed with suspicion. Suppose you realize there is nothing wrong with yellow. If you go around saying this you'll be denounced as a yellowist too and you'll find yourself having a lot of arguments with anti yellowists. If your aim in life is to rehabilitate the color yellow that may be what you want. But if you're mostly interested in other questions being labelled as a yellowist will just be a distraction. Argue with idiots and you become an idiot.The most important thing is to be able to think what you want not to say what you want. And if you feel you have to say everything you think it may inhibit you from thinking improper thoughts. I think it's better to follow the opposite policy. Draw a sharp line between your thoughts and your speech. Inside your head anything is allowed. Within my head I make a point of encouraging the most outrageous thoughts I can imagine. But as in a secret society nothing that happens within the building should be told to outsiders. The first rule of Fight Club is you do not talk about Fight Club.When Milton was going to visit Italy in the 1630s Sir Henry Wootton who had been ambassador to Venice told him his motto should be "i pensieri stretti il viso sciolto." Closed thoughts and an open face. Smile at everyone and don't tell them what you're thinking. This was wise advice. Milton was an argumentative fellow and the Inquisition was a bit restive at that time. But I think the difference between Milton's situation and ours is only a matter of degree. Every era has its heresies and if you don't get imprisoned for them you will at least get in enough trouble that it becomes a complete distraction.I admit it seems cowardly to keep quiet. When I read about the harassment to which the Scientologists subject their critics 12 or that pro Israel groups are "compiling dossiers" on those who speak out against Israeli human rights abuses 13 or about people being sued for violating the DMCA 14 part of me wants to say "All right you bastards bring it on." The problem is there are so many things you can't say. If you said them all you'd have no time left for your real work. You'd have to turn into Noam Chomsky. 15 The trouble with keeping your thoughts secret though is that you lose the advantages of discussion. Talking about an idea leads to more ideas. So the optimal plan if you can manage it is to have a few trusted friends you can speak openly to. This is not just a way to develop ideas it's also a good rule of thumb for choosing friends. The people you can say heretical things to without getting jumped on are also the most interesting to know.Viso Sciolto I don't think we need the viso sciolto so much as the pensieri stretti. Perhaps the best policy is to make it plain that you don't agree with whatever zealotry is current in your time but not to be too specific about what you disagree with. Zealots will try to draw you out but you don't have to answer them. If they try to force you to treat a question on their terms by asking "are you with us or against us " you can always just answer "neither".Better still answer "I haven't decided." That's what Larry Summers did when a group tried to put him in this position. Explaining himself later he said "I don't do litmus tests." 16 A lot of the questions people get hot about are actually quite complicated. There is no prize for getting the answer quickly.If the anti yellowists seem to be getting out of hand and you want to fight back there are ways to do it without getting yourself accused of being a yellowist. Like skirmishers in an ancient army you want to avoid directly engaging the main body of the enemy's troops. Better to harass them with arrows from a distance.One way to do this is to ratchet the debate up one level of abstraction. If you argue against censorship in general you can avoid being accused of whatever heresy is contained in the book or film that someone is trying to censor. You can attack labels with meta labels: labels that refer to the use of labels to prevent discussion. The spread of the term "political correctness" meant the beginning of the end of political correctness because it enabled one to attack the phenomenon as a whole without being accused of any of the specific heresies it sought to suppress.Another way to counterattack is with metaphor. Arthur Miller undermined the House Un American Activities Committee by writing a play "The Crucible " about the Salem witch trials. He never referred directly to the committee and so gave them no way to reply. What could HUAC do defend the Salem witch trials And yet Miller's metaphor stuck so well that to this day the activities of the committee are often described as a "witch hunt."Best of all probably is humor. Zealots whatever their cause invariably lack a sense of humor. They can't reply in kind to jokes. They're as unhappy on the territory of humor as a mounted knight on a skating rink. Victorian prudishness for example seems to have been defeated mainly by treating it as a joke. Likewise its reincarnation as political correctness. "I am glad that I managed to write 'The Crucible '" Arthur Miller wrote "but looking back I have often wished I'd had the temperament to do an absurd comedy which is what the situation deserved." 17 ABQA Dutch friend says I should use Holland as an example of a tolerant society. It's true they have a long tradition of comparative open mindedness. For centuries the low countries were the place to go to say things you couldn't say anywhere else and this helped to make the region a center of scholarship and industry (which have been closely tied for longer than most people realize). Descartes though claimed by the French did much of his thinking in Holland.And yet I wonder. The Dutch seem to live their lives up to their necks in rules and regulations. There's so much you can't do there is there really nothing you can't say Certainly the fact that they value open mindedness is no guarantee. Who thinks they're not open minded Our hypothetical prim miss from the suburbs thinks she's open minded. Hasn't she been taught to be Ask anyone and they'll say the same thing: they're pretty open minded though they draw the line at things that are really wrong. (Some tribes may avoid "wrong" as judgemental and may instead use a more neutral sounding euphemism like "negative" or "destructive".)When people are bad at math they know it because they get the wrong answers on tests. But when people are bad at open mindedness they don't know it. In fact they tend to think the opposite. Remember it's the nature of fashion to be invisible. It wouldn't work otherwise. Fashion doesn't seem like fashion to someone in the grip of it. It just seems like the right thing to do. It's only by looking from a distance that we see oscillations in people's idea of the right thing to do and can identify them as fashions.Time gives us such distance for free. Indeed the arrival of new fashions makes old fashions easy to see because they seem so ridiculous by contrast. From one end of a pendulum's swing the other end seems especially far away.To see fashion in your own time though requires a conscious effort. Without time to give you distance you have to create distance yourself. Instead of being part of the mob stand as far away from it as you can and watch what it's doing. And pay especially close attention whenever an idea is being suppressed. Web filters for children and employees often ban sites containing pornography violence and hate speech. What counts as pornography and violence And what exactly is "hate speech " This sounds like a phrase out of 1984.Labels like that are probably the biggest external clue. If a statement is false that's the worst thing you can say about it. You don't need to say that it's heretical. And if it isn't false it shouldn't be suppressed. So when you see statements being attacked as x ist or y ic (substitute your current values of x and y) whether in 1630 or 2030 that's a sure sign that something is wrong. When you hear such labels being used ask why.Especially if you hear yourself using them. It's not just the mob you need to learn to watch from a distance. You need to be able to watch your own thoughts from a distance. That's not a radical idea by the way it's the main difference between children and adults. When a child gets angry because he's tired he doesn't know what's happening. An adult can distance himself enough from the situation to say "never mind I'm just tired." I don't see why one couldn't by a similar process learn to recognize and discount the effects of moral fashions.You have to take that extra step if you want to think clearly. But it's harder because now you're working against social customs instead of with them. Everyone encourages you to grow up to the point where you can discount your own bad moods. Few encourage you to continue to the point where you can discount society's bad moods.How can you see the wave when you're the water Always be questioning. That's the only defence. What can't you say And why NotesThanks to Sarah Harlin Trevor Blackwell Jessica Livingston Robert Morris Eric Raymond and Bob van der Zwaan for reading drafts of this essay and to Lisa Randall Jackie McDonough Ryan Stanley and Joel Rainey for conversations about heresy. Needless to say they bear no blame for opinions expressed in it and especially for opinions not expressed in it.
The Segway hasn't delivered on its initial promise to put it mildly. There are several reasons why but one is that people don't want to be seen riding them. Someone riding a Segway looks like a dork.My friend Trevor Blackwell built his own Segway which we called the Segwell. He also built a one wheeled version the Eunicycle which looks exactly like a regular unicycle till you realize the rider isn't pedaling. He has ridden them both to downtown Mountain View to get coffee. When he rides the Eunicycle people smile at him. But when he rides the Segwell they shout abuse from their cars: "Too lazy to walk ya fuckin homo "Why do Segways provoke this reaction The reason you look like a dork riding a Segway is that you look smug. You don't seem to be working hard enough.Someone riding a motorcycle isn't working any harder. But because he's sitting astride it he seems to be making an effort. When you're riding a Segway you're just standing there. And someone who's being whisked along while seeming to do no work mdash someone in a sedan chair for example mdash can't help but look smug.Try this thought experiment and it becomes clear: imagine something that worked like the Segway but that you rode with one foot in front of the other like a skateboard. That wouldn't seem nearly as uncool.So there may be a way to capture more of the market Segway hoped to reach: make a version that doesn't look so easy for the rider. It would also be helpful if the styling was in the tradition of skateboards or bicycles rather than medical devices.Curiously enough what got Segway into this problem was that the company was itself a kind of Segway. It was too easy for them they were too successful raising money. If they'd had to grow the company gradually by iterating through several versions they sold to real users they'd have learned pretty quickly that people looked stupid riding them. Instead they had enough to work in secret. They had focus groups aplenty I'm sure but they didn't have the people yelling insults out of cars. So they never realized they were zooming confidently down a blind alley.
When we sold our startup in 1998 I suddenly got a lot of money. I now had to think about something I hadn't had to think about before: how not to lose it. I knew it was possible to go from rich to poor just as it was possible to go from poor to rich. But while I'd spent a lot of the past several years studying the paths from poor to rich I knew practically nothing about the paths from rich to poor. Now in order to avoid them I had to learn where they were.So I started to pay attention to how fortunes are lost. If you'd asked me as a kid how rich people became poor I'd have said by spending all their money. That's how it happens in books and movies because that's the colorful way to do it. But in fact the way most fortunes are lost is not through excessive expenditure but through bad investments.It's hard to spend a fortune without noticing. Someone with ordinary tastes would find it hard to blow through more than a few tens of thousands of dollars without thinking "wow I'm spending a lot of money." Whereas if you start trading derivatives you can lose a million dollars (as much as you want really) in the blink of an eye.In most people's minds spending money on luxuries sets off alarms that making investments doesn't. Luxuries seem self indulgent. And unless you got the money by inheriting it or winning a lottery you've already been thoroughly trained that self indulgence leads to trouble. Investing bypasses those alarms. You're not spending the money you're just moving it from one asset to another. Which is why people trying to sell you expensive things say "it's an investment."The solution is to develop new alarms. This can be a tricky business because while the alarms that prevent you from overspending are so basic that they may even be in our DNA the ones that prevent you from making bad investments have to be learned and are sometimes fairly counterintuitive.A few days ago I realized something surprising: the situation with time is much the same as with money. The most dangerous way to lose time is not to spend it having fun but to spend it doing fake work. When you spend time having fun you know you're being self indulgent. Alarms start to go off fairly quickly. If I woke up one morning and sat down on the sofa and watched TV all day I'd feel like something was terribly wrong. Just thinking about it makes me wince. I'd start to feel uncomfortable after sitting on a sofa watching TV for 2 hours let alone a whole day.And yet I've definitely had days when I might as well have sat in front of a TV all day mdash days at the end of which if I asked myself what I got done that day the answer would have been: basically nothing. I feel bad after these days too but nothing like as bad as I'd feel if I spent the whole day on the sofa watching TV. If I spent a whole day watching TV I'd feel like I was descending into perdition. But the same alarms don't go off on the days when I get nothing done because I'm doing stuff that seems superficially like real work. Dealing with email for example. You do it sitting at a desk. It's not fun. So it must be work.With time as with money avoiding pleasure is no longer enough to protect you. It probably was enough to protect hunter gatherers and perhaps all pre industrial societies. So nature and nurture combine to make us avoid self indulgence. But the world has gotten more complicated: the most dangerous traps now are new behaviors that bypass our alarms about self indulgence by mimicking more virtuous types. And the worst thing is they're not even fun. Thanks to Sam Altman Trevor Blackwell Patrick Collison Jessica Livingston and Robert Morris for reading drafts of this.
The first Summer Founders Program has just finished. We were surprised how well it went. Overall only about 10 of startups succeed but if I had to guess now I'd predict three or four of the eight startups we funded will make it.Of the startups that needed further funding I believe all have either closed a round or are likely to soon. Two have already turned down (lowball) acquisition offers.We would have been happy if just one of the eight seemed promising by the end of the summer. What's going on Did some kind of anomaly make this summer's applicants especially good We worry about that but we can't think of one. We'll find out this winter.The whole summer was full of surprises. The best was that the hypothesis we were testing seems to be correct. Young hackers can start viable companies. This is good news for two reasons: (a) it's an encouraging thought and (b) it means that Y Combinator which is predicated on the idea is not hosed.AgeMore precisely the hypothesis was that success in a startup depends mainly on how smart and energetic you are and much less on how old you are or how much business experience you have. The results so far bear this out. The 2005 summer founders ranged in age from 18 to 28 (average 23) and there is no correlation between their ages and how well they're doing.This should not really be surprising. Bill Gates and Michael Dell were both 19 when they started the companies that made them famous. Young founders are not a new phenomenon: the trend began as soon as computers got cheap enough for college kids to afford them.Another of our hypotheses was that you can start a startup on less money than most people think. Other investors were surprised to hear the most we gave any group was 20 000. But we knew it was possible to start on that little because we started Viaweb on 10 000.And so it proved this summer. Three months' funding is enough to get into second gear. We had a demo day for potential investors ten weeks in and seven of the eight groups had a prototype ready by that time. One Reddit had already launched and were able to give a demo of their live site.A researcher who studied the SFP startups said the one thing they had in common was that they all worked ridiculously hard. People this age are commonly seen as lazy. I think in some cases it's not so much that they lack the appetite for work but that the work they're offered is unappetizing.The experience of the SFP suggests that if you let motivated people do real work they work hard whatever their age. As one of the founders said "I'd read that starting a startup consumed your life but I had no idea what that meant until I did it."I'd feel guilty if I were a boss making people work this hard. But we're not these people's bosses. They're working on their own projects. And what makes them work is not us but their competitors. Like good athletes they don't work hard because the coach yells at them but because they want to win.We have less power than bosses and yet the founders work harder than employees. It seems like a win for everyone. The only catch is that we get on average only about 5 7 of the upside while an employer gets nearly all of it. (We're counting on it being 5 7 of a much larger number.)As well as working hard the groups all turned out to be extraordinarily responsible. I can't think of a time when one failed to do something they'd promised to even by being late for an appointment. This is another lesson the world has yet to learn. One of the founders discovered that the hardest part of arranging a meeting with executives at a big cell phone carrier was getting a rental company to rent him a car because he was too young.I think the problem here is much the same as with the apparent laziness of people this age. They seem lazy because the work they're given is pointless and they act irresponsible because they're not given any power. Some of them anyway. We only have a sample size of about twenty but it seems so far that if you let people in their early twenties be their own bosses they rise to the occasion.MoraleThe summer founders were as a rule very idealistic. They also wanted very much to get rich. These qualities might seem incompatible but they're not. These guys want to get rich but they want to do it by changing the world. They wouldn't (well seven of the eight groups wouldn't) be interested in making money by speculating in stocks. They want to make something people use.I think this makes them more effective as founders. As hard as people will work for money they'll work harder for a cause. And since success in a startup depends so much on motivation the paradoxical result is that the people likely to make the most money are those who aren't in it just for the money.The founders of Kiko for example are working on an Ajax calendar. They want to get rich but they pay more attention to design than they would if that were their only motivation. You can tell just by looking at it.I never considered it till this summer but this might be another reason startups run by hackers tend to do better than those run by MBAs. Perhaps it's not just that hackers understand technology better but that they're driven by more powerful motivations. Microsoft as I've said before is a dangerously misleading example. Their mean corporate culture only works for monopolies. Google is a better model.Considering that the summer founders are the sharks in this ocean we were surprised how frightened most of them were of competitors. But now that I think of it we were just as frightened when we started Viaweb. For the first year our initial reaction to news of a competitor was always: we're doomed. Just as a hypochondriac magnifies his symptoms till he's convinced he has some terrible disease when you're not used to competitors you magnify them into monsters.Here's a handy rule for startups: competitors are rarely as dangerous as they seem. Most will self destruct before you can destroy them. And it certainly doesn't matter how many of them there are any more than it matters to the winner of a marathon how many runners are behind him."It's a crowded market " I remember one founder saying worriedly."Are you the current leader " I asked."Yes.""Is anyone able to develop software faster than you ""Probably not.""Well if you're ahead now and you're the fastest then you'll stay ahead. What difference does it make how many others there are "Another group was worried when they realized they had to rewrite their software from scratch. I told them it would be a bad sign if they didn't. The main function of your initial version is to be rewritten.That's why we advise groups to ignore issues like scalability internationalization and heavy duty security at first. 1 I can imagine an advocate of "best practices" saying these ought to be considered from the start. And he'd be right except that they interfere with the primary function of software in a startup: to be a vehicle for experimenting with its own design. Having to retrofit internationalization or scalability is a pain certainly. The only bigger pain is not needing to because your initial version was too big and rigid to evolve into something users wanted.I suspect this is another reason startups beat big companies. Startups can be irresponsible and release version 1s that are light enough to evolve. In big companies all the pressure is in the direction of over engineering.What Got LearnedOne thing we were curious about this summer was where these groups would need help. That turned out to vary a lot. Some we helped with technical advice for example about how to set up an application to run on multiple servers. Most we helped with strategy questions like what to patent and what to charge for and what to give away. Nearly all wanted advice about dealing with future investors: how much money should they take and what kind of terms should they expect However all the groups quickly learned how to deal with stuff like patents and investors. These problems aren't intrinsically difficult just unfamiliar.It was surprising slightly frightening even how fast they learned. The weekend before the demo day for investors we had a practice session where all the groups gave their presentations. They were all terrible. We tried to explain how to make them better but we didn't have much hope. So on demo day I told the assembled angels and VCs that these guys were hackers not MBAs and so while their software was good we should not expect slick presentations from them.The groups then proceeded to give fabulously slick presentations. Gone were the mumbling recitations of lists of features. It was as if they'd spent the past week at acting school. I still don't know how they did it.Perhaps watching each others' presentations helped them see what they'd been doing wrong. Just as happens in college the summer founders learned a lot from one another maybe more than they learned from us. A lot of the problems they face are the same from dealing with investors to hacking Javascript.I don't want to give the impression there were no problems this summer. A lot went wrong as usually happens with startups. One group got an "exploding term sheet" from some VCs. Pretty much all the groups who had dealings with big companies found that big companies do everything infinitely slowly. (This is to be expected. If big companies weren't incapable there would be no room for startups to exist.) And of course there were the usual nightmares associated with servers. In short the disasters this summer were just the usual childhood diseases. Some of this summer's eight startups will probably die eventually it would be extraordinary if all eight succeeded. But what kills them will not be dramatic external threats but a mundane internal one: not getting enough done.So far though the news is all good. In fact we were surprised how much fun the summer was for us. The main reason was how much we liked the founders. They're so earnest and hard working. They seem to like us too. And this illustrates another advantage of investing over hiring: our relationship with them is way better than it would be between a boss and an employee. Y Combinator ends up being more like an older brother than a parent.I was surprised how much time I spent making introductions. Fortunately I discovered that when a startup needed to talk to someone I could usually get to the right person by at most one hop. I remember wondering how did my friends get to be so eminent and a second later realizing: shit I'm forty.Another surprise was that the three month batch format which we were forced into by the constraints of the summer turned out to be an advantage. When we started Y Combinator we planned to invest the way other venture firms do: as proposals came in we'd evaluate them and decide yes or no. The SFP was just an experiment to get things started. But it worked so well that we plan to do all our investing this way one cycle in the summer and one in winter. It's more efficient for us and better for the startups too.Several groups said our weekly dinners saved them from a common problem afflicting startups: working so hard that one has no social life. (I remember that part all too well.) This way they were guaranteed a social event at least once a week.IndependenceI've heard Y Combinator described as an "incubator." Actually we're the opposite: incubators exert more control than ordinary VCs and we make a point of exerting less. Among other things incubators usually make you work in their office that's where the word "incubator" comes from. That seems the wrong model. If investors get too involved they smother one of the most powerful forces in a startup: the feeling that it's your own company.Incubators were conspicuous failures during the Bubble. There's still debate about whether this was because of the Bubble or because they're a bad idea. My vote is they're a bad idea. I think they fail because they select for the wrong people. When we were starting a startup we would never have taken funding from an "incubator." We can find office space thanks just give us the money. And people with that attitude are the ones likely to succeed in startups.Indeed one quality all the founders shared this summer was a spirit of independence. I've been wondering about that. Are some people just a lot more independent than others or would everyone be this way if they were allowed to As with most nature nurture questions the answer is probably: some of each. But my main conclusion from the summer is that there's more environment in the mix than most people realize. I could see that from how the founders' attitudes changed during the summer. Most were emerging from twenty or so years of being told what to do. They seemed a little surprised at having total freedom. But they grew into it really quickly some of these guys now seem about four inches taller (metaphorically) than they did at the beginning of the summer.When we asked the summer founders what surprised them most about starting a company one said "the most shocking thing is that it worked."It will take more experience to know for sure but my guess is that a lot of hackers could do this that if you put people in a position of independence they develop the qualities they need. Throw them off a cliff and most will find on the way down that they have wings.The reason this is news to anyone is that the same forces work in the other direction too. Most hackers are employees and this molds you into someone to whom starting a startup seems impossible as surely as starting a startup molds you into someone who can handle it.If I'm right "hacker" will mean something different in twenty years than it does now. Increasingly it will mean the people who run the company. Y Combinator is just accelerating a process that would have happened anyway. Power is shifting from the people who deal with money to the people who create technology and if our experience this summer is any guide this will be a good thing.Notes 1 By heavy duty security I mean efforts to protect against truly determined attackers.The image shows us the 2005 summer founders and Smartleaf co founders Mark Nitzberg and Olin Shivers at the 30 foot table Kate Courteau designed for us. Photo by Alex Lewin.Thanks to Sarah Harlin Steve Huffman Jessica Livingston Zak Stone and Aaron Swartz for reading drafts of this. Want to start a startup YC Winter Founders Program. 
(This essay is derived from a keynote at Xtech.)Could you reproduce Silicon Valley elsewhere or is there something unique about it It wouldn't be surprising if it were hard to reproduce in other countries because you couldn't reproduce it in most of the US either. What does it take to make a silicon valley even here What it takes is the right people. If you could get the right ten thousand people to move from Silicon Valley to Buffalo Buffalo would become Silicon Valley. 1 That's a striking departure from the past. Up till a couple decades ago geography was destiny for cities. All great cities were located on waterways because cities made money by trade and water was the only economical way to ship.Now you could make a great city anywhere if you could get the right people to move there. So the question of how to make a silicon valley becomes: who are the right people and how do you get them to move Two TypesI think you only need two kinds of people to create a technology hub: rich people and nerds. They're the limiting reagents in the reaction that produces startups because they're the only ones present when startups get started. Everyone else will move.Observation bears this out: within the US towns have become startup hubs if and only if they have both rich people and nerds. Few startups happen in Miami for example because although it's full of rich people it has few nerds. It's not the kind of place nerds like.Whereas Pittsburgh has the opposite problem: plenty of nerds but no rich people. The top US Computer Science departments are said to be MIT Stanford Berkeley and Carnegie Mellon. MIT yielded Route 128. Stanford and Berkeley yielded Silicon Valley. But Carnegie Mellon The record skips at that point. Lower down the list the University of Washington yielded a high tech community in Seattle and the University of Texas at Austin yielded one in Austin. But what happened in Pittsburgh And in Ithaca home of Cornell which is also high on the list I grew up in Pittsburgh and went to college at Cornell so I can answer for both. The weather is terrible particularly in winter and there's no interesting old city to make up for it as there is in Boston. Rich people don't want to live in Pittsburgh or Ithaca. So while there are plenty of hackers who could start startups there's no one to invest in them.Not BureaucratsDo you really need the rich people Wouldn't it work to have the government invest in the nerds No it would not. Startup investors are a distinct type of rich people. They tend to have a lot of experience themselves in the technology business. This (a) helps them pick the right startups and (b) means they can supply advice and connections as well as money. And the fact that they have a personal stake in the outcome makes them really pay attention.Bureaucrats by their nature are the exact opposite sort of people from startup investors. The idea of them making startup investments is comic. It would be like mathematicians running Vogue or perhaps more accurately Vogue editors running a math journal. 2 Though indeed most things bureaucrats do they do badly. We just don't notice usually because they only have to compete against other bureaucrats. But as startup investors they'd have to compete against pros with a great deal more experience and motivation.Even corporations that have in house VC groups generally forbid them to make their own investment decisions. Most are only allowed to invest in deals where some reputable private VC firm is willing to act as lead investor.Not BuildingsIf you go to see Silicon Valley what you'll see are buildings. But it's the people that make it Silicon Valley not the buildings. I read occasionally about attempts to set up "technology parks" in other places as if the active ingredient of Silicon Valley were the office space. An article about Sophia Antipolis bragged that companies there included Cisco Compaq IBM NCR and Nortel. Don't the French realize these aren't startups Building office buildings for technology companies won't get you a silicon valley because the key stage in the life of a startup happens before they want that kind of space. The key stage is when they're three guys operating out of an apartment. Wherever the startup is when it gets funded it will stay. The defining quality of Silicon Valley is not that Intel or Apple or Google have offices there but that they were started there.So if you want to reproduce Silicon Valley what you need to reproduce is those two or three founders sitting around a kitchen table deciding to start a company. And to reproduce that you need those people.UniversitiesThe exciting thing is all you need are the people. If you could attract a critical mass of nerds and investors to live somewhere you could reproduce Silicon Valley. And both groups are highly mobile. They'll go where life is good. So what makes a place good to them What nerds like is other nerds. Smart people will go wherever other smart people are. And in particular to great universities. In theory there could be other ways to attract them but so far universities seem to be indispensable. Within the US there are no technology hubs without first rate universities or at least first rate computer science departments.So if you want to make a silicon valley you not only need a university but one of the top handful in the world. It has to be good enough to act as a magnet drawing the best people from thousands of miles away. And that means it has to stand up to existing magnets like MIT and Stanford.This sounds hard. Actually it might be easy. My professor friends when they're deciding where they'd like to work consider one thing above all: the quality of the other faculty. What attracts professors is good colleagues. So if you managed to recruit en masse a significant number of the best young researchers you could create a first rate university from nothing overnight. And you could do that for surprisingly little. If you paid 200 people hiring bonuses of 3 million apiece you could put together a faculty that would bear comparison with any in the world. And from that point the chain reaction would be self sustaining. So whatever it costs to establish a mediocre university for an additional half billion or so you could have a great one. 3 PersonalityHowever merely creating a new university would not be enough to start a silicon valley. The university is just the seed. It has to be planted in the right soil or it won't germinate. Plant it in the wrong place and you just create Carnegie Mellon.To spawn startups your university has to be in a town that has attractions other than the university. It has to be a place where investors want to live and students want to stay after they graduate.The two like much the same things because most startup investors are nerds themselves. So what do nerds look for in a town Their tastes aren't completely different from other people's because a lot of the towns they like most in the US are also big tourist destinations: San Francisco Boston Seattle. But their tastes can't be quite mainstream either because they dislike other big tourist destinations like New York Los Angeles and Las Vegas.There has been a lot written lately about the "creative class." The thesis seems to be that as wealth derives increasingly from ideas cities will prosper only if they attract those who have them. That is certainly true in fact it was the basis of Amsterdam's prosperity 400 years ago.A lot of nerd tastes they share with the creative class in general. For example they like well preserved old neighborhoods instead of cookie cutter suburbs and locally owned shops and restaurants instead of national chains. Like the rest of the creative class they want to live somewhere with personality.What exactly is personality I think it's the feeling that each building is the work of a distinct group of people. A town with personality is one that doesn't feel mass produced. So if you want to make a startup hub or any town to attract the "creative class" you probably have to ban large development projects. When a large tract has been developed by a single organization you can always tell. 4 Most towns with personality are old but they don't have to be. Old towns have two advantages: they're denser because they were laid out before cars and they're more varied because they were built one building at a time. You could have both now. Just have building codes that ensure density and ban large scale developments.A corollary is that you have to keep out the biggest developer of all: the government. A government that asks "How can we build a silicon valley " has probably ensured failure by the way they framed the question. You don't build a silicon valley you let one grow.NerdsIf you want to attract nerds you need more than a town with personality. You need a town with the right personality. Nerds are a distinct subset of the creative class with different tastes from the rest. You can see this most clearly in New York which attracts a lot of creative people but few nerds. 5 What nerds like is the kind of town where people walk around smiling. This excludes LA where no one walks at all and also New York where people walk but not smiling. When I was in grad school in Boston a friend came to visit from New York. On the subway back from the airport she asked "Why is everyone smiling " I looked and they weren't smiling. They just looked like they were compared to the facial expressions she was used to.If you've lived in New York you know where these facial expressions come from. It's the kind of place where your mind may be excited but your body knows it's having a bad time. People don't so much enjoy living there as endure it for the sake of the excitement. And if you like certain kinds of excitement New York is incomparable. It's a hub of glamour a magnet for all the shorter half life isotopes of style and fame.Nerds don't care about glamour so to them the appeal of New York is a mystery. People who like New York will pay a fortune for a small dark noisy apartment in order to live in a town where the cool people are really cool. A nerd looks at that deal and sees only: pay a fortune for a small dark noisy apartment.Nerds will pay a premium to live in a town where the smart people are really smart but you don't have to pay as much for that. It's supply and demand: glamour is popular so you have to pay a lot for it.Most nerds like quieter pleasures. They like cafes instead of clubs used bookshops instead of fashionable clothing shops hiking instead of dancing sunlight instead of tall buildings. A nerd's idea of paradise is Berkeley or Boulder.YouthIt's the young nerds who start startups so it's those specifically the city has to appeal to. The startup hubs in the US are all young feeling towns. This doesn't mean they have to be new. Cambridge has the oldest town plan in America but it feels young because it's full of students.What you can't have if you want to create a silicon valley is a large existing population of stodgy people. It would be a waste of time to try to reverse the fortunes of a declining industrial town like Detroit or Philadelphia by trying to encourage startups. Those places have too much momentum in the wrong direction. You're better off starting with a blank slate in the form of a small town. Or better still if there's a town young people already flock to that one.The Bay Area was a magnet for the young and optimistic for decades before it was associated with technology. It was a place people went in search of something new. And so it became synonymous with California nuttiness. There's still a lot of that there. If you wanted to start a new fad a new way to focus one's "energy " for example or a new category of things not to eat the Bay Area would be the place to do it. But a place that tolerates oddness in the search for the new is exactly what you want in a startup hub because economically that's what startups are. Most good startup ideas seem a little crazy if they were obviously good ideas someone would have done them already.(How many people are going to want computers in their houses What another search engine )That's the connection between technology and liberalism. Without exception the high tech cities in the US are also the most liberal. But it's not because liberals are smarter that this is so. It's because liberal cities tolerate odd ideas and smart people by definition have odd ideas.Conversely a town that gets praised for being "solid" or representing "traditional values" may be a fine place to live but it's never going to succeed as a startup hub. The 2004 presidential election though a disaster in other respects conveniently supplied us with a county by county map of such places. 6 To attract the young a town must have an intact center. In most American cities the center has been abandoned and the growth if any is in the suburbs. Most American cities have been turned inside out. But none of the startup hubs has: not San Francisco or Boston or Seattle. They all have intact centers. 7 My guess is that no city with a dead center could be turned into a startup hub. Young people don't want to live in the suburbs.Within the US the two cities I think could most easily be turned into new silicon valleys are Boulder and Portland. Both have the kind of effervescent feel that attracts the young. They're each only a great university short of becoming a silicon valley if they wanted to.TimeA great university near an attractive town. Is that all it takes That was all it took to make the original Silicon Valley. Silicon Valley traces its origins to William Shockley one of the inventors of the transistor. He did the research that won him the Nobel Prize at Bell Labs but when he started his own company in 1956 he moved to Palo Alto to do it. At the time that was an odd thing to do. Why did he Because he had grown up there and remembered how nice it was. Now Palo Alto is suburbia but then it was a charming college town a charming college town with perfect weather and San Francisco only an hour away.The companies that rule Silicon Valley now are all descended in various ways from Shockley Semiconductor. Shockley was a difficult man and in 1957 his top people "the traitorous eight" left to start a new company Fairchild Semiconductor. Among them were Gordon Moore and Robert Noyce who went on to found Intel and Eugene Kleiner who founded the VC firm Kleiner Perkins. Forty two years later Kleiner Perkins funded Google and the partner responsible for the deal was John Doerr who came to Silicon Valley in 1974 to work for Intel.So although a lot of the newest companies in Silicon Valley don't make anything out of silicon there always seem to be multiple links back to Shockley. There's a lesson here: startups beget startups. People who work for startups start their own. People who get rich from startups fund new ones. I suspect this kind of organic growth is the only way to produce a startup hub because it's the only way to grow the expertise you need.That has two important implications. The first is that you need time to grow a silicon valley. The university you could create in a couple years but the startup community around it has to grow organically. The cycle time is limited by the time it takes a company to succeed which probably averages about five years.The other implication of the organic growth hypothesis is that you can't be somewhat of a startup hub. You either have a self sustaining chain reaction or not. Observation confirms this too: cities either have a startup scene or they don't. There is no middle ground. Chicago has the third largest metropolitan area in America. As source of startups it's negligible compared to Seattle number 15.The good news is that the initial seed can be quite small. Shockley Semiconductor though itself not very successful was big enough. It brought a critical mass of experts in an important new technology together in a place they liked enough to stay.CompetingOf course a would be silicon valley faces an obstacle the original one didn't: it has to compete with Silicon Valley. Can that be done Probably.One of Silicon Valley's biggest advantages is its venture capital firms. This was not a factor in Shockley's day because VC funds didn't exist. In fact Shockley Semiconductor and Fairchild Semiconductor were not startups at all in our sense. They were subsidiaries of Beckman Instruments and Fairchild Camera and Instrument respectively. Those companies were apparently willing to establish subsidiaries wherever the experts wanted to live.Venture investors however prefer to fund startups within an hour's drive. For one they're more likely to notice startups nearby. But when they do notice startups in other towns they prefer them to move. They don't want to have to travel to attend board meetings and in any case the odds of succeeding are higher in a startup hub.The centralizing effect of venture firms is a double one: they cause startups to form around them and those draw in more startups through acquisitions. And although the first may be weakening because it's now so cheap to start some startups the second seems as strong as ever. Three of the most admired "Web 2.0" companies were started outside the usual startup hubs but two of them have already been reeled in through acquisitions.Such centralizing forces make it harder for new silicon valleys to get started. But by no means impossible. Ultimately power rests with the founders. A startup with the best people will beat one with funding from famous VCs and a startup that was sufficiently successful would never have to move. So a town that could exert enough pull over the right people could resist and perhaps even surpass Silicon Valley.For all its power Silicon Valley has a great weakness: the paradise Shockley found in 1956 is now one giant parking lot. San Francisco and Berkeley are great but they're forty miles away. Silicon Valley proper is soul crushing suburban sprawl. It has fabulous weather which makes it significantly better than the soul crushing sprawl of most other American cities. But a competitor that managed to avoid sprawl would have real leverage. All a city needs is to be the kind of place the next traitorous eight look at and say "I want to stay here " and that would be enough to get the chain reaction started.Notes 1 It's interesting to consider how low this number could be made. I suspect five hundred would be enough even if they could bring no assets with them. Probably just thirty if I could pick them would be enough to turn Buffalo into a significant startup hub. 2 Bureaucrats manage to allocate research funding moderately well but only because (like an in house VC fund) they outsource most of the work of selection. A professor at a famous university who is highly regarded by his peers will get funding pretty much regardless of the proposal. That wouldn't work for startups whose founders aren't sponsored by organizations and are often unknowns. 3 You'd have to do it all at once or at least a whole department at a time because people would be more likely to come if they knew their friends were. And you should probably start from scratch rather than trying to upgrade an existing university or much energy would be lost in friction. 4 Hypothesis: Any plan in which multiple independent buildings are gutted or demolished to be "redeveloped" as a single project is a net loss of personality for the city with the exception of the conversion of buildings not previously public like warehouses. 5 A few startups get started in New York but less than a tenth as many per capita as in Boston and mostly in less nerdy fields like finance and media. 6 Some blue counties are false positives (reflecting the remaining power of Democractic party machines) but there are no false negatives. You can safely write off all the red counties. 7 Some "urban renewal" experts took a shot at destroying Boston's in the 1960s leaving the area around city hall a bleak wasteland but most neighborhoods successfully resisted them.Thanks to Chris Anderson Trevor Blackwell Marc Hedlund Jessica Livingston Robert Morris Greg Mcadoo Fred Wilson and Stephen Wolfram for reading drafts of this and to Ed Dumbill for inviting me to speak.(The second part of this talk became Why Startups Condense in America.)
 April 29: Free one day startup school for hackers. 
 Like to build things Try Hacker News. 
 You'll find this essay and 14 others in Hackers Painters. 
I'm not a very good speaker. I say "um" a lot. Sometimes I have to pause when I lose my train of thought. I wish I were a better speaker. But I don't wish I were a better speaker like I wish I were a better writer. What I really want is to have good ideas and that's a much bigger part of being a good writer than being a good speaker.Having good ideas is most of writing well. If you know what you're talking about you can say it in the plainest words and you'll be perceived as having a good style. With speaking it's the opposite: having good ideas is an alarmingly small component of being a good speaker.I first noticed this at a conference several years ago. There was another speaker who was much better than me. He had all of us roaring with laughter. I seemed awkward and halting by comparison. Afterward I put my talk online like I usually do. As I was doing it I tried to imagine what a transcript of the other guy's talk would be like and it was only then I realized he hadn't said very much.Maybe this would have been obvious to someone who knew more about speaking but it was a revelation to me how much less ideas mattered in speaking than writing. 1 A few years later I heard a talk by someone who was not merely a better speaker than me but a famous speaker. Boy was he good. So I decided I'd pay close attention to what he said to learn how he did it. After about ten sentences I found myself thinking "I don't want to be a good speaker."Being a really good speaker is not merely orthogonal to having good ideas but in many ways pushes you in the opposite direction. For example when I give a talk I usually write it out beforehand. I know that's a mistake I know delivering a prewritten talk makes it harder to engage with an audience. The way to get the attention of an audience is to give them your full attention and when you're delivering a prewritten talk your attention is always divided between the audience and the talk mdash even if you've memorized it. If you want to engage an audience it's better to start with no more than an outline of what you want to say and ad lib the individual sentences. But if you do that you could spend no more time thinking about each sentence than it takes to say it. 2 Occasionally the stimulation of talking to a live audience makes you think of new things but in general this is not going to generate ideas as well as writing does where you can spend as long on each sentence as you want.If you rehearse a prewritten speech enough you can get asymptotically close to the sort of engagement you get when speaking ad lib. Actors do. But here again there's a tradeoff between smoothness and ideas. All the time you spend practicing a talk you could instead spend making it better. Actors don't face that temptation except in the rare cases where they've written the script but any speaker does. Before I give a talk I can usually be found sitting in a corner somewhere with a copy printed out on paper trying to rehearse it in my head. But I always end up spending most of the time rewriting it instead. Every talk I give ends up being given from a manuscript full of things crossed out and rewritten. Which of course makes me um even more because I haven't had any time at all to practice the new bits. 3 Depending on your audience there are even worse tradeoffs than these. Audiences like to be flattered they like jokes they like to be swept off their feet by a vigorous stream of words. As you decrease the intelligence of the audience being a good speaker is increasingly a matter of being a good bullshitter. That's true in writing too of course but the descent is steeper with talks. Any given person is dumber as a member of an audience than as a reader. Just as a speaker ad libbing can only spend as long thinking about each sentence as it takes to say it a person hearing a talk can only spend as long thinking about each sentence as it takes to hear it. Plus people in an audience are always affected by the reactions of those around them and the reactions that spread from person to person in an audience are disproportionately the more brutish sort just as low notes travel through walls better than high ones. Every audience is an incipient mob and a good speaker uses that. Part of the reason I laughed so much at the talk by the good speaker at that conference was that everyone else did. 4 So are talks useless They're certainly inferior to the written word as a source of ideas. But that's not all talks are good for. When I go to a talk it's usually because I'm interested in the speaker. Listening to a talk is the closest most of us can get to having a conversation with someone like the president who doesn't have time to meet individually with all the people who want to meet him.Talks are also good at motivating me to do things. It's probably no coincidence that so many famous speakers are described as motivational speakers. That may be what public speaking is really for. It's probably what it was originally for. The emotional reactions you can elicit with a talk can be a powerful force. I wish I could say that force was more often used for good than ill but I'm not sure.Notes 1 I'm not talking here about academic talks which are a different type of thing. While the audience at an academic talk might appreciate a joke they will (or at least should) make a conscious effort to see what new ideas you're presenting. 2 That's the lower bound. In practice you can often do better because talks are usually about things you've written or talked about before and when you ad lib you end up reproducing some of those sentences. Like early medieval architecture impromptu talks are made of spolia. Which feels a bit dishonest incidentally because you have to deliver these sentences as if you'd just thought of them. 3 Robert Morris points out that there is a way in which practicing talks makes them better: reading a talk out loud can expose awkward parts. I agree and in fact I read most things I write out loud at least once for that reason. 4 For sufficiently small audiences it may not be true that being part of an audience makes people dumber. The real decline seems to set in when the audience gets too big for the talk to feel like a conversation mdash maybe around 10 people. Thanks to Sam Altman and Robert Morris for reading drafts of this.
After the last talk I gave one of the organizers got up on the stage to deliver an impromptu rebuttal. That never happened before. I only heard the first few sentences but that was enough to tell what I said that upset him: that startups would do better if they moved to Silicon Valley.This conference was in London and most of the audience seemed to be from the UK. So saying startups should move to Silicon Valley seemed like a nationalistic remark: an obnoxious American telling them that if they wanted to do things right they should all just move to America.Actually I'm less American than I seem. I didn't say so but I'm British by birth. And just as Jews are ex officio allowed to tell Jewish jokes I don't feel like I have to bother being diplomatic with a British audience.The idea that startups would do better to move to Silicon Valley is not even a nationalistic one. 1 It's the same thing I say to startups in the US. Y Combinator alternates between coasts every 6 months. Every other funding cycle is in Boston. And even though Boston is the second biggest startup hub in the US (and the world) we tell the startups from those cycles that their best bet is to move to Silicon Valley. If that's true of Boston it's even more true of every other city.This is about cities not countries.And I think I can prove I'm right. You can easily reduce the opposing argument ad what most people would agree was absurdum. Few would be willing to claim that it doesn't matter at all where a startup is mdash that a startup operating out of a small agricultural town wouldn't benefit from moving to a startup hub. Most people could see how it might be helpful to be in a place where there was infrastructure for startups accumulated knowledge about how to make them work and other people trying to do it. And yet whatever argument you use to prove that startups don't need to move from London to Silicon Valley could equally well be used to prove startups don't need to move from smaller towns to London.The difference between cities is a matter of degree. And if as nearly everyone who knows agrees startups are better off in Silicon Valley than Boston then they're better off in Silicon Valley than everywhere else too.I realize I might seem to have a vested interest in this conclusion because startups that move to the US might do it through Y Combinator. But the American startups we've funded will attest that I say the same thing to them.I'm not claiming of course that every startup has to go to Silicon Valley to succeed. Just that all other things being equal the more of a startup hub a place is the better startups will do there. But other considerations can outweigh the advantages of moving. I'm not saying founders with families should uproot them to move halfway around the world that might be too much of a distraction.Immigration difficulties might be another reason to stay put. Dealing with immigration problems is like raising money: for some reason it seems to consume all your attention. A startup can't afford much of that. One Canadian startup we funded spent about 6 months working on moving to the US. Eventually they just gave up because they couldn't afford to take so much time away from working on their software.(If another country wanted to establish a rival to Silicon Valley the single best thing they could do might be to create a special visa for startup founders. US immigration policy is one of Silicon Valley's biggest weaknesses.)If your startup is connected to a specific industry you may be better off in one of its centers. A startup doing something related to entertainment might want to be in New York or LA.And finally if a good investor has committed to fund you if you stay where you are you should probably stay. Finding investors is hard. You generally shouldn't pass up a definite funding offer to move. 2 In fact the quality of the investors may be the main advantage of startup hubs. Silicon Valley investors are noticeably more aggressive than Boston ones. Over and over I've seen startups we've funded snatched by west coast investors out from under the noses of Boston investors who saw them first but acted too slowly. At this year's Boston Demo Day I told the audience that this happened every year so if they saw a startup they liked they should make them an offer. And yet within a month it had happened again: an aggressive west coast VC who had met the founder of a YC funded startup a week before beat out a Boston VC who had known him for years. By the time the Boston VC grasped what was happening the deal was already gone.Boston investors will admit they're more conservative. Some want to believe this comes from the city's prudent Yankee character. But Occam's razor suggests the truth is less flattering. Boston investors are probably more conservative than Silicon Valley investors for the same reason Chicago investors are more conservative than Boston ones. They don't understand startups as well.West coast investors aren't bolder because they're irresponsible cowboys or because the good weather makes them optimistic. They're bolder because they know what they're doing. They're the skiers who ski on the diamond slopes. Boldness is the essence of venture investing. The way you get big returns is not by trying to avoid losses but by trying to ensure you get some of the big hits. And the big hits often look risky at first.Like Facebook. Facebook was started in Boston. Boston VCs had the first shot at them. But they said no so Facebook moved to Silicon Valley and raised money there. The partner who turned them down now says that "may turn out to have been a mistake."Empirically boldness wins. If the aggressive ways of west coast investors are going to come back to bite them it has been a long time coming. Silicon Valley has been pulling ahead of Boston since the 1970s. If there was going to be a comeuppance for the west coast investors the bursting of the Bubble would have been it. But since then the west coast has just pulled further ahead.West coast investors are confident enough of their judgement to act boldly east coast investors not so much but anyone who thinks east coast investors act that way out of prudence should see the frantic reactions of an east coast VC in the process of losing a deal to a west coast one.In addition to the concentration that comes from specialization startup hubs are also markets. And markets are usually centralized. Even now when traders could be anywhere they cluster in a few cities. It's hard to say exactly what it is about face to face contact that makes deals happen but whatever it is it hasn't yet been duplicated by technology.Walk down University Ave at the right time and you might overhear five different people talking on the phone about deals. In fact this is part of the reason Y Combinator is in Boston half the time: it's hard to stand that year round. But though it can sometimes be annoying to be surrounded by people who only think about one thing it's the place to be if that one thing is what you're trying to do.I was talking recently to someone who works on search at Google. He knew a lot of people at Yahoo so he was in a good position to compare the two companies. I asked him why Google was better at search. He said it wasn't anything specific Google did but simply that they understood search so much better.And that's why startups thrive in startup hubs like Silicon Valley. Startups are a very specialized business as specialized as diamond cutting. And in startup hubs they understand it. Notes 1 The nationalistic idea is the converse: that startups should stay in a certain city because of the country it's in. If you really have a "one world" viewpoint deciding to move from London to Silicon Valley is no different from deciding to move from Chicago to Silicon Valley. 2 An investor who merely seems like he will fund you however you can ignore. Seeming like they will fund you one day is the way investors say No.Thanks to Sam Altman Jessica Livingston Harjeet Taggar and Kulveer Taggar for reading drafts of this.
(This essay is derived from a talk at the 2006 Startup School.)The startups we've funded so far are pretty quick but they seem quicker to learn some lessons than others. I think it's because some things about startups are kind of counterintuitive.We've now invested in enough companies that I've learned a trick for determining which points are the counterintuitive ones: they're the ones I have to keep repeating.So I'm going to number these points and maybe with future startups I'll be able to pull off a form of Huffman coding. I'll make them all read this and then instead of nagging them in detail I'll just be able to say: number four 1. Release Early.The thing I probably repeat most is this recipe for a startup: get a version 1 out fast then improve it based on users' reactions.By "release early" I don't mean you should release something full of bugs but that you should release something minimal. Users hate bugs but they don't seem to mind a minimal version 1 if there's more coming soon.There are several reasons it pays to get version 1 done fast. One is that this is simply the right way to write software whether for a startup or not. I've been repeating that since 1993 and I haven't seen much since to contradict it. I've seen a lot of startups die because they were too slow to release stuff and none because they were too quick. 1 One of the things that will surprise you if you build something popular is that you won't know your users. Reddit now has almost half a million unique visitors a month. Who are all those people They have no idea. No web startup does. And since you don't know your users it's dangerous to guess what they'll like. Better to release something and let them tell you.Wufoo took this to heart and released their form builder before the underlying database. You can't even drive the thing yet but 83 000 people came to sit in the driver's seat and hold the steering wheel. And Wufoo got valuable feedback from it: Linux users complained they used too much Flash so they rewrote their software not to. If they'd waited to release everything at once they wouldn't have discovered this problem till it was more deeply wired in.Even if you had no users it would still be important to release quickly because for a startup the initial release acts as a shakedown cruise. If anything major is broken if the idea's no good for example or the founders hate one another the stress of getting that first version out will expose it. And if you have such problems you want to find them early.Perhaps the most important reason to release early though is that it makes you work harder. When you're working on something that isn't released problems are intriguing. In something that's out there problems are alarming. There is a lot more urgency once you release. And I think that's precisely why people put it off. They know they'll have to work a lot harder once they do. 2 2. Keep Pumping Out Features.Of course "release early" has a second component without which it would be bad advice. If you're going to start with something that doesn't do much you better improve it fast.What I find myself repeating is "pump out features." And this rule isn't just for the initial stages. This is something all startups should do for as long as they want to be considered startups.I don't mean of course that you should make your application ever more complex. By "feature" I mean one unit of hacking one quantum of making users' lives better.As with exercise improvements beget improvements. If you run every day you'll probably feel like running tomorrow. But if you skip running for a couple weeks it will be an effort to drag yourself out. So it is with hacking: the more ideas you implement the more ideas you'll have. You should make your system better at least in some small way every day or two.This is not just a good way to get development done it is also a form of marketing. Users love a site that's constantly improving. In fact users expect a site to improve. Imagine if you visited a site that seemed very good and then returned two months later and not one thing had changed. Wouldn't it start to seem lame 3 They'll like you even better when you improve in response to their comments because customers are used to companies ignoring them. If you're the rare exception a company that actually listens you'll generate fanatical loyalty. You won't need to advertise because your users will do it for you.This seems obvious too so why do I have to keep repeating it I think the problem here is that people get used to how things are. Once a product gets past the stage where it has glaring flaws you start to get used to it and gradually whatever features it happens to have become its identity. For example I doubt many people at Yahoo (or Google for that matter) realized how much better web mail could be till Paul Buchheit showed them.I think the solution is to assume that anything you've made is far short of what it could be. Force yourself as a sort of intellectual exercise to keep thinking of improvements. Ok sure what you have is perfect. But if you had to change something what would it be If your product seems finished there are two possible explanations: (a) it is finished or (b) you lack imagination. Experience suggests (b) is a thousand times more likely. 3. Make Users Happy.Improving constantly is an instance of a more general rule: make users happy. One thing all startups have in common is that they can't force anyone to do anything. They can't force anyone to use their software and they can't force anyone to do deals with them. A startup has to sing for its supper. That's why the successful ones make great things. They have to or die.When you're running a startup you feel like a little bit of debris blown about by powerful winds. The most powerful wind is users. They can either catch you and loft you up into the sky as they did with Google or leave you flat on the pavement as they do with most startups. Users are a fickle wind but more powerful than any other. If they take you up no competitor can keep you down.As a little piece of debris the rational thing for you to do is not to lie flat but to curl yourself into a shape the wind will catch.I like the wind metaphor because it reminds you how impersonal the stream of traffic is. The vast majority of people who visit your site will be casual visitors. It's them you have to design your site for. The people who really care will find what they want by themselves.The median visitor will arrive with their finger poised on the Back button. Think about your own experience: most links you follow lead to something lame. Anyone who has used the web for more than a couple weeks has been trained to click on Back after following a link. So your site has to say "Wait Don't click on Back. This site isn't lame. Look at this for example."There are two things you have to do to make people pause. The most important is to explain as concisely as possible what the hell your site is about. How often have you visited a site that seemed to assume you already knew what they did For example the corporate site that says the company makes enterprise content management solutions for business that enable organizations to unify people content and processes to minimize business risk accelerate time to value and sustain lower total cost of ownership. An established company may get away with such an opaque description but no startup can. A startup should be able to explain in one or two sentences exactly what it does. 4 And not just to users. You need this for everyone: investors acquirers partners reporters potential employees and even current employees. You probably shouldn't even start a company to do something that can't be described compellingly in one or two sentences.The other thing I repeat is to give people everything you've got right away. If you have something impressive try to put it on the front page because that's the only one most visitors will see. Though indeed there's a paradox here: the more you push the good stuff toward the front the more likely visitors are to explore further. 5 In the best case these two suggestions get combined: you tell visitors what your site is about by showing them. One of the standard pieces of advice in fiction writing is "show don't tell." Don't say that a character's angry have him grind his teeth or break his pencil in half. Nothing will explain what your site does so well as using it.The industry term here is "conversion." The job of your site is to convert casual visitors into users whatever your definition of a user is. You can measure this in your growth rate. Either your site is catching on or it isn't and you must know which. If you have decent growth you'll win in the end no matter how obscure you are now. And if you don't you need to fix something. 4. Fear the Right Things.Another thing I find myself saying a lot is "don't worry." Actually it's more often "don't worry about this worry about that instead." Startups are right to be paranoid but they sometimes fear the wrong things.Most visible disasters are not so alarming as they seem. Disasters are normal in a startup: a founder quits you discover a patent that covers what you're doing your servers keep crashing you run into an insoluble technical problem you have to change your name a deal falls through these are all par for the course. They won't kill you unless you let them.Nor will most competitors. A lot of startups worry "what if Google builds something like us " Actually big companies are not the ones you have to worry about not even Google. The people at Google are smart but no smarter than you they're not as motivated because Google is not going to go out of business if this one product fails and even at Google they have a lot of bureaucracy to slow them down.What you should fear as a startup is not the established players but other startups you don't know exist yet. They're way more dangerous than Google because like you they're cornered animals.Looking just at existing competitors can give you a false sense of security. You should compete against what someone else could be doing not just what you can see people doing. A corollary is that you shouldn't relax just because you have no visible competitors yet. No matter what your idea there's someone else out there working on the same thing.That's the downside of it being easier to start a startup: more people are doing it. But I disagree with Caterina Fake when she says that makes this a bad time to start a startup. More people are starting startups but not as many more as could. Most college graduates still think they have to get a job. The average person can't ignore something that's been beaten into their head since they were three just because serving web pages recently got a lot cheaper.And in any case competitors are not the biggest threat. Way more startups hose themselves than get crushed by competitors. There are a lot of ways to do it but the three main ones are internal disputes inertia and ignoring users. Each is by itself enough to kill you. But if I had to pick the worst it would be ignoring users. If you want a recipe for a startup that's going to die here it is: a couple of founders who have some great idea they know everyone is going to love and that's what they're going to build no matter what.Almost everyone's initial plan is broken. If companies stuck to their initial plans Microsoft would be selling programming languages and Apple would be selling printed circuit boards. In both cases their customers told them what their business should be and they were smart enough to listen.As Richard Feynman said the imagination of nature is greater than the imagination of man. You'll find more interesting things by looking at the world than you could ever produce just by thinking. This principle is very powerful. It's why the best abstract painting still falls short of Leonardo for example. And it applies to startups too. No idea for a product could ever be so clever as the ones you can discover by smashing a beam of prototypes into a beam of users. 5. Commitment Is a Self Fulfilling Prophecy.I now have enough experience with startups to be able to say what the most important quality is in a startup founder and it's not what you might think. The most important quality in a startup founder is determination. Not intelligence determination.This is a little depressing. I'd like to believe Viaweb succeeded because we were smart not merely determined. A lot of people in the startup world want to believe that. Not just founders but investors too. They like the idea of inhabiting a world ruled by intelligence. And you can tell they really believe this because it affects their investment decisions.Time after time VCs invest in startups founded by eminent professors. This may work in biotech where a lot of startups simply commercialize existing research but in software you want to invest in students not professors. Microsoft Yahoo and Google were all founded by people who dropped out of school to do it. What students lack in experience they more than make up in dedication.Of course if you want to get rich it's not enough merely to be determined. You have to be smart too right I'd like to think so but I've had an experience that convinced me otherwise: I spent several years living in New York.You can lose quite a lot in the brains department and it won't kill you. But lose even a little bit in the commitment department and that will kill you very rapidly.Running a startup is like walking on your hands: it's possible but it requires extraordinary effort. If an ordinary employee were asked to do the things a startup founder has to he'd be very indignant. Imagine if you were hired at some big company and in addition to writing software ten times faster than you'd ever had to before they expected you to answer support calls administer the servers design the web site cold call customers find the company office space and go out and get everyone lunch.And to do all this not in the calm womb like atmosphere of a big company but against a backdrop of constant disasters. That's the part that really demands determination. In a startup there's always some disaster happening. So if you're the least bit inclined to find an excuse to quit there's always one right there.But if you lack commitment chances are it will have been hurting you long before you actually quit. Everyone who deals with startups knows how important commitment is so if they sense you're ambivalent they won't give you much attention. If you lack commitment you'll just find that for some mysterious reason good things happen to your competitors but not to you. If you lack commitment it will seem to you that you're unlucky.Whereas if you're determined to stick around people will pay attention to you because odds are they'll have to deal with you later. You're a local not just a tourist so everyone has to come to terms with you.At Y Combinator we sometimes mistakenly fund teams who have the attitude that they're going to give this startup thing a shot for three months and if something great happens they'll stick with it "something great" meaning either that someone wants to buy them or invest millions of dollars in them. But if this is your attitude "something great" is very unlikely to happen to you because both acquirers and investors judge you by your level of commitment.If an acquirer thinks you're going to stick around no matter what they'll be more likely to buy you because if they don't and you stick around you'll probably grow your price will go up and they'll be left wishing they'd bought you earlier. Ditto for investors. What really motivates investors even big VCs is not the hope of good returns but the fear of missing out. 6 So if you make it clear you're going to succeed no matter what and the only reason you need them is to make it happen a little faster you're much more likely to get money.You can't fake this. The only way to convince everyone that you're ready to fight to the death is actually to be ready to.You have to be the right kind of determined though. I carefully chose the word determined rather than stubborn because stubbornness is a disastrous quality in a startup. You have to be determined but flexible like a running back. A successful running back doesn't just put his head down and try to run through people. He improvises: if someone appears in front of him he runs around them if someone tries to grab him he spins out of their grip he'll even run in the wrong direction briefly if that will help. The one thing he'll never do is stand still. 7 6. There Is Always Room.I was talking recently to a startup founder about whether it might be good to add a social component to their software. He said he didn't think so because the whole social thing was tapped out. Really So in a hundred years the only social networking sites will be the Facebook MySpace Flickr and Del.icio.us Not likely.There is always room for new stuff. At every point in history even the darkest bits of the dark ages people were discovering things that made everyone say "why didn't anyone think of that before " We know this continued to be true up till 2004 when the Facebook was founded though strictly speaking someone else did think of that.The reason we don't see the opportunities all around us is that we adjust to however things are and assume that's how things have to be. For example it would seem crazy to most people to try to make a better search engine than Google. Surely that field at least is tapped out. Really In a hundred years or even twenty are people still going to search for information using something like the current Google Even Google probably doesn't think that.In particular I don't think there's any limit to the number of startups. Sometimes you hear people saying "All these guys starting startups now are going to be disappointed. How many little startups are Google and Yahoo going to buy after all " That sounds cleverly skeptical but I can prove it's mistaken. No one proposes that there's some limit to the number of people who can be employed in an economy consisting of big slow moving companies with a couple thousand people each. Why should there be any limit to the number who could be employed by small fast moving companies with ten each It seems to me the only limit would be the number of people who want to work that hard.The limit on the number of startups is not the number that can get acquired by Google and Yahoo though it seems even that should be unlimited if the startups were actually worth buying but the amount of wealth that can be created. And I don't think there's any limit on that except cosmological ones.So for all practical purposes there is no limit to the number of startups. Startups make wealth which means they make things people want and if there's a limit on the number of things people want we are nowhere near it. I still don't even have a flying car. 7. Don't Get Your Hopes Up.This is another one I've been repeating since long before Y Combinator. It was practically the corporate motto at Viaweb.Startup founders are naturally optimistic. They wouldn't do it otherwise. But you should treat your optimism the way you'd treat the core of a nuclear reactor: as a source of power that's also very dangerous. You have to build a shield around it or it will fry you.The shielding of a reactor is not uniform the reactor would be useless if it were. It's pierced in a few places to let pipes in. An optimism shield has to be pierced too. I think the place to draw the line is between what you expect of yourself and what you expect of other people. It's ok to be optimistic about what you can do but assume the worst about machines and other people.This is particularly necessary in a startup because you tend to be pushing the limits of whatever you're doing. So things don't happen in the smooth predictable way they do in the rest of the world. Things change suddenly and usually for the worse.Shielding your optimism is nowhere more important than with deals. If your startup is doing a deal just assume it's not going to happen. The VCs who say they're going to invest in you aren't. The company that says they're going to buy you isn't. The big customer who wants to use your system in their whole company won't. Then if things work out you can be pleasantly surprised.The reason I warn startups not to get their hopes up is not to save them from being disappointed when things fall through. It's for a more practical reason: to prevent them from leaning their company against something that's going to fall over taking them with it.For example if someone says they want to invest in you there's a natural tendency to stop looking for other investors. That's why people proposing deals seem so positive: they want you to stop looking. And you want to stop too because doing deals is a pain. Raising money in particular is a huge time sink. So you have to consciously force yourself to keep looking.Even if you ultimately do the first deal it will be to your advantage to have kept looking because you'll get better terms. Deals are dynamic unless you're negotiating with someone unusually honest there's not a single point where you shake hands and the deal's done. There are usually a lot of subsidiary questions to be cleared up after the handshake and if the other side senses weakness if they sense you need this deal they will be very tempted to screw you in the details.VCs and corp dev guys are professional negotiators. They're trained to take advantage of weakness. 8 So while they're often nice guys they just can't help it. And as pros they do this more than you. So don't even try to bluff them. The only way a startup can have any leverage in a deal is genuinely not to need it. And if you don't believe in a deal you'll be less likely to depend on it.So I want to plant a hypnotic suggestion in your heads: when you hear someone say the words "we want to invest in you" or "we want to acquire you " I want the following phrase to appear automatically in your head: don't get your hopes up. Just continue running your company as if this deal didn't exist. Nothing is more likely to make it close.The way to succeed in a startup is to focus on the goal of getting lots of users and keep walking swiftly toward it while investors and acquirers scurry alongside trying to wave money in your face. Speed not MoneyThe way I've described it starting a startup sounds pretty stressful. It is. When I talk to the founders of the companies we've funded they all say the same thing: I knew it would be hard but I didn't realize it would be this hard.So why do it It would be worth enduring a lot of pain and stress to do something grand or heroic but just to make money Is making money really that important No not really. It seems ridiculous to me when people take business too seriously. I regard making money as a boring errand to be got out of the way as soon as possible. There is nothing grand or heroic about starting a startup per se.So why do I spend so much time thinking about startups I'll tell you why. Economically a startup is best seen not as a way to get rich but as a way to work faster. You have to make a living and a startup is a way to get that done quickly instead of letting it drag on through your whole life. 9 We take it for granted most of the time but human life is fairly miraculous. It is also palpably short. You're given this marvellous thing and then poof it's taken away. You can see why people invent gods to explain it. But even to people who don't believe in gods life commands respect. There are times in most of our lives when the days go by in a blur and almost everyone has a sense when this happens of wasting something precious. As Ben Franklin said if you love life don't waste time because time is what life is made of.So no there's nothing particularly grand about making money. That's not what makes startups worth the trouble. What's important about startups is the speed. By compressing the dull but necessary task of making a living into the smallest possible time you show respect for life and there is something grand about that.Notes 1 Startups can die from releasing something full of bugs and not fixing them fast enough but I don't know of any that died from releasing something stable but minimal very early then promptly improving it. 2 I know this is why I haven't released Arc. The moment I do I'll have people nagging me for features. 3 A web site is different from a book or movie or desktop application in this respect. Users judge a site not as a single snapshot but as an animation with multiple frames. Of the two I'd say the rate of improvement is more important to users than where you currently are. 4 It should not always tell this to users however. For example MySpace is basically a replacement mall for mallrats. But it was wiser for them initially to pretend that the site was about bands. 5 Similarly don't make users register to try your site. Maybe what you have is so valuable that visitors should gladly register to get at it. But they've been trained to expect the opposite. Most of the things they've tried on the web have sucked and probably especially those that made them register. 6 VCs have rational reasons for behaving this way. They don't make their money (if they make money) off their median investments. In a typical fund half the companies fail most of the rest generate mediocre returns and one or two "make the fund" by succeeding spectacularly. So if they miss just a few of the most promising opportunities it could hose the whole fund. 7 The attitude of a running back doesn't translate to soccer. Though it looks great when a forward dribbles past multiple defenders a player who persists in trying such things will do worse in the long term than one who passes. 8 The reason Y Combinator never negotiates valuations is that we're not professional negotiators and don't want to turn into them. 9 There are two ways to do work you love: (a) to make money then work on what you love or (b) to get a job where you get paid to work on stuff you love. In practice the first phases of both consist mostly of unedifying schleps and in (b) the second phase is less secure.Thanks to Sam Altman Trevor Blackwell Beau Hartshorne Jessica Livingston and Robert Morris for reading drafts of this.
I have too much stuff. Most people in America do. In fact the poorer people are the more stuff they seem to have. Hardly anyone is so poor that they can't afford a front yard full of old cars.It wasn't always this way. Stuff used to be rare and valuable. You can still see evidence of that if you look for it. For example in my house in Cambridge which was built in 1876 the bedrooms don't have closets. In those days people's stuff fit in a chest of drawers. Even as recently as a few decades ago there was a lot less stuff. When I look back at photos from the 1970s I'm surprised how empty houses look. As a kid I had what I thought was a huge fleet of toy cars but they'd be dwarfed by the number of toys my nephews have. All together my Matchboxes and Corgis took up about a third of the surface of my bed. In my nephews' rooms the bed is the only clear space.Stuff has gotten a lot cheaper but our attitudes toward it haven't changed correspondingly. We overvalue stuff.That was a big problem for me when I had no money. I felt poor and stuff seemed valuable so almost instinctively I accumulated it. Friends would leave something behind when they moved or I'd see something as I was walking down the street on trash night (beware of anything you find yourself describing as "perfectly good") or I'd find something in almost new condition for a tenth its retail price at a garage sale. And pow more stuff.In fact these free or nearly free things weren't bargains because they were worth even less than they cost. Most of the stuff I accumulated was worthless because I didn't need it.What I didn't understand was that the value of some new acquisition wasn't the difference between its retail price and what I paid for it. It was the value I derived from it. Stuff is an extremely illiquid asset. Unless you have some plan for selling that valuable thing you got so cheaply what difference does it make what it's "worth " The only way you're ever going to extract any value from it is to use it. And if you don't have any immediate use for it you probably never will.Companies that sell stuff have spent huge sums training us to think stuff is still valuable. But it would be closer to the truth to treat stuff as worthless.In fact worse than worthless because once you've accumulated a certain amount of stuff it starts to own you rather than the other way around. I know of one couple who couldn't retire to the town they preferred because they couldn't afford a place there big enough for all their stuff. Their house isn't theirs it's their stuff's.And unless you're extremely organized a house full of stuff can be very depressing. A cluttered room saps one's spirits. One reason obviously is that there's less room for people in a room full of stuff. But there's more going on than that. I think humans constantly scan their environment to build a mental model of what's around them. And the harder a scene is to parse the less energy you have left for conscious thoughts. A cluttered room is literally exhausting.(This could explain why clutter doesn't seem to bother kids as much as adults. Kids are less perceptive. They build a coarser model of their surroundings and this consumes less energy.)I first realized the worthlessness of stuff when I lived in Italy for a year. All I took with me was one large backpack of stuff. The rest of my stuff I left in my landlady's attic back in the US. And you know what All I missed were some of the books. By the end of the year I couldn't even remember what else I had stored in that attic.And yet when I got back I didn't discard so much as a box of it. Throw away a perfectly good rotary telephone I might need that one day.The really painful thing to recall is not just that I accumulated all this useless stuff but that I often spent money I desperately needed on stuff that I didn't.Why would I do that Because the people whose job is to sell you stuff are really really good at it. The average 25 year old is no match for companies that have spent years figuring out how to get you to spend money on stuff. They make the experience of buying stuff so pleasant that "shopping" becomes a leisure activity.How do you protect yourself from these people It can't be easy. I'm a fairly skeptical person and their tricks worked on me well into my thirties. But one thing that might work is to ask yourself before buying something "is this going to make my life noticeably better "A friend of mine cured herself of a clothes buying habit by asking herself before she bought anything "Am I going to wear this all the time " If she couldn't convince herself that something she was thinking of buying would become one of those few things she wore all the time she wouldn't buy it. I think that would work for any kind of purchase. Before you buy anything ask yourself: will this be something I use constantly Or is it just something nice Or worse still a mere bargain The worst stuff in this respect may be stuff you don't use much because it's too good. Nothing owns you like fragile stuff. For example the "good china" so many households have and whose defining quality is not so much that it's fun to use but that one must be especially careful not to break it.Another way to resist acquiring stuff is to think of the overall cost of owning it. The purchase price is just the beginning. You're going to have to think about that thing for years mdash perhaps for the rest of your life. Every thing you own takes energy away from you. Some give more than they take. Those are the only things worth having.I've now stopped accumulating stuff. Except books mdash but books are different. Books are more like a fluid than individual objects. It's not especially inconvenient to own several thousand books whereas if you owned several thousand random possessions you'd be a local celebrity. But except for books I now actively avoid stuff. If I want to spend money on some kind of treat I'll take services over goods any day.I'm not claiming this is because I've achieved some kind of zenlike detachment from material things. I'm talking about something more mundane. A historical change has taken place and I've now realized it. Stuff used to be valuable and now it's not.In industrialized countries the same thing happened with food in the middle of the twentieth century. As food got cheaper (or we got richer they're indistinguishable) eating too much started to be a bigger danger than eating too little. We've now reached that point with stuff. For most people rich or poor stuff has become a burden.The good news is if you're carrying a burden without knowing it your life could be better than you realize. Imagine walking around for years with five pound ankle weights then suddenly having them removed. Like this Leave a tip. All proceeds to EFF. 
 Breaking News: The Suit is Back 
I was thinking recently how inconvenient it was not to have a general term for iPhones iPads and the corresponding things running Android. The closest to a general term seems to be "mobile devices " but that (a) applies to any mobile phone and (b) doesn't really capture what's distinctive about the iPad.After a few seconds it struck me that what we'll end up calling these things is tablets. The only reason we even consider calling them "mobile devices" is that the iPhone preceded the iPad. If the iPad had come first we wouldn't think of the iPhone as a phone we'd think of it as a tablet small enough to hold up to your ear.The iPhone isn't so much a phone as a replacement for a phone. That's an important distinction because it's an early instance of what will become a common pattern. Many if not most of the special purpose objects around us are going to be replaced by apps running on tablets.This is already clear in cases like GPSes music players and cameras. But I think it will surprise people how many things are going to get replaced. We funded one startup that's replacing keys. The fact that you can change font sizes easily means the iPad effectively replaces reading glasses. I wouldn't be surprised if by playing some clever tricks with the accelerometer you could even replace the bathroom scale.The advantages of doing things in software on a single device are so great that everything that can get turned into software will. So for the next couple years a good recipe for startups will be to look around you for things that people haven't realized yet can be made unnecessary by a tablet app.In 1938 Buckminster Fuller coined the term ephemeralization to describe the increasing tendency of physical machinery to be replaced by what we would now call software. The reason tablets are going to take over the world is not (just) that Steve Jobs and Co are industrial design wizards but because they have this force behind them. The iPhone and the iPad have effectively drilled a hole that will allow ephemeralization to flow into a lot of new areas. No one who has studied the history of technology would want to underestimate the power of that force.I worry about the power Apple could have with this force behind them. I don't want to see another era of client monoculture like the Microsoft one in the 80s and 90s. But if ephemeralization is one of the main forces driving the spread of tablets that suggests a way to compete with Apple: be a better platform for it.It has turned out to be a great thing that Apple tablets have accelerometers in them. Developers have used the accelerometer in ways Apple could never have imagined. That's the nature of platforms. The more versatile the tool the less you can predict how people will use it. So tablet makers should be thinking: what else can we put in there Not merely hardware but software too. What else can we give developers access to Give hackers an inch and they'll take you a mile. Thanks to Sam Altman Paul Buchheit Jessica Livingston and Robert Morris for reading drafts of this.Note: The original version of this essay used the term "etherealization" instead of "ephemeralization " but apparently the former was an alternative name suggested to Fuller by someone else he preferred the latter. 
 "...Copernicus' aesthetic objections to equants provided one essential motive for his rejection of the Ptolemaic system...." Thomas Kuhn The Copernican Revolution"All of us had been trained by Kelly Johnson and believed fanatically in his insistence that an airplane that looked beautiful would fly the same way." Ben Rich Skunk Works"Beauty is the first test: there is no permanent place in this world for ugly mathematics." G. H. Hardy A Mathematician's Apology 
A palliative care nurse called Bronnie Ware made a list of the biggest regrets of the dying. Her list seems plausible. I could see myself mdash can see myself mdash making at least 4 of these 5 mistakes.If you had to compress them into a single piece of advice it might be: don't be a cog. The 5 regrets paint a portrait of post industrial man who shrinks himself into a shape that fits his circumstances then turns dutifully till he stops.The alarming thing is the mistakes that produce these regrets are all errors of omission. You forget your dreams ignore your family suppress your feelings neglect your friends and forget to be happy. Errors of omission are a particularly dangerous type of mistake because you make them by default.I would like to avoid making these mistakes. But how do you avoid mistakes you make by default Ideally you transform your life so it has other defaults. But it may not be possible to do that completely. As long as these mistakes happen by default you probably have to be reminded not to make them. So I inverted the 5 regrets yielding a list of 5 commands Don't ignore your dreams don't work too much say what you think cultivate friendships be happy. which I then put at the top of the file I use as a todo list.
A user on Hacker News recently posted a comment that set me thinking: Something about hacker culture that never really set well with me was this mdash the nastiness. ... I just don't understand why people troll like they do. I've thought a lot over the last couple years about the problem of trolls. It's an old one as old as forums but we're still just learning what the causes are and how to address them.There are two senses of the word "troll." In the original sense it meant someone usually an outsider who deliberately stirred up fights in a forum by saying controversial things. 1 For example someone who didn't use a certain programming language might go to a forum for users of that language and make disparaging remarks about it then sit back and watch as people rose to the bait. This sort of trolling was in the nature of a practical joke like letting a bat loose in a room full of people.The definition then spread to people who behaved like assholes in forums whether intentionally or not. Now when people talk about trolls they usually mean this broader sense of the word. Though in a sense this is historically inaccurate it is in other ways more accurate because when someone is being an asshole it's usually uncertain even in their own mind how much is deliberate. That is arguably one of the defining qualities of an asshole.I think trolling in the broader sense has four causes. The most important is distance. People will say things in anonymous forums that they'd never dare say to someone's face just as they'll do things in cars that they'd never do as pedestrians mdash like tailgate people or honk at them or cut them off.Trolling tends to be particularly bad in forums related to computers and I think that's due to the kind of people you find there. Most of them (myself included) are more comfortable dealing with abstract ideas than with people. Hackers can be abrupt even in person. Put them on an anonymous forum and the problem gets worse.The third cause of trolling is incompetence. If you disagree with something it's easier to say "you suck" than to figure out and explain exactly what you disagree with. You're also safe that way from refutation. In this respect trolling is a lot like graffiti. Graffiti happens at the intersection of ambition and incompetence: people want to make their mark on the world but have no other way to do it than literally making a mark on the world. 2 The final contributing factor is the culture of the forum. Trolls are like children (many are children) in that they're capable of a wide range of behavior depending on what they think will be tolerated. In a place where rudeness isn't tolerated most can be polite. But vice versa as well.There's a sort of Gresham's Law of trolls: trolls are willing to use a forum with a lot of thoughtful people in it but thoughtful people aren't willing to use a forum with a lot of trolls in it. Which means that once trolling takes hold it tends to become the dominant culture. That had already happened to Slashdot and Digg by the time I paid attention to comment threads there but I watched it happen to Reddit.News.YC is among other things an experiment to see if this fate can be avoided. The sites's guidelines explicitly ask people not to say things they wouldn't say face to face. If someone starts being rude other users will step in and tell them to stop. And when people seem to be deliberately trolling we ban them ruthlessly.Technical tweaks may also help. On Reddit votes on your comments don't affect your karma score but they do on News.YC. And it does seem to influence people when they can see their reputation in the eyes of their peers drain away after making an asshole remark. Often users have second thoughts and delete such comments.One might worry this would prevent people from expressing controversial ideas but empirically that doesn't seem to be what happens. When people say something substantial that gets modded down they stubbornly leave it up. What people delete are wisecracks because they have less invested in them.So far the experiment seems to be working. The level of conversation on News.YC is as high as on any forum I've seen. But we still only have about 8 000 uniques a day. The conversations on Reddit were good when it was that small. The challenge is whether we can keep things this way.I'm optimistic we will. We're not depending just on technical tricks. The core users of News.YC are mostly refugees from other sites that were overrun by trolls. They feel about trolls roughly the way refugees from Cuba or Eastern Europe feel about dictatorships. So there are a lot of people working to keep this from happening again. Notes 1 I mean forum in the general sense of a place to exchange views. The original Internet forums were not web sites but Usenet newsgroups. 2 I'm talking here about everyday tagging. Some graffiti is quite impressive (anything becomes art if you do it well enough) but the median tag is just visual spam.
Om Malik is the most recent of many people to ask why Twitter is such a big deal.The reason is that it's a new messaging protocol where you don't specify the recipients. New protocols are rare. Or more precisely new protocols that take off are. There are only a handful of commonly used ones: TCP IP (the Internet) SMTP (email) HTTP (the web) and so on. So any new protocol is a big deal. But Twitter is a protocol owned by a private company. That's even rarer.Curiously the fact that the founders of Twitter have been slow to monetize it may in the long run prove to be an advantage. Because they haven't tried to control it too much Twitter feels to everyone like previous protocols. One forgets it's owned by a private company. That must have made it easier for Twitter to spread.
People who worry about the increasing gap between rich and poor generally look back on the mid twentieth century as a golden age. In those days we had a large number of high paying union manufacturing jobs that boosted the median income. I wouldn't quite call the high paying union job a myth but I think people who dwell on it are reading too much into it.Oddly enough it was working with startups that made me realize where the high paying union job came from. In a rapidly growing market you don't worry too much about efficiency. It's more important to grow fast. If there's some mundane problem getting in your way and there's a simple solution that's somewhat expensive just take it and get on with more important things. EBay didn't win by paying less for servers than their competitors.Difficult though it may be to imagine now manufacturing was a growth industry in the mid twentieth century. This was an era when small firms making everything from cars to candy were getting consolidated into a new kind of corporation with national reach and huge economies of scale. You had to grow fast or die. Workers were for these companies what servers are for an Internet startup. A reliable supply was more important than low cost.If you looked in the head of a 1950s auto executive the attitude must have been: sure give 'em whatever they ask for so long as the new model isn't delayed.In other words those workers were not paid what their work was worth. Circumstances being what they were companies would have been stupid to insist on paying them so little.If you want a less controversial example of this phenomenon ask anyone who worked as a consultant building web sites during the Internet Bubble. In the late nineties you could get paid huge sums of money for building the most trivial things. And yet does anyone who was there have any expectation those days will ever return I doubt it. Surely everyone realizes that was just a temporary aberration.The era of labor unions seems to have been the same kind of aberration just spread over a longer period and mixed together with a lot of ideology that prevents people from viewing it with as cold an eye as they would something like consulting during the Bubble.Basically unions were just Razorfish.People who think the labor movement was the creation of heroic union organizers have a problem to explain: why are unions shrinking now The best they can do is fall back on the default explanation of people living in fallen civilizations. Our ancestors were giants. The workers of the early twentieth century must have had a moral courage that's lacking today.In fact there's a simpler explanation. The early twentieth century was just a fast growing startup overpaying for infrastructure. And we in the present are not a fallen people who have abandoned whatever mysterious high minded principles produced the high paying union job. We simply live in a time when the fast growing companies overspend on different things.
(This is a new essay for the Japanese edition of Hackers Painters. It tries to explain why Americans make some things well and others badly.)A few years ago an Italian friend of mine travelled by train from Boston to Providence. She had only been in America for a couple weeks and hadn't seen much of the country yet. She arrived looking astonished. "It's so ugly "People from other rich countries can scarcely imagine the squalor of the man made bits of America. In travel books they show you mostly natural environments: the Grand Canyon whitewater rafting horses in a field. If you see pictures with man made things in them it will be either a view of the New York skyline shot from a discreet distance or a carefully cropped image of a seacoast town in Maine.How can it be visitors must wonder. How can the richest country in the world look like this Oddly enough it may not be a coincidence. Americans are good at some things and bad at others. We're good at making movies and software and bad at making cars and cities. And I think we may be good at what we're good at for the same reason we're bad at what we're bad at. We're impatient. In America if you want to do something you don't worry that it might come out badly or upset delicate social balances or that people might think you're getting above yourself. If you want to do something as Nike says just do it.This works well in some fields and badly in others. I suspect it works in movies and software because they're both messy processes. "Systematic" is the last word I'd use to describe the way good programmers write software. Code is not something they assemble painstakingly after careful planning like the pyramids. It's something they plunge into working fast and constantly changing their minds like a charcoal sketch.In software paradoxical as it sounds good craftsmanship means working fast. If you work slowly and meticulously you merely end up with a very fine implementation of your initial mistaken idea. Working slowly and meticulously is premature optimization. Better to get a prototype done fast and see what new ideas it gives you.It sounds like making movies works a lot like making software. Every movie is a Frankenstein full of imperfections and usually quite different from what was originally envisioned. But interesting and finished fairly quickly. I think we get away with this in movies and software because they're both malleable mediums. Boldness pays. And if at the last minute two parts don't quite fit you can figure out some hack that will at least conceal the problem.Not so with cars or cities. They are all too physical. If the car business worked like software or movies you'd surpass your competitors by making a car that weighed only fifty pounds or folded up to the size of a motorcycle when you wanted to park it. But with physical products there are more constraints. You don't win by dramatic innovations so much as by good taste and attention to detail.The trouble is the very word "taste" sounds slightly ridiculous to American ears. It seems pretentious or frivolous or even effeminate. Blue staters think it's "subjective " and red staters think it's for sissies. So anyone in America who really cares about design will be sailing upwind.Twenty years ago we used to hear that the problem with the US car industry was the workers. We don't hear that any more now that Japanese companies are building cars in the US. The problem with American cars is bad design. You can see that just by looking at them.All that extra sheet metal on the AMC Matador wasn't added by the workers. The problem with this car as with American cars today is that it was designed by marketing people instead of designers.Why do the Japanese make better cars than us Some say it's because their culture encourages cooperation. That may come into it. But in this case it seems more to the point that their culture prizes design and craftsmanship.For centuries the Japanese have made finer things than we have in the West. When you look at swords they made in 1200 you just can't believe the date on the label is right. Presumably their cars fit together more precisely than ours for the same reason their joinery always has. They're obsessed with making things well.Not us. When we make something in America our aim is just to get the job done. Once we reach that point we take one of two routes. We can stop there and have something crude but serviceable like a Vise grip. Or we can improve it which usually means encrusting it with gratuitous ornament. When we want to make a car "better " we stick tail fins on it or make it longer or make the windows smaller depending on the current fashion.Ditto for houses. In America you can have either a flimsy box banged together out of two by fours and drywall or a McMansion a flimsy box banged together out of two by fours and drywall but larger more dramatic looking and full of expensive fittings. Rich people don't get better design or craftsmanship they just get a larger more conspicuous version of the standard house.We don't especially prize design or craftsmanship here. What we like is speed and we're willing to do something in an ugly way to get it done fast. In some fields like software or movies this is a net win. But it's not just that software and movies are malleable mediums. In those businesses the designers (though they're not generally called that) have more power. Software companies at least successful ones tend to be run by programmers. And in the film industry though producers may second guess directors the director controls most of what appears on the screen. And so American software and movies and Japanese cars all have this in common: the people in charge care about design the former because the designers are in charge and the latter because the whole culture cares about design.I think most Japanese executives would be horrified at the idea of making a bad car. Whereas American executives in their hearts still believe the most important thing about a car is the image it projects. Make a good car What's "good " It's so subjective. If you want to know how to design a car ask a focus group.Instead of relying on their own internal design compass (like Henry Ford did) American car companies try to make what marketing people think consumers want. But it isn't working. American cars continue to lose market share. And the reason is that the customer doesn't want what he thinks he wants.Letting focus groups design your cars for you only wins in the short term. In the long term it pays to bet on good design. The focus group may say they want the meretricious feature du jour but what they want even more is to imitate sophisticated buyers and they though a small minority really do care about good design. Eventually the pimps and drug dealers notice that the doctors and lawyers have switched from Cadillac to Lexus and do the same.Apple is an interesting counterexample to the general American trend. If you want to buy a nice CD player you'll probably buy a Japanese one. But if you want to buy an MP3 player you'll probably buy an iPod. What happened Why doesn't Sony dominate MP3 players Because Apple is in the consumer electronics business now and unlike other American companies they're obsessed with good design. Or more precisely their CEO is.I just got an iPod and it's not just nice. It's surprisingly nice. For it to surprise me it must be satisfying expectations I didn't know I had. No focus group is going to discover those. Only a great designer can.Cars aren't the worst thing we make in America. Where the just do it model fails most dramatically is in our cities or rather exurbs. If real estate developers operated on a large enough scale if they built whole towns market forces would compel them to build towns that didn't suck. But they only build a couple office buildings or suburban streets at a time and the result is so depressing that the inhabitants consider it a great treat to fly to Europe and spend a couple weeks living what is for people there just everyday life. 1 But the just do it model does have advantages. It seems the clear winner for generating wealth and technical innovations (which are practically the same thing). I think speed is the reason. It's hard to create wealth by making a commodity. The real value is in things that are new and if you want to be the first to make something it helps to work fast. For better or worse the just do it model is fast whether you're Dan Bricklin writing the prototype of VisiCalc in a weekend or a real estate developer building a block of shoddy condos in a month.If I had to choose between the just do it model and the careful model I'd probably choose just do it. But do we have to choose Could we have it both ways Could Americans have nice places to live without undermining the impatient individualistic spirit that makes us good at software Could other countries introduce more individualism into their technology companies and research labs without having it metastasize as strip malls I'm optimistic. It's harder to say about other countries but in the US at least I think we can have both.Apple is an encouraging example. They've managed to preserve enough of the impatient hackerly spirit you need to write software. And yet when you pick up a new Apple laptop well it doesn't seem American. It's too perfect. It seems as if it must have been made by a Swedish or a Japanese company.In many technologies version 2 has higher resolution. Why not in design generally I think we'll gradually see national characters superseded by occupational characters: hackers in Japan will be allowed to behave with a willfulness that would now seem unJapanese and products in America will be designed with an insistence on taste that would now seem unAmerican. Perhaps the most successful countries in the future will be those most willing to ignore what are now considered national characters and do each kind of work in the way that works best. Race you.Notes 1 Japanese cities are ugly too but for different reasons. Japan is prone to earthquakes so buildings are traditionally seen as temporary there is no grand tradition of city planning like the one Europeans inherited from Rome. The other cause is the notoriously corrupt relationship between the government and construction companies.Thanks to Trevor Blackwell Barry Eisler Sarah Harlin Shiro Kawai Jessica Livingston Jackie McDonough Robert Morris and Eric Raymond for reading drafts of this.
In the next few years venture capital funds will find themselves squeezed from four directions. They're already stuck with a seller's market because of the huge amounts they raised at the end of the Bubble and still haven't invested. This by itself is not the end of the world. In fact it's just a more extreme version of the norm in the VC business: too much money chasing too few deals.Unfortunately those few deals now want less and less money because it's getting so cheap to start a startup. The four causes: open source which makes software free Moore's law which makes hardware geometrically closer to free the Web which makes promotion free if you're good and better languages which make development a lot cheaper.When we started our startup in 1995 the first three were our biggest expenses. We had to pay 5000 for the Netscape Commerce Server the only software that then supported secure http connections. We paid 3000 for a server with a 90 MHz processor and 32 meg of memory. And we paid a PR firm about 30 000 to promote our launch.Now you could get all three for nothing. You can get the software for free people throw away computers more powerful than our first server and if you make something good you can generate ten times as much traffic by word of mouth online than our first PR firm got through the print media.And of course another big change for the average startup is that programming languages have improved or rather the median language has. At most startups ten years ago software development meant ten programmers writing code in C . Now the same work might be done by one or two using Python or Ruby.During the Bubble a lot of people predicted that startups would outsource their development to India. I think a better model for the future is David Heinemeier Hansson who outsourced his development to a more powerful language instead. A lot of well known applications are now like BaseCamp written by just one programmer. And one guy is more than 10x cheaper than ten because (a) he won't waste any time in meetings and (b) since he's probably a founder he can pay himself nothing.Because starting a startup is so cheap venture capitalists now often want to give startups more money than the startups want to take. VCs like to invest several million at a time. But as one VC told me after a startup he funded would only take about half a million "I don't know what we're going to do. Maybe we'll just have to give some of it back." Meaning give some of the fund back to the institutional investors who supplied it because it wasn't going to be possible to invest it all.Into this already bad situation comes the third problem: Sarbanes Oxley. Sarbanes Oxley is a law passed after the Bubble that drastically increases the regulatory burden on public companies. And in addition to the cost of compliance which is at least two million dollars a year the law introduces frightening legal exposure for corporate officers. An experienced CFO I know said flatly: "I would not want to be CFO of a public company now."You might think that responsible corporate governance is an area where you can't go too far. But you can go too far in any law and this remark convinced me that Sarbanes Oxley must have. This CFO is both the smartest and the most upstanding money guy I know. If Sarbanes Oxley deters people like him from being CFOs of public companies that's proof enough that it's broken.Largely because of Sarbanes Oxley few startups go public now. For all practical purposes succeeding now equals getting bought. Which means VCs are now in the business of finding promising little 2 3 man startups and pumping them up into companies that cost 100 million to acquire. They didn't mean to be in this business it's just what their business has evolved into.Hence the fourth problem: the acquirers have begun to realize they can buy wholesale. Why should they wait for VCs to make the startups they want more expensive Most of what the VCs add acquirers don't want anyway. The acquirers already have brand recognition and HR departments. What they really want is the software and the developers and that's what the startup is in the early phase: concentrated software and developers.Google typically seems to have been the first to figure this out. "Bring us your startups early " said Google's speaker at the Startup School. They're quite explicit about it: they like to acquire startups at just the point where they would do a Series A round. (The Series A round is the first round of real VC funding it usually happens in the first year.) It is a brilliant strategy and one that other big technology companies will no doubt try to duplicate. Unless they want to have still more of their lunch eaten by Google.Of course Google has an advantage in buying startups: a lot of the people there are rich or expect to be when their options vest. Ordinary employees find it very hard to recommend an acquisition it's just too annoying to see a bunch of twenty year olds get rich when you're still working for salary. Even if it's the right thing for your company to do.The Solution(s)Bad as things look now there is a way for VCs to save themselves. They need to do two things one of which won't surprise them and another that will seem an anathema.Let's start with the obvious one: lobby to get Sarbanes Oxley loosened. This law was created to prevent future Enrons not to destroy the IPO market. Since the IPO market was practically dead when it passed few saw what bad effects it would have. But now that technology has recovered from the last bust we can see clearly what a bottleneck Sarbanes Oxley has become.Startups are fragile plants mdash seedlings in fact. These seedlings are worth protecting because they grow into the trees of the economy. Much of the economy's growth is their growth. I think most politicians realize that. But they don't realize just how fragile startups are and how easily they can become collateral damage of laws meant to fix some other problem.Still more dangerously when you destroy startups they make very little noise. If you step on the toes of the coal industry you'll hear about it. But if you inadvertantly squash the startup industry all that happens is that the founders of the next Google stay in grad school instead of starting a company.My second suggestion will seem shocking to VCs: let founders cash out partially in the Series A round. At the moment when VCs invest in a startup all the stock they get is newly issued and all the money goes to the company. They could buy some stock directly from the founders as well.Most VCs have an almost religious rule against doing this. They don't want founders to get a penny till the company is sold or goes public. VCs are obsessed with control and they worry that they'll have less leverage over the founders if the founders have any money.This is a dumb plan. In fact letting the founders sell a little stock early would generally be better for the company because it would cause the founders' attitudes toward risk to be aligned with the VCs'. As things currently work their attitudes toward risk tend to be diametrically opposed: the founders who have nothing would prefer a 100 chance of 1 million to a 20 chance of 10 million while the VCs can afford to be "rational" and prefer the latter.Whatever they say the reason founders are selling their companies early instead of doing Series A rounds is that they get paid up front. That first million is just worth so much more than the subsequent ones. If founders could sell a little stock early they'd be happy to take VC money and bet the rest on a bigger outcome.So why not let the founders have that first million or at least half million The VCs would get same number of shares for the money. So what if some of the money would go to the founders instead of the company Some VCs will say this is unthinkable mdash that they want all their money to be put to work growing the company. But the fact is the huge size of current VC investments is dictated by the structure of VC funds not the needs of startups. Often as not these large investments go to work destroying the company rather than growing it.The angel investors who funded our startup let the founders sell some stock directly to them and it was a good deal for everyone. The angels made a huge return on that investment so they're happy. And for us founders it blunted the terrifying all or nothingness of a startup which in its raw form is more a distraction than a motivator.If VCs are frightened at the idea of letting founders partially cash out let me tell them something still more frightening: you are now competing directly with Google. Thanks to Trevor Blackwell Sarah Harlin Jessica Livingston and Robert Morris for reading drafts of this.
A couple months ago I got an email from a recruiter asking if I was interested in being a "technologist in residence" at a new venture capital fund. I think the idea was to play Karl Rove to the VCs' George Bush.I considered it for about four seconds. Work for a VC fund Ick.One of my most vivid memories from our startup is going to visit Greylock the famous Boston VCs. They were the most arrogant people I've met in my life. And I've met a lot of arrogant people. 1 I'm not alone in feeling this way of course. Even a VC friend of mine dislikes VCs. "Assholes " he says.But lately I've been learning more about how the VC world works hack it) and a few days ago it hit me that there's a reason VCs are the way they are. It's not so much that the business attracts jerks or even that the power they wield corrupts them. The real problem is the way they're paid.The problem with VC funds is that they're funds. Like the managers of mutual funds or hedge funds VCs get paid a percentage of the money they manage: about 2 a year in management fees plus a percentage of the gains. So they want the fund to be huge hundreds of millions of dollars if possible. But that means each partner ends up being responsible for investing a lot of money. And since one person can only manage so many deals each deal has to be for multiple millions of dollars.This turns out to explain nearly all the characteristics of VCs that founders hate.It explains why VCs take so agonizingly long to make up their minds and why their due diligence feels like a body cavity search. 2 With so much at stake they have to be paranoid.It explains why they steal your ideas. Every founder knows that VCs will tell your secrets to your competitors if they end up investing in them. It's not unheard of for VCs to meet you when they have no intention of funding you just to pick your brain for a competitor. This prospect makes naive founders clumsily secretive. Experienced founders treat it as a cost of doing business. Either way it sucks. But again the only reason VCs are so sneaky is the giant deals they do. With so much at stake they have to be devious.It explains why VCs tend to interfere in the companies they invest in. They want to be on your board not just so that they can advise you but so that they can watch you. Often they even install a new CEO. Yes he may have extensive business experience. But he's also their man: these newly installed CEOs always play something of the role of a political commissar in a Red Army unit. With so much at stake VCs can't resist micromanaging you.The huge investments themselves are something founders would dislike if they realized how damaging they can be. VCs don't invest x million because that's the amount you need but because that's the amount the structure of their business requires them to invest. Like steroids these sudden huge investments can do more harm than good. Google survived enormous VC funding because it could legitimately absorb large amounts of money. They had to buy a lot of servers and a lot of bandwidth to crawl the whole Web. Less fortunate startups just end up hiring armies of people to sit around having meetings.In principle you could take a huge VC investment put it in treasury bills and continue to operate frugally. You just try it.And of course giant investments mean giant valuations. They have to or there's not enough stock left to keep the founders interested. You might think a high valuation is a great thing. Many founders do. But you can't eat paper. You can't benefit from a high valuation unless you can somehow achieve what those in the business call a "liquidity event " and the higher your valuation the narrower your options for doing that. Many a founder would be happy to sell his company for 15 million but VCs who've just invested at a pre money valuation of 8 million won't hear of that. You're rolling the dice again whether you like it or not.Back in 1997 one of our competitors raised 20 million in a single round of VC funding. This was at the time more than the valuation of our entire company. Was I worried Not at all: I was delighted. It was like watching a car you're chasing turn down a street that you know has no outlet.Their smartest move at that point would have been to take every penny of the 20 million and use it to buy us. We would have sold. Their investors would have been furious of course. But I think the main reason they never considered this was that they never imagined we could be had so cheap. They probably assumed we were on the same VC gravy train they were.In fact we only spent about 2 million in our entire existence. And that gave us flexibility. We could sell ourselves to Yahoo for 50 million and everyone was delighted. If our competitor had done that the last round of investors would presumably have lost money. I assume they could have vetoed such a deal. But no one those days was paying a lot more than Yahoo. So unless their founders could pull off an IPO (which would be difficult with Yahoo as a competitor) they had no choice but to ride the thing down.The puffed up companies that went public during the Bubble didn't do it just because they were pulled into it by unscrupulous investment bankers. Most were pushed just as hard from the other side by VCs who'd invested at high valuations leaving an IPO as the only way out. The only people dumber were retail investors. So it was literally IPO or bust. Or rather IPO then bust or just bust.Add up all the evidence of VCs' behavior and the resulting personality is not attractive. In fact it's the classic villain: alternately cowardly greedy sneaky and overbearing.I used to take it for granted that VCs were like this. Complaining that VCs were jerks used to seem as naive to me as complaining that users didn't read the reference manual. Of course VCs were jerks. How could it be otherwise But I realize now that they're not intrinsically jerks. VCs are like car salesmen or bureaucrats: the nature of their work turns them into jerks.I've met a few VCs I like. Mike Moritz seems a good guy. He even has a sense of humor which is almost unheard of among VCs. From what I've read about John Doerr he sounds like a good guy too almost a hacker. But they work for the very best VC funds. And my theory explains why they'd tend to be different: just as the very most popular kids don't have to persecute nerds the very best VCs don't have to act like VCs. They get the pick of all the best deals. So they don't have to be so paranoid and sneaky and they can choose those rare companies like Google that will actually benefit from the giant sums they're compelled to invest.VCs often complain that in their business there's too much money chasing too few deals. Few realize that this also describes a flaw in the way funding works at the level of individual firms.Perhaps this was the sort of strategic insight I was supposed to come up with as a "technologist in residence." If so the good news is that they're getting it for free. The bad news is it means that if you're not one of the very top funds you're condemned to be the bad guys.Notes 1 After Greylock booted founder Philip Greenspun out of ArsDigita he wrote a hilarious but also very informative essay about it. 2 Since most VCs aren't tech guys the technology side of their due diligence tends to be like a body cavity search by someone with a faulty knowledge of human anatomy. After a while we were quite sore from VCs attempting to probe our nonexistent database orifice.No we don't use Oracle. We just store the data in files. Our secret is to use an OS that doesn't lose our data. Which OS FreeBSD. Why do you use that instead of Windows NT Because it's better and it doesn't cost anything. What you're using a freeware OS How many times that conversation was repeated. Then when we got to Yahoo we found they used FreeBSD and stored their data in files too.
A few hours before the Yahoo acquisition was announced in June 1998 I took a snapshot of Viaweb's site. I thought it might be interesting to look at one day.The first thing one notices is is how tiny the pages are. Screens were a lot smaller in 1998. If I remember correctly our frontpage used to just fit in the size window people typically used then.Browsers then (IE 6 was still 3 years in the future) had few fonts and they weren't antialiased. If you wanted to make pages that looked good you had to render display text as images.You may notice a certain similarity between the Viaweb and Y Combinator logos. We did that as an inside joke when we started YC. Considering how basic a red circle is it seemed surprising to me when we started Viaweb how few other companies used one as their logo. A bit later I realized why.On the Company page you'll notice a mysterious individual called John McArtyem. Robert Morris (aka Rtm) was so publicity averse after the Worm that he didn't want his name on the site. I managed to get him to agree to a compromise: we could use his bio but not his name. He has since relaxed a bit on that point.Trevor graduated at about the same time the acquisition closed so in the course of 4 days he went from impecunious grad student to millionaire PhD. The culmination of my career as a writer of press releases was one celebrating his graduation illustrated with a drawing I did of him during a meeting.(Trevor also appears as Trevino Bagwell in our directory of web designers merchants could hire to build stores for them. We inserted him as a ringer in case some competitor tried to spam our web designers. We assumed his logo would deter any actual customers but it did not.)Back in the 90s to get users you had to get mentioned in magazines and newspapers. There were not the same ways to get found online that there are today. So we used to pay a PR firm 16 000 a month to get us mentioned in the press. Fortunately reporters liked us.In our advice about getting traffic from search engines (I don't think the term SEO had been coined yet) we say there are only 7 that matter: Yahoo AltaVista Excite WebCrawler InfoSeek Lycos and HotBot. Notice anything missing Google was incorporated that September.We supported online transactions via a company called Cybercash since if we lacked that feature we'd have gotten beaten up in product comparisons. But Cybercash was so bad and most stores' order volumes were so low that it was better if merchants processed orders like phone orders. We had a page in our site trying to talk merchants out of doing real time authorizations.The whole site was organized like a funnel directing people to the test drive. It was a novel thing to be able to try out software online. We put cgi bin in our dynamic urls to fool competitors about how our software worked.We had some well known users. Needless to say Frederick's of Hollywood got the most traffic. We charged a flat fee of 300 month for big stores so it was a little alarming to have users who got lots of traffic. I once calculated how much Frederick's was costing us in bandwidth and it was about 300 month.Since we hosted all the stores which together were getting just over 10 million page views per month in June 1998 we consumed what at the time seemed a lot of bandwidth. We had 2 T1s (3 Mb sec) coming into our offices. In those days there was no AWS. Even colocating servers seemed too risky considering how often things went wrong with them. So we had our servers in our offices. Or more precisely in Trevor's office. In return for the unique privilege of sharing his office with no other humans he had to share it with 6 shrieking tower servers. His office was nicknamed the Hot Tub on account of the heat they generated. Most days his stack of window air conditioners could keep up.For describing pages we had a template language called RTML which supposedly stood for something but which in fact I named after Rtm. RTML was Common Lisp augmented by some macros and libraries and concealed under a structure editor that made it look like it had syntax.Since we did continuous releases our software didn't actually have versions. But in those days the trade press expected versions so we made them up. If we wanted to get lots of attention we made the version number an integer. That "version 4.0" icon was generated by our own button generator incidentally. The whole Viaweb site was made with our software even though it wasn't an online store because we wanted to experience what our users did.At the end of 1997 we released a general purpose shopping search engine called Shopfind. It was pretty advanced for the time. It had a programmable crawler that could crawl most of the different stores online and pick out the products.
 rev August 2009Yesterday one of the founders we funded asked me why we started Y Combinator. Or more precisely he asked if we'd started YC mainly for fun.Kind of but not quite. It is enormously fun to be able to work with Rtm and Trevor again. I missed that after we sold Viaweb and for all the years after I always had a background process running looking for something we could do together. There is definitely an aspect of a band reunion to Y Combinator. Every couple days I slip and call it "Viaweb."Viaweb we started very explicitly to make money. I was sick of living from one freelance project to the next and decided to just work as hard as I could till I'd made enough to solve the problem once and for all. Viaweb was sometimes fun but it wasn't designed for fun and mostly it wasn't. I'd be surprised if any startup is. All startups are mostly schleps.The real reason we started Y Combinator is neither selfish nor virtuous. We didn't start it mainly to make money we have no idea what our average returns might be and won't know for years. Nor did we start YC mainly to help out young would be founders though we do like the idea and comfort ourselves occasionally with the thought that if all our investments tank we will thus have been doing something unselfish. (It's oddly nondeterministic.)The real reason we started Y Combinator is one probably only a hacker would understand. We did it because it seems such a great hack. There are thousands of smart people who could start companies and don't and with a relatively small amount of force applied at just the right place we can spring on the world a stream of new startups that might otherwise not have existed.In a way this is virtuous because I think startups are a good thing. But really what motivates us is the completely amoral desire that would motivate any hacker who looked at some complex device and realized that with a tiny tweak he could make it run more efficiently. In this case the device is the world's economy which fortunately happens to be open source.
A few days ago I finally figured out something I've wondered about for 25 years: the relationship between wisdom and intelligence. Anyone can see they're not the same by the number of people who are smart but not very wise. And yet intelligence and wisdom do seem related. How What is wisdom I'd say it's knowing what to do in a lot of situations. I'm not trying to make a deep point here about the true nature of wisdom just to figure out how we use the word. A wise person is someone who usually knows the right thing to do.And yet isn't being smart also knowing what to do in certain situations For example knowing what to do when the teacher tells your elementary school class to add all the numbers from 1 to 100 1 Some say wisdom and intelligence apply to different types of problems mdash wisdom to human problems and intelligence to abstract ones. But that isn't true. Some wisdom has nothing to do with people: for example the wisdom of the engineer who knows certain structures are less prone to failure than others. And certainly smart people can find clever solutions to human problems as well as abstract ones. 2 Another popular explanation is that wisdom comes from experience while intelligence is innate. But people are not simply wise in proportion to how much experience they have. Other things must contribute to wisdom besides experience and some may be innate: a reflective disposition for example.Neither of the conventional explanations of the difference between wisdom and intelligence stands up to scrutiny. So what is the difference If we look at how people use the words "wise" and "smart " what they seem to mean is different shapes of performance.Curve"Wise" and "smart" are both ways of saying someone knows what to do. The difference is that "wise" means one has a high average outcome across all situations and "smart" means one does spectacularly well in a few. That is if you had a graph in which the x axis represented situations and the y axis the outcome the graph of the wise person would be high overall and the graph of the smart person would have high peaks.The distinction is similar to the rule that one should judge talent at its best and character at its worst. Except you judge intelligence at its best and wisdom by its average. That's how the two are related: they're the two different senses in which the same curve can be high.So a wise person knows what to do in most situations while a smart person knows what to do in situations where few others could. We need to add one more qualification: we should ignore cases where someone knows what to do because they have inside information. 3 But aside from that I don't think we can get much more specific without starting to be mistaken.Nor do we need to. Simple as it is this explanation predicts or at least accords with both of the conventional stories about the distinction between wisdom and intelligence. Human problems are the most common type so being good at solving those is key in achieving a high average outcome. And it seems natural that a high average outcome depends mostly on experience but that dramatic peaks can only be achieved by people with certain rare innate qualities nearly anyone can learn to be a good swimmer but to be an Olympic swimmer you need a certain body type.This explanation also suggests why wisdom is such an elusive concept: there's no such thing. "Wise" means something mdash that one is on average good at making the right choice. But giving the name "wisdom" to the supposed quality that enables one to do that doesn't mean such a thing exists. To the extent "wisdom" means anything it refers to a grab bag of qualities as various as self discipline experience and empathy. 4 Likewise though "intelligent" means something we're asking for trouble if we insist on looking for a single thing called "intelligence." And whatever its components they're not all innate. We use the word "intelligent" as an indication of ability: a smart person can grasp things few others could. It does seem likely there's some inborn predisposition to intelligence (and wisdom too) but this predisposition is not itself intelligence.One reason we tend to think of intelligence as inborn is that people trying to measure it have concentrated on the aspects of it that are most measurable. A quality that's inborn will obviously be more convenient to work with than one that's influenced by experience and thus might vary in the course of a study. The problem comes when we drag the word "intelligence" over onto what they're measuring. If they're measuring something inborn they can't be measuring intelligence. Three year olds aren't smart. When we describe one as smart it's shorthand for "smarter than other three year olds."SplitPerhaps it's a technicality to point out that a predisposition to intelligence is not the same as intelligence. But it's an important technicality because it reminds us that we can become smarter just as we can become wiser.The alarming thing is that we may have to choose between the two.If wisdom and intelligence are the average and peaks of the same curve then they converge as the number of points on the curve decreases. If there's just one point they're identical: the average and maximum are the same. But as the number of points increases wisdom and intelligence diverge. And historically the number of points on the curve seems to have been increasing: our ability is tested in an ever wider range of situations.In the time of Confucius and Socrates people seem to have regarded wisdom learning and intelligence as more closely related than we do. Distinguishing between "wise" and "smart" is a modern habit. 5 And the reason we do is that they've been diverging. As knowledge gets more specialized there are more points on the curve and the distinction between the spikes and the average becomes sharper like a digital image rendered with more pixels.One consequence is that some old recipes may have become obsolete. At the very least we have to go back and figure out if they were really recipes for wisdom or intelligence. But the really striking change as intelligence and wisdom drift apart is that we may have to decide which we prefer. We may not be able to optimize for both simultaneously.Society seems to have voted for intelligence. We no longer admire the sage mdash not the way people did two thousand years ago. Now we admire the genius. Because in fact the distinction we began with has a rather brutal converse: just as you can be smart without being very wise you can be wise without being very smart. That doesn't sound especially admirable. That gets you James Bond who knows what to do in a lot of situations but has to rely on Q for the ones involving math.Intelligence and wisdom are obviously not mutually exclusive. In fact a high average may help support high peaks. But there are reasons to believe that at some point you have to choose between them. One is the example of very smart people who are so often unwise that in popular culture this now seems to be regarded as the rule rather than the exception. Perhaps the absent minded professor is wise in his way or wiser than he seems but he's not wise in the way Confucius or Socrates wanted people to be. 6 NewFor both Confucius and Socrates wisdom virtue and happiness were necessarily related. The wise man was someone who knew what the right choice was and always made it to be the right choice it had to be morally right he was therefore always happy knowing he'd done the best he could. I can't think of many ancient philosophers who would have disagreed with that so far as it goes."The superior man is always happy the small man sad " said Confucius. 7 Whereas a few years ago I read an interview with a mathematician who said that most nights he went to bed discontented feeling he hadn't made enough progress. 8 The Chinese and Greek words we translate as "happy" didn't mean exactly what we do by it but there's enough overlap that this remark contradicts them.Is the mathematician a small man because he's discontented No he's just doing a kind of work that wasn't very common in Confucius's day.Human knowledge seems to grow fractally. Time after time something that seemed a small and uninteresting area mdash experimental error even mdash turns out when examined up close to have as much in it as all knowledge up to that point. Several of the fractal buds that have exploded since ancient times involve inventing and discovering new things. Math for example used to be something a handful of people did part time. Now it's the career of thousands. And in work that involves making new things some old rules don't apply.Recently I've spent some time advising people and there I find the ancient rule still works: try to understand the situation as well as you can give the best advice you can based on your experience and then don't worry about it knowing you did all you could. But I don't have anything like this serenity when I'm writing an essay. Then I'm worried. What if I run out of ideas And when I'm writing four nights out of five I go to bed discontented feeling I didn't get enough done.Advising people and writing are fundamentally different types of work. When people come to you with a problem and you have to figure out the right thing to do you don't (usually) have to invent anything. You just weigh the alternatives and try to judge which is the prudent choice. But prudence can't tell me what sentence to write next. The search space is too big.Someone like a judge or a military officer can in much of his work be guided by duty but duty is no guide in making things. Makers depend on something more precarious: inspiration. And like most people who lead a precarious existence they tend to be worried not contented. In that respect they're more like the small man of Confucius's day always one bad harvest (or ruler) away from starvation. Except instead of being at the mercy of weather and officials they're at the mercy of their own imagination.LimitsTo me it was a relief just to realize it might be ok to be discontented. The idea that a successful person should be happy has thousands of years of momentum behind it. If I was any good why didn't I have the easy confidence winners are supposed to have But that I now believe is like a runner asking "If I'm such a good athlete why do I feel so tired " Good runners still get tired they just get tired at higher speeds.People whose work is to invent or discover things are in the same position as the runner. There's no way for them to do the best they can because there's no limit to what they could do. The closest you can come is to compare yourself to other people. But the better you do the less this matters. An undergrad who gets something published feels like a star. But for someone at the top of the field what's the test of doing well Runners can at least compare themselves to others doing exactly the same thing if you win an Olympic gold medal you can be fairly content even if you think you could have run a bit faster. But what is a novelist to do Whereas if you're doing the kind of work in which problems are presented to you and you have to choose between several alternatives there's an upper bound on your performance: choosing the best every time. In ancient societies nearly all work seems to have been of this type. The peasant had to decide whether a garment was worth mending and the king whether or not to invade his neighbor but neither was expected to invent anything. In principle they could have the king could have invented firearms then invaded his neighbor. But in practice innovations were so rare that they weren't expected of you any more than goalkeepers are expected to score goals. 9 In practice it seemed as if there was a correct decision in every situation and if you made it you'd done your job perfectly just as a goalkeeper who prevents the other team from scoring is considered to have played a perfect game.In this world wisdom seemed paramount. 10 Even now most people do work in which problems are put before them and they have to choose the best alternative. But as knowledge has grown more specialized there are more and more types of work in which people have to make up new things and in which performance is therefore unbounded. Intelligence has become increasingly important relative to wisdom because there is more room for spikes.RecipesAnother sign we may have to choose between intelligence and wisdom is how different their recipes are. Wisdom seems to come largely from curing childish qualities and intelligence largely from cultivating them.Recipes for wisdom particularly ancient ones tend to have a remedial character. To achieve wisdom one must cut away all the debris that fills one's head on emergence from childhood leaving only the important stuff. Both self control and experience have this effect: to eliminate the random biases that come from your own nature and from the circumstances of your upbringing respectively. That's not all wisdom is but it's a large part of it. Much of what's in the sage's head is also in the head of every twelve year old. The difference is that in the head of the twelve year old it's mixed together with a lot of random junk.The path to intelligence seems to be through working on hard problems. You develop intelligence as you might develop muscles through exercise. But there can't be too much compulsion here. No amount of discipline can replace genuine curiosity. So cultivating intelligence seems to be a matter of identifying some bias in one's character mdash some tendency to be interested in certain types of things mdash and nurturing it. Instead of obliterating your idiosyncrasies in an effort to make yourself a neutral vessel for the truth you select one and try to grow it from a seedling into a tree.The wise are all much alike in their wisdom but very smart people tend to be smart in distinctive ways.Most of our educational traditions aim at wisdom. So perhaps one reason schools work badly is that they're trying to make intelligence using recipes for wisdom. Most recipes for wisdom have an element of subjection. At the very least you're supposed to do what the teacher says. The more extreme recipes aim to break down your individuality the way basic training does. But that's not the route to intelligence. Whereas wisdom comes through humility it may actually help in cultivating intelligence to have a mistakenly high opinion of your abilities because that encourages you to keep working. Ideally till you realize how mistaken you were.(The reason it's hard to learn new skills late in life is not just that one's brain is less malleable. Another probably even worse obstacle is that one has higher standards.)I realize we're on dangerous ground here. I'm not proposing the primary goal of education should be to increase students' "self esteem." That just breeds laziness. And in any case it doesn't really fool the kids not the smart ones. They can tell at a young age that a contest where everyone wins is a fraud.A teacher has to walk a narrow path: you want to encourage kids to come up with things on their own but you can't simply applaud everything they produce. You have to be a good audience: appreciative but not too easily impressed. And that's a lot of work. You have to have a good enough grasp of kids' capacities at different ages to know when to be surprised.That's the opposite of traditional recipes for education. Traditionally the student is the audience not the teacher the student's job is not to invent but to absorb some prescribed body of material. (The use of the term "recitation" for sections in some colleges is a fossil of this.) The problem with these old traditions is that they're too much influenced by recipes for wisdom.DifferentI deliberately gave this essay a provocative title of course it's worth being wise. But I think it's important to understand the relationship between intelligence and wisdom and particularly what seems to be the growing gap between them. That way we can avoid applying rules and standards to intelligence that are really meant for wisdom. These two senses of "knowing what to do" are more different than most people realize. The path to wisdom is through discipline and the path to intelligence through carefully selected self indulgence. Wisdom is universal and intelligence idiosyncratic. And while wisdom yields calmness intelligence much of the time leads to discontentment.That's particularly worth remembering. A physicist friend recently told me half his department was on Prozac. Perhaps if we acknowledge that some amount of frustration is inevitable in certain kinds of work we can mitigate its effects. Perhaps we can box it up and put it away some of the time instead of letting it flow together with everyday sadness to produce what seems an alarmingly large pool. At the very least we can avoid being discontented about being discontented.If you feel exhausted it's not necessarily because there's something wrong with you. Maybe you're just running fast.Notes 1 Gauss was supposedly asked this when he was 10. Instead of laboriously adding together the numbers like the other students he saw that they consisted of 50 pairs that each summed to 101 (100 1 99 2 etc) and that he could just multiply 101 by 50 to get the answer 5050. 2 A variant is that intelligence is the ability to solve problems and wisdom the judgement to know how to use those solutions. But while this is certainly an important relationship between wisdom and intelligence it's not the distinction between them. Wisdom is useful in solving problems too and intelligence can help in deciding what to do with the solutions. 3 In judging both intelligence and wisdom we have to factor out some knowledge. People who know the combination of a safe will be better at opening it than people who don't but no one would say that was a test of intelligence or wisdom.But knowledge overlaps with wisdom and probably also intelligence. A knowledge of human nature is certainly part of wisdom. So where do we draw the line Perhaps the solution is to discount knowledge that at some point has a sharp drop in utility. For example understanding French will help you in a large number of situations but its value drops sharply as soon as no one else involved knows French. Whereas the value of understanding vanity would decline more gradually.The knowledge whose utility drops sharply is the kind that has little relation to other knowledge. This includes mere conventions like languages and safe combinations and also what we'd call "random" facts like movie stars' birthdays or how to distinguish 1956 from 1957 Studebakers. 4 People seeking some single thing called "wisdom" have been fooled by grammar. Wisdom is just knowing the right thing to do and there are a hundred and one different qualities that help in that. Some like selflessness might come from meditating in an empty room and others like a knowledge of human nature might come from going to drunken parties.Perhaps realizing this will help dispel the cloud of semi sacred mystery that surrounds wisdom in so many people's eyes. The mystery comes mostly from looking for something that doesn't exist. And the reason there have historically been so many different schools of thought about how to achieve wisdom is that they've focused on different components of it.When I use the word "wisdom" in this essay I mean no more than whatever collection of qualities helps people make the right choice in a wide variety of situations. 5 Even in English our sense of the word "intelligence" is surprisingly recent. Predecessors like "understanding" seem to have had a broader meaning. 6 There is of course some uncertainty about how closely the remarks attributed to Confucius and Socrates resemble their actual opinions. I'm using these names as we use the name "Homer " to mean the hypothetical people who said the things attributed to them. 7 Analects VII:36 Fung trans.Some translators use "calm" instead of "happy." One source of difficulty here is that present day English speakers have a different idea of happiness from many older societies. Every language probably has a word meaning "how one feels when things are going well " but different cultures react differently when things go well. We react like children with smiles and laughter. But in a more reserved society or in one where life was tougher the reaction might be a quiet contentment. 8 It may have been Andrew Wiles but I'm not sure. If anyone remembers such an interview I'd appreciate hearing from you. 9 Confucius claimed proudly that he had never invented anything mdash that he had simply passed on an accurate account of ancient traditions. Analects VII:1 It's hard for us now to appreciate how important a duty it must have been in preliterate societies to remember and pass on the group's accumulated knowledge. Even in Confucius's time it still seems to have been the first duty of the scholar. 10 The bias toward wisdom in ancient philosophy may be exaggerated by the fact that in both Greece and China many of the first philosophers (including Confucius and Plato) saw themselves as teachers of administrators and so thought disproportionately about such matters. The few people who did invent things like storytellers must have seemed an outlying data point that could be ignored.Thanks to Trevor Blackwell Sarah Harlin Jessica Livingston and Robert Morris for reading drafts of this.
My father is a mathematician. For most of my childhood he worked for Westinghouse modelling nuclear reactors.He was one of those lucky people who know early on what they want to do. When you talk to him about his childhood there's a clear watershed at about age 12 when he "got interested in maths." He grew up in the small Welsh seacoast town of Pwllheli. As we retraced his walk to school on Google Street View he said that it had been nice growing up in the country."Didn't it get boring when you got to be about 15 " I asked."No " he said "by then I was interested in maths."In another conversation he told me that what he really liked was solving problems. To me the exercises at the end of each chapter in a math textbook represent work or at best a way to reinforce what you learned in that chapter. To him the problems were the reward. The text of each chapter was just some advice about solving them. He said that as soon as he got a new textbook he'd immediately work out all the problems mdash to the slight annoyance of his teacher since the class was supposed to work through the book gradually.Few people know so early or so certainly what they want to work on. But talking to my father reminded me of a heuristic the rest of us can use. If something that seems like work to other people doesn't seem like work to you that's something you're well suited for. For example a lot of programmers I know including me actually like debugging. It's not something people tend to volunteer one likes it the way one likes popping zits. But you may have to like debugging to like programming considering the degree to which programming consists of it.The stranger your tastes seem to other people the stronger evidence they probably are of what you should do. When I was in college I used to write papers for my friends. It was quite interesting to write a paper for a class I wasn't taking. Plus they were always so relieved.It seemed curious that the same task could be painful to one person and pleasant to another but I didn't realize at the time what this imbalance implied because I wasn't looking for it. I didn't realize how hard it can be to decide what you should work on and that you sometimes have to figure it out from subtle clues like a detective solving a case in a mystery novel. So I bet it would help a lot of people to ask themselves about this explicitly. What seems like work to other people that doesn't seem like work to you Thanks to Sam Altman Trevor Blackwell Jessica Livingston Robert Morris and my father for reading drafts of this.
(Informal surveys of referring urls suggested demand for essays that were short and didn't mention Lisp.) (In the process of answering an email I accidentally wrote a tiny essay about writing. I usually spend weeks on an essay. This one took 67 minutes mdash 23 of writing and 44 of rewriting.)I think it's far more important to write well than most people realize. Writing doesn't just communicate ideas it generates them. If you're bad at writing and don't like to do it you'll miss out on most of the ideas writing would have generated.As for how to write well here's the short version: Write a bad version 1 as fast as you can rewrite it over and over cut out everything unnecessary write in a conversational tone develop a nose for bad writing so you can see and fix it in yours imitate writers you like if you can't get started tell someone what you plan to write about then write down what you said expect 80 of the ideas in an essay to happen after you start writing it and 50 of those you start with to be wrong be confident enough to cut have friends you trust read your stuff and tell you which bits are confusing or drag don't (always) make detailed outlines mull ideas over for a few days before writing carry a small notebook or scrap paper with you start writing when you think of the first sentence if a deadline forces you to start before that just say the most important sentence first write about stuff you like don't try to sound impressive don't hesitate to change the topic on the fly use footnotes to contain digressions use anaphora to knit sentences together read your essays out loud to see (a) where you stumble over awkward phrases and (b) which bits are boring (the paragraphs you dread reading) try to tell the reader something new and useful work in fairly big quanta of time when you restart begin by rereading what you have so far when you finish leave yourself something easy to start with accumulate notes for topics you plan to cover at the bottom of the file don't feel obliged to cover any of them write for a reader who won't read the essay as carefully as you do just as pop songs are designed to sound ok on crappy car radios if you say anything mistaken fix it immediately ask friends which sentence you'll regret most go back and tone down harsh remarks publish stuff online because an audience makes you write more and thus generate more ideas print out drafts instead of just looking at them on the screen use simple germanic words learn to distinguish surprises from digressions learn to recognize the approach of an ending and when one appears grab it.
 rev May 2013(This essay grew out of something I wrote for myself to figure out what we do. Even though Y Combinator is now 3 years old we're still trying to understand its implications.) I was annoyed recently to read a description of Y Combinator that said "Y Combinator does seed funding for startups." What was especially annoying about it was that I wrote it. This doesn't really convey what we do. And the reason it's inaccurate is that paradoxically funding very early stage startups is not mainly about funding.Saying YC does seed funding for startups is a description in terms of earlier models. It's like calling a car a horseless carriage.When you scale animals you can't just keep everything in proportion. For example volume grows as the cube of linear dimension but surface area only as the square. So as animals get bigger they have trouble radiating heat. That's why mice and rabbits are furry and elephants and hippos aren't. You can't make a mouse by scaling down an elephant.YC represents a new smaller kind of animal mdash so much smaller that all the rules are different.Before us most companies in the startup funding business were venture capital funds. VCs generally fund later stage companies than we do. And they supply so much money that even though the other things they do may be very valuable it's not that inaccurate to regard VCs as sources of money. Good VCs are "smart money " but they're still money.All good investors supply a combination of money and help. But these scale differently just as volume and surface area do. Late stage investors supply huge amounts of money and comparatively little help: when a company about to go public gets a mezzanine round of 50 million the deal tends to be almost entirely about money. As you move earlier in the venture funding process the ratio of help to money increases because earlier stage companies have different needs. Early stage companies need less money because they're smaller and cheaper to run but they need more help because life is so precarious for them. So when VCs do a series A round for say 2 million they generally expect to offer a significant amount of help along with the money.Y Combinator occupies the earliest end of the spectrum. We're at least one and generally two steps before VC funding. (Though some startups go straight from YC to VC the most common trajectory is to do an angel round first.) And what happens at Y Combinator is as different from what happens in a series A round as a series A round is from a mezzanine financing.At our end money is almost a negligible factor. The startup usually consists of just the founders. Their living expenses are the company's main expense and since most founders are under 30 their living expenses are low. But at this early stage companies need a lot of help. Practically every question is still unanswered. Some companies we've funded have been working on their software for a year or more but others haven't decided what to work on or even who the founders should be.When PR people and journalists recount the histories of startups after they've become big they always underestimate how uncertain things were at first. They're not being deliberately misleading. When you look at a company like Google it's hard to imagine they could once have been small and helpless. Sure at one point they were a just a couple guys in a garage mdash but even then their greatness was assured and all they had to do was roll forward along the railroad tracks of destiny.Far from it. A lot of startups with just as promising beginnings end up failing. Google has such momentum now that it would be hard for anyone to stop them. But all it would have taken in the beginning would have been for two Google employees to focus on the wrong things for six months and the company could have died.We know because we've been there just how vulnerable startups are in the earliest phases. Curiously enough that's why founders tend to get so rich from them. Reward is always proportionate to risk and very early stage startups are insanely risky.What we really do at Y Combinator is get startups launched straight. One of many metaphors you could use for YC is a steam catapult on an aircraft carrier. We get startups airborne. Barely airborne but enough that they can accelerate fast.When you're launching planes they have to be set up properly or you're just launching projectiles. They have to be pointed straight down the deck the wings have to be trimmed properly the engines have to be at full power the pilot has to be ready. These are the kind of problems we deal with. After we fund startups we work closely with them for three months mdash so closely in fact that we insist they move to where we are. And what we do in those three months is make sure everything is set up for launch. If there are tensions between cofounders we help sort them out. We get all the paperwork set up properly so there are no nasty surprises later. If the founders aren't sure what to focus on first we try to figure that out. If there is some obstacle right in front of them we either try to remove it or shift the startup sideways. The goal is to get every distraction out of the way so the founders can use that time to build (or finish building) something impressive. And then near the end of the three months we push the button on the steam catapult in the form of Demo Day where the current group of startups present to pretty much every investor in Silicon Valley.Launching companies isn't identical with launching products. Though we do spend a lot of time on launch strategies for products there are some things that take too long to build for a startup to launch them before raising their next round of funding. Several of the most promising startups we've funded haven't launched their products yet but are definitely launched as companies.In the earliest stage startups not only have more questions to answer but they tend to be different kinds of questions. In later stage startups the questions are about deals or hiring or organization. In the earliest phase they tend to be about technology and design. What do you make That's the first problem to solve. That's why our motto is "Make something people want." This is always a good thing for companies to do but it's even more important early on because it sets the bounds for every other question. Who you hire how much money you raise how you market yourself mdash they all depend on what you're making.Because the early problems are so much about technology and design you probably need to be hackers to do what we do. While some VCs have technical backgrounds I don't know any who still write code. Their expertise is mostly in business mdash as it should be because that's the kind of expertise you need in the phase between series A and (if you're lucky) IPO.We're so different from VCs that we're really a different kind of animal. Can we claim founders are better off as a result of this new type of venture firm I'm pretty sure the answer is yes because YC is an improved version of what happened to our startup and our case was not atypical. We started Viaweb with 10 000 in seed money from our friend Julian. He was a lawyer and arranged all our paperwork so we could just code. We spent three months building a version 1 which we then presented to investors to raise more money. Sounds familiar doesn't it But YC improves on that significantly. Julian knew a lot about law and business but his advice ended there he was not a startup guy. So we made some basic mistakes early on. And when we presented to investors we presented to only 2 because that was all we knew. If we'd had our later selves to encourage and advise us and Demo Day to present at we would have been in much better shape. We probably could have raised money at 3 to 5 times the valuation we did.If we take 7 of a company we fund the founders only have to do 7.5 better in their next round of funding to end up net ahead. We certainly manage that.So who is our 7 coming out of If the founders end up net ahead it's not coming out of them. So is it coming out of later stage investors Well they do end up paying more. But I think they pay more because the company is actually more valuable. And later stage investors have no problem with that. The returns of a VC fund depend on the quality of the companies they invest in not how cheaply they can buy stock in them.If what we do is useful why wasn't anyone doing it before There are two answers to that. One is that people were doing it before just haphazardly on a smaller scale. Before us seed funding came primarily from individual angel investors. Larry and Sergey for example got their seed funding from Andy Bechtolsheim one of the founders of Sun. And because he was a startup guy he probably gave them useful advice. But raising money from angel investors is a hit or miss thing. It's a sideline for most of them so they only do a handful of deals a year and they don't spend a lot of time on the startups they invest in. And they're hard to reach because they don't want random startups pestering them with business plans. The Google guys were lucky because they knew someone who knew Bechtolsheim. It generally takes a personal introduction with angels.The other reason no one was doing quite what we do is that till recently it was a lot more expensive to start a startup. You'll notice we haven't funded any biotech startups. That's still expensive. But advancing technology has made web startups so cheap that you really can get a company airborne for 15 000. If you understand how to operate a steam catapult at least.So in effect what's happened is that a new ecological niche has opened up and Y Combinator is the new kind of animal that has moved into it. We're not a replacement for venture capital funds. We occupy a new adjacent niche. And conditions in our niche are really quite different. It's not just that the problems we face are different the whole structure of the business is different. VCs are playing a zero sum game. They're all competing for a slice of a fixed amount of "deal flow " and that explains a lot of their behavior. Whereas our m.o. is to create new deal flow by encouraging hackers who would have gotten jobs to start their own startups instead. We compete more with employers than VCs.It's not surprising something like this would happen. Most fields become more specialized mdash more articulated mdash as they develop and startups are certainly an area in which there has been a lot of development over the past couple decades. The venture business in its present form is only about forty years old. It stands to reason it would evolve.And it's natural that the new niche would at first be described even by its inhabitants in terms of the old one. But really Y Combinator is not in the startup funding business. Really we're more of a small furry steam catapult.Thanks to Trevor Blackwell Jessica Livingston and Robert Morris for reading drafts of this.
